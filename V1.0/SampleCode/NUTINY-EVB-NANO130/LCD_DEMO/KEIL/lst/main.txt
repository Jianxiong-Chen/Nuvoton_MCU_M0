; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\LCD_DEMO.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\LCDLib\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\CMSIS\Include -ID:\software\tools\Keil_v5\ARM\RV31\INC -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;63       */
;;;64     void RTC_IRQHandler()
000000  b530              PUSH     {r4,r5,lr}
;;;65     {
;;;66         S_RTC_TIME_DATA_T sCurTime;
;;;67     
;;;68         DEBUG_MSG("RTC_IRQHandler running...\n");
;;;69     
;;;70         /* RTC Tick interrupt */
;;;71         if ((RTC->RIER & RTC_RIER_TIER_Msk) && (RTC->RIIR & RTC_RIIR_TIF_Msk))
000002  4c1c              LDR      r4,|L1.116|
000004  b089              SUB      sp,sp,#0x24           ;65
000006  6aa0              LDR      r0,[r4,#0x28]
000008  0780              LSLS     r0,r0,#30
00000a  d510              BPL      |L1.46|
00000c  6ae0              LDR      r0,[r4,#0x2c]
00000e  0780              LSLS     r0,r0,#30
000010  d50d              BPL      |L1.46|
;;;72         {
;;;73             DEBUG_MSG("RTC Tick Interrupt.\n");
;;;74             RTC->RIIR = RTC_RIIR_TIF_Msk;
000012  2002              MOVS     r0,#2
000014  62e0              STR      r0,[r4,#0x2c]
;;;75     
;;;76             if((g_u32RTC_Count %2 ) == 0)
000016  4d18              LDR      r5,|L1.120|
000018  6828              LDR      r0,[r5,#0]  ; g_u32RTC_Count
00001a  07c0              LSLS     r0,r0,#31
00001c  d027              BEQ      |L1.110|
;;;77                 LCD_SetPixel(3, 29, 0);
;;;78             else
;;;79                 LCD_SetPixel(3, 29, 1);
00001e  2201              MOVS     r2,#1
                  |L1.32|
000020  211d              MOVS     r1,#0x1d
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       LCD_SetPixel
;;;80     
;;;81             g_u32RTC_Count++;  /* increase RTC tick count */
000028  6828              LDR      r0,[r5,#0]  ; g_u32RTC_Count
00002a  1c40              ADDS     r0,r0,#1
00002c  6028              STR      r0,[r5,#0]  ; g_u32RTC_Count
                  |L1.46|
;;;82     
;;;83         }
;;;84     
;;;85         /* RTC Alarm interrupt */
;;;86         if ((RTC->RIER & RTC_RIER_AIER_Msk) && (RTC->RIIR & RTC_RIIR_AIF_Msk))
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  07c0              LSLS     r0,r0,#31
000032  d012              BEQ      |L1.90|
000034  6ae0              LDR      r0,[r4,#0x2c]
000036  07c0              LSLS     r0,r0,#31
000038  d00f              BEQ      |L1.90|
;;;87         {
;;;88             DEBUG_MSG("RTC Alarm Interrupt.\n");
;;;89             RTC->RIIR = RTC_RIIR_AIF_Msk;
00003a  2001              MOVS     r0,#1
00003c  62e0              STR      r0,[r4,#0x2c]
;;;90     
;;;91             RTC_GetDateAndTime(&sCurTime);
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       RTC_GetDateAndTime
;;;92             DEBUG_MSG("Current Time:%d/%02d/%02d %02d:%02d:%02d\n",sCurTime.u32Year,sCurTime.u32cMonth,sCurTime.u32cDay,sCurTime.u32cHour,sCurTime.u32cMinute,sCurTime.u32cSecond);
;;;93             showTime(sCurTime.u32Hour, sCurTime.u32Minute);
000044  9905              LDR      r1,[sp,#0x14]
000046  9804              LDR      r0,[sp,#0x10]
000048  f7fffffe          BL       showTime
;;;94     
;;;95             RTC_DISABLE_TICK_WAKEUP();  /* RTC tick shouldn't wake up CPU */
00004c  6b20              LDR      r0,[r4,#0x30]
00004e  2108              MOVS     r1,#8
000050  4388              BICS     r0,r0,r1
000052  6320              STR      r0,[r4,#0x30]
;;;96             planNextRTCInterrupt(&sCurTime);
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       planNextRTCInterrupt
                  |L1.90|
;;;97         }
;;;98     
;;;99         if ((RTC->RIER & RTC_RIER_SNOOPIER_Msk) && (RTC->RIIR & RTC_RIIR_SNOOPIF_Msk))   /* snooper interrupt occurred */
00005a  6aa0              LDR      r0,[r4,#0x28]
00005c  0740              LSLS     r0,r0,#29
00005e  d504              BPL      |L1.106|
000060  6ae0              LDR      r0,[r4,#0x2c]
000062  0740              LSLS     r0,r0,#29
000064  d501              BPL      |L1.106|
;;;100        {
;;;101            RTC->RIIR = RTC_RIIR_SNOOPIF_Msk;
000066  2004              MOVS     r0,#4
000068  62e0              STR      r0,[r4,#0x2c]
                  |L1.106|
;;;102        }
;;;103    
;;;104    }
00006a  b009              ADD      sp,sp,#0x24
00006c  bd30              POP      {r4,r5,pc}
                  |L1.110|
00006e  2200              MOVS     r2,#0                 ;77
000070  e7d6              B        |L1.32|
;;;105    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40008000
                  |L1.120|
                          DCD      ||.data||

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;106    
;;;107    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2159              MOVS     r1,#0x59
000004  2016              MOVS     r0,#0x16
000006  4d4a              LDR      r5,|L2.304|
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L2.18|
                  |L2.12|
00000c  6029              STR      r1,[r5,#0]
00000e  6028              STR      r0,[r5,#0]
000010  602a              STR      r2,[r5,#0]
                  |L2.18|
000012  682b              LDR      r3,[r5,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L2.12|
;;;108    {
;;;109        /*---------------------------------------------------------------------------------------------------------*/
;;;110        /* Init System Clock                                                                                       */
;;;111        /*---------------------------------------------------------------------------------------------------------*/
;;;112        /* Unlock protected registers */
;;;113        SYS_UnlockReg();
;;;114    
;;;115        /* Enable External XTAL (4~24 MHz) */
;;;116        CLK->PWRCTL &= ~CLK_PWRCTL_HXT_EN_Msk;
000018  4c46              LDR      r4,|L2.308|
00001a  6820              LDR      r0,[r4,#0]
00001c  4398              BICS     r0,r0,r3
00001e  6020              STR      r0,[r4,#0]
;;;117        CLK->PWRCTL |= (0x1 << CLK_PWRCTL_HXT_EN_Pos); // HXT Enabled
000020  6820              LDR      r0,[r4,#0]
000022  2101              MOVS     r1,#1
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;118    
;;;119        CLK->PWRCTL |= (0x1 << CLK_PWRCTL_LXT_EN_Pos); // LXT Enable
000028  6820              LDR      r0,[r4,#0]
00002a  2602              MOVS     r6,#2
00002c  4330              ORRS     r0,r0,r6
00002e  6020              STR      r0,[r4,#0]
;;;120    
;;;121        /* Waiting for 12MHz clock ready */
;;;122        CLK_WaitClockReady( CLK_CLKSTATUS_HXT_STB_Msk);
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       CLK_WaitClockReady
;;;123        /* Waiting for 32KHz clock ready */
;;;124        CLK_WaitClockReady( CLK_CLKSTATUS_LXT_STB_Msk);
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       CLK_WaitClockReady
;;;125    
;;;126        /* Switch HCLK clock source to XTAL */
;;;127        CLK->CLKSEL0 &= ~CLK_CLKSEL0_HCLK_S_Msk;
00003c  6920              LDR      r0,[r4,#0x10]
00003e  08c0              LSRS     r0,r0,#3
000040  00c0              LSLS     r0,r0,#3
000042  6120              STR      r0,[r4,#0x10]
;;;128        CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_HXT;
000044  6920              LDR      r0,[r4,#0x10]
000046  6120              STR      r0,[r4,#0x10]
;;;129    
;;;130        /* Select IP clock source */
;;;131        CLK->CLKSEL1 &= ~CLK_CLKSEL1_UART_S_Msk;
000048  6960              LDR      r0,[r4,#0x14]
00004a  0880              LSRS     r0,r0,#2
00004c  0080              LSLS     r0,r0,#2
00004e  6160              STR      r0,[r4,#0x14]
;;;132        CLK->CLKSEL1 |= (0x0 << CLK_CLKSEL1_UART_S_Pos);// Clock source from external 12 MHz or 32 KHz crystal clock
000050  6960              LDR      r0,[r4,#0x14]
000052  6160              STR      r0,[r4,#0x14]
;;;133    
;;;134        CLK->CLKSEL1 &= ~CLK_CLKSEL1_LCD_S_Msk;
000054  6960              LDR      r0,[r4,#0x14]
000056  0261              LSLS     r1,r4,#9
000058  4388              BICS     r0,r0,r1
00005a  6160              STR      r0,[r4,#0x14]
;;;135        CLK->CLKSEL1 |= (0x0 << CLK_CLKSEL1_LCD_S_LXT);// Clock source from external 12 MHz or 32 KHz crystal clock
00005c  6960              LDR      r0,[r4,#0x14]
00005e  6160              STR      r0,[r4,#0x14]
;;;136    
;;;137        /* Enable IP clock */
;;;138        CLK->APBCLK |= CLK_APBCLK_UART0_EN; // UART0 Clock Enable
000060  68a0              LDR      r0,[r4,#8]
000062  1089              ASRS     r1,r1,#2
000064  4308              ORRS     r0,r0,r1
000066  60a0              STR      r0,[r4,#8]
;;;139        CLK->APBCLK |= CLK_APBCLK_LCD_EN;
000068  68a0              LDR      r0,[r4,#8]
00006a  0289              LSLS     r1,r1,#10
00006c  4308              ORRS     r0,r0,r1
00006e  60a0              STR      r0,[r4,#8]
;;;140        CLK->APBCLK |= CLK_APBCLK_RTC_EN;
000070  68a0              LDR      r0,[r4,#8]
000072  4330              ORRS     r0,r0,r6
000074  60a0              STR      r0,[r4,#8]
;;;141    
;;;142        /* Update System Core Clock */
;;;143        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;144        SystemCoreClockUpdate();
000076  f7fffffe          BL       SystemCoreClockUpdate
;;;145    
;;;146        /*---------------------------------------------------------------------------------------------------------*/
;;;147        /* Init I/O Multi-function                                                                                 */
;;;148        /*---------------------------------------------------------------------------------------------------------*/
;;;149        /* Set PA multi-function pins for UART0 RXD and TXD  */
;;;150        SYS->PA_H_MFP &= ~(SYS_PA_H_MFP_PA14_MFP_Msk|SYS_PA_H_MFP_PA15_MFP_Msk);
00007a  2005              MOVS     r0,#5
00007c  0700              LSLS     r0,r0,#28
00007e  6b41              LDR      r1,[r0,#0x34]
000080  2277              MOVS     r2,#0x77
000082  0612              LSLS     r2,r2,#24
000084  4391              BICS     r1,r1,r2
000086  6341              STR      r1,[r0,#0x34]
;;;151        SYS->PA_H_MFP |=  (SYS_PA_H_MFP_PA14_MFP_UART0_RX|SYS_PA_H_MFP_PA15_MFP_UART0_TX);
000088  6b41              LDR      r1,[r0,#0x34]
00008a  2333              MOVS     r3,#0x33
00008c  065b              LSLS     r3,r3,#25
00008e  4319              ORRS     r1,r1,r3
000090  6341              STR      r1,[r0,#0x34]
;;;152    
;;;153        /* Select LCD COMs, SEGs, V1 ~ V3, DH1, DH2 */
;;;154        MFP_LCD_TYPEA();
000092  6b01              LDR      r1,[r0,#0x30]
000094  4b28              LDR      r3,|L2.312|
000096  4319              ORRS     r1,r1,r3
000098  6301              STR      r1,[r0,#0x30]
00009a  6b41              LDR      r1,[r0,#0x34]
00009c  141c              ASRS     r4,r3,#16
00009e  4321              ORRS     r1,r1,r4
0000a0  6341              STR      r1,[r0,#0x34]
0000a2  4926              LDR      r1,|L2.316|
0000a4  6381              STR      r1,[r0,#0x38]
0000a6  63c1              STR      r1,[r0,#0x3c]
0000a8  4821              LDR      r0,|L2.304|
0000aa  38c0              SUBS     r0,r0,#0xc0
0000ac  6804              LDR      r4,[r0,#0]
0000ae  120e              ASRS     r6,r1,#8
0000b0  4334              ORRS     r4,r4,r6
0000b2  6004              STR      r4,[r0,#0]
0000b4  6844              LDR      r4,[r0,#4]
0000b6  4314              ORRS     r4,r4,r2
0000b8  6044              STR      r4,[r0,#4]
0000ba  6882              LDR      r2,[r0,#8]
0000bc  431a              ORRS     r2,r2,r3
0000be  6082              STR      r2,[r0,#8]
0000c0  60c1              STR      r1,[r0,#0xc]
0000c2  6901              LDR      r1,[r0,#0x10]
0000c4  031a              LSLS     r2,r3,#12
0000c6  4311              ORRS     r1,r1,r2
0000c8  6101              STR      r1,[r0,#0x10]
0000ca  6941              LDR      r1,[r0,#0x14]
0000cc  4a1c              LDR      r2,|L2.320|
0000ce  4311              ORRS     r1,r1,r2
0000d0  6141              STR      r1,[r0,#0x14]
;;;155    
;;;156        /* Digital Input Path Disable */
;;;157        /* V1, V2 and V3 */
;;;158        PB->OFFD |= (0xE000000);
0000d2  491c              LDR      r1,|L2.324|
0000d4  6848              LDR      r0,[r1,#4]
0000d6  0652              LSLS     r2,r2,#25
0000d8  4310              ORRS     r0,r0,r2
0000da  6048              STR      r0,[r1,#4]
;;;159        /* DH1 and DH2 */
;;;160        PC->OFFD |= (0x30000);
0000dc  4819              LDR      r0,|L2.324|
0000de  3040              ADDS     r0,r0,#0x40
0000e0  6842              LDR      r2,[r0,#4]
0000e2  2303              MOVS     r3,#3
0000e4  041b              LSLS     r3,r3,#16
0000e6  431a              ORRS     r2,r2,r3
0000e8  6042              STR      r2,[r0,#4]
;;;161        /* COM0~3 */
;;;162        PC->OFFD |= (0x3C0000);
0000ea  6842              LDR      r2,[r0,#4]
0000ec  230f              MOVS     r3,#0xf
0000ee  049b              LSLS     r3,r3,#18
0000f0  431a              ORRS     r2,r2,r3
0000f2  6042              STR      r2,[r0,#4]
;;;163        /* SEG0~39 */
;;;164        PA->OFFD |= (0x0FF00000);
0000f4  4a13              LDR      r2,|L2.324|
0000f6  3a40              SUBS     r2,r2,#0x40
0000f8  6853              LDR      r3,[r2,#4]
0000fa  24ff              MOVS     r4,#0xff
0000fc  0524              LSLS     r4,r4,#20
0000fe  4323              ORRS     r3,r3,r4
000100  6053              STR      r3,[r2,#4]
;;;165        PB->OFFD |= (0xF1FF0000);
000102  684a              LDR      r2,[r1,#4]
000104  4b10              LDR      r3,|L2.328|
000106  431a              ORRS     r2,r2,r3
000108  604a              STR      r2,[r1,#4]
;;;166        PC->OFFD |= (0xC0000000);
00010a  6841              LDR      r1,[r0,#4]
00010c  039a              LSLS     r2,r3,#14
00010e  4311              ORRS     r1,r1,r2
000110  6041              STR      r1,[r0,#4]
;;;167        PD->OFFD |= (0xFFF00000);
000112  480c              LDR      r0,|L2.324|
000114  3080              ADDS     r0,r0,#0x80
000116  6841              LDR      r1,[r0,#4]
000118  1292              ASRS     r2,r2,#10
00011a  4311              ORRS     r1,r1,r2
00011c  6041              STR      r1,[r0,#4]
;;;168        PE->OFFD |= (0xE1800000);
00011e  4809              LDR      r0,|L2.324|
000120  30c0              ADDS     r0,r0,#0xc0
000122  6841              LDR      r1,[r0,#4]
000124  4a09              LDR      r2,|L2.332|
000126  4311              ORRS     r1,r1,r2
000128  6041              STR      r1,[r0,#4]
00012a  2000              MOVS     r0,#0
00012c  6028              STR      r0,[r5,#0]
;;;169    
;;;170        /* Lock protected registers */
;;;171        SYS_LockReg();
;;;172    
;;;173    }
00012e  bd70              POP      {r4-r6,pc}
;;;174    
                          ENDP

                  |L2.304|
                          DCD      0x50000100
                  |L2.308|
                          DCD      0x50000200
                  |L2.312|
                          DCD      0x77770000
                  |L2.316|
                          DCD      0x77777777
                  |L2.320|
                          DCD      0x77700007
                  |L2.324|
                          DCD      0x50004040
                  |L2.328|
                          DCD      0xf1ff0000
                  |L2.332|
                          DCD      0xe1800000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;174    
;;;175    void UART0_Init()
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177        /*---------------------------------------------------------------------------------------------------------*/
;;;178        /* Init UART                                                                                               */
;;;179        /*---------------------------------------------------------------------------------------------------------*/
;;;180        UART_Open(UART0, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L3.16|
000008  f7fffffe          BL       UART_Open
;;;181    }
00000c  bd10              POP      {r4,pc}
;;;182    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40050000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;188      */
;;;189    int32_t main(void)
000000  b08a              SUB      sp,sp,#0x28
;;;190    {
;;;191        S_RTC_TIME_DATA_T sCurTime;
;;;192    
;;;193        SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;194        UART0_Init();
000006  f7fffffe          BL       UART0_Init
;;;195    
;;;196        DEBUG_MSG("\nNANO130 NuTiny EVB Demo Program V1.0.0\n");
;;;197        DEBUG_MSG("[LCD Demo]\n");
;;;198    
;;;199        /* Time Setting */
;;;200        sCurTime.u32Year       = 2013;
00000a  482d              LDR      r0,|L4.192|
;;;201        sCurTime.u32Month      = 10;
00000c  9001              STR      r0,[sp,#4]
00000e  200a              MOVS     r0,#0xa
;;;202        sCurTime.u32Day        = 15;
000010  9002              STR      r0,[sp,#8]
000012  200f              MOVS     r0,#0xf
;;;203        sCurTime.u32Hour       = 0;
000014  9003              STR      r0,[sp,#0xc]
000016  2000              MOVS     r0,#0
;;;204        sCurTime.u32Minute     = 0;
000018  9005              STR      r0,[sp,#0x14]
;;;205        sCurTime.u32Second     = 0;
00001a  9006              STR      r0,[sp,#0x18]
;;;206        sCurTime.u32DayOfWeek  = RTC_TUESDAY;
00001c  9007              STR      r0,[sp,#0x1c]
00001e  2002              MOVS     r0,#2
;;;207        sCurTime.u32TimeScale  = RTC_CLOCK_24;
000020  2401              MOVS     r4,#1
;;;208    
;;;209        RTC_Open(&sCurTime);
000022  9004              STR      r0,[sp,#0x10]
000024  9408              STR      r4,[sp,#0x20]
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       RTC_Open
;;;210    
;;;211        DEBUG_MSG("RTC Init. complete!\n");
;;;212    
;;;213        /* Do LCD Initializaton */
;;;214        LCD_Open(LCD_C_TYPE, 4, LCD_BIAS_THIRD, LCD_FREQ_DIV64, LCD_CPVOl_3V);
00002c  2003              MOVS     r0,#3
00002e  0200              LSLS     r0,r0,#8
000030  2204              MOVS     r2,#4
000032  9000              STR      r0,[sp,#0]
000034  2310              MOVS     r3,#0x10
000036  4611              MOV      r1,r2
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       LCD_Open
00003e  4821              LDR      r0,|L4.196|
000040  6801              LDR      r1,[r0,#0]
000042  4321              ORRS     r1,r1,r4
000044  6001              STR      r1,[r0,#0]
;;;215        LCD_EnableDisplay();
;;;216    
;;;217        DEBUG_MSG("LCD Init. complete!\n");
;;;218    
;;;219        /* Start displaying on LCD */
;;;220        LCDLIB_SetSymbol(2, 27, 1);
000046  2201              MOVS     r2,#1
000048  211b              MOVS     r1,#0x1b
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       LCDLIB_SetSymbol
;;;221        CLK_SysTickDelay(335000);
000050  4c1d              LDR      r4,|L4.200|
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       CLK_SysTickDelay
;;;222    
;;;223        textticker("*** NUVOTON NANO130 ***", 335000);
000058  4621              MOV      r1,r4
00005a  a01c              ADR      r0,|L4.204|
00005c  f7fffffe          BL       textticker
;;;224        CLK_SysTickDelay(335000);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       CLK_SysTickDelay
;;;225    
;;;226        LCDLIB_Printf(0, "NUVOTON");
000066  a11f              ADR      r1,|L4.228|
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       LCDLIB_Printf
;;;227        LCD_EnableBlink(250);
00006e  20fa              MOVS     r0,#0xfa
000070  f7fffffe          BL       LCD_EnableBlink
;;;228        CLK_SysTickDelay(335000);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CLK_SysTickDelay
;;;229        CLK_SysTickDelay(335000);
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       CLK_SysTickDelay
;;;230        CLK_SysTickDelay(335000);
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       CLK_SysTickDelay
;;;231        CLK_SysTickDelay(335000);
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       CLK_SysTickDelay
;;;232        CLK_SysTickDelay(335000);
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       CLK_SysTickDelay
;;;233        LCD_DisableBlink();
000092  f7fffffe          BL       LCD_DisableBlink
;;;234    
;;;235        /* Read curent RTC time */
;;;236        RTC_GetDateAndTime(&sCurTime);
000096  a801              ADD      r0,sp,#4
000098  f7fffffe          BL       RTC_GetDateAndTime
;;;237        DEBUG_MSG("Current Time:%d/%02d/%02d %02d:%02d:%02d\n",sCurTime.u32Year,sCurTime.u32cMonth,sCurTime.u32cDay,sCurTime.u32cHour,sCurTime.u32cMinute,sCurTime.u32cSecond);
;;;238    
;;;239        /* Display RTC time */
;;;240        showTime(sCurTime.u32Hour, sCurTime.u32Minute);
00009c  9906              LDR      r1,[sp,#0x18]
00009e  9805              LDR      r0,[sp,#0x14]
0000a0  f7fffffe          BL       showTime
;;;241    
;;;242        /* Enable RTC alarm for 1 minute to update RTC time */
;;;243        planNextRTCInterrupt(&sCurTime);
0000a4  a801              ADD      r0,sp,#4
0000a6  f7fffffe          BL       planNextRTCInterrupt
;;;244    
;;;245    
;;;246        /* Enable RTC timer tick for 1 second to display ":" */
;;;247        RTC_SetTickPeriod(RTC_TICK_1_SEC);
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       RTC_SetTickPeriod
;;;248        RTC_EnableInt(RTC_RIER_TIER_Msk);
0000b0  2002              MOVS     r0,#2
0000b2  f7fffffe          BL       RTC_EnableInt
0000b6  490d              LDR      r1,|L4.236|
0000b8  0720              LSLS     r0,r4,#28
0000ba  6008              STR      r0,[r1,#0]
                  |L4.188|
;;;249        NVIC_EnableIRQ(RTC_IRQn);
;;;250    
;;;251        /* forever loop */
;;;252        while (1);
0000bc  e7fe              B        |L4.188|
;;;253    
;;;254    }
;;;255    
                          ENDP

0000be  0000              DCW      0x0000
                  |L4.192|
                          DCD      0x000007dd
                  |L4.196|
                          DCD      0x400b0000
                  |L4.200|
                          DCD      0x00051c98
                  |L4.204|
0000cc  2a2a2a20          DCB      "*** NUVOTON NANO130 ***",0
0000d0  4e55564f
0000d4  544f4e20
0000d8  4e414e4f
0000dc  31333020
0000e0  2a2a2a00
                  |L4.228|
0000e4  4e55564f          DCB      "NUVOTON",0
0000e8  544f4e00
                  |L4.236|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32RTC_Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_f0ffeae7____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_f0ffeae7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_f0ffeae7____REVSH|
#line 402
|__asm___6_main_c_f0ffeae7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
