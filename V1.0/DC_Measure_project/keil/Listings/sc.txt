; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\sc.crf ..\..\Library\StdDriver\src\sc.c]
                          THUMB

                          AREA ||i.SC_ClearFIFO||, CODE, READONLY, ALIGN=1

                  SC_ClearFIFO PROC
;;;62       */
;;;63     void SC_ClearFIFO(SC_T *sc)
000000  6881              LDR      r1,[r0,#8]
;;;64     {
;;;65         sc->ALTCTL |= (SC_ALTCTL_TX_RST_Msk | SC_ALTCTL_RX_RST_Msk);
000002  2203              MOVS     r2,#3
000004  4311              ORRS     r1,r1,r2
000006  6081              STR      r1,[r0,#8]
;;;66     }
000008  4770              BX       lr
;;;67     
                          ENDP


                          AREA ||i.SC_Close||, CODE, READONLY, ALIGN=1

                  SC_Close PROC
;;;72       */
;;;73     void SC_Close(SC_T *sc)
000000  2100              MOVS     r1,#0
;;;74     {
;;;75         sc->IER = 0;
000002  6181              STR      r1,[r0,#0x18]
;;;76         sc->PINCSR = 0;
000004  6241              STR      r1,[r0,#0x24]
;;;77         sc->ALTCTL = 0;
000006  6081              STR      r1,[r0,#8]
;;;78         sc->CTL = 0;
000008  6041              STR      r1,[r0,#4]
;;;79     }
00000a  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.SC_IsCardInserted||, CODE, READONLY, ALIGN=2

                  SC_IsCardInserted PROC
;;;39       */
;;;40     uint32_t SC_IsCardInserted(SC_T *sc)
000000  b510              PUSH     {r4,lr}
;;;41     {
;;;42         // put conditions into two variable to remove IAR compilation warning
;;;43         uint32_t cond1 = ((sc->PINCSR & SC_PINCSR_CD_PIN_ST_Msk) >> SC_PINCSR_CD_PIN_ST_Pos);
000002  6a41              LDR      r1,[r0,#0x24]
000004  06c9              LSLS     r1,r1,#27
000006  0fcb              LSRS     r3,r1,#31
;;;44         uint32_t cond2 = ((sc->PINCSR & SC_PINCSR_CD_LEV_Msk) >> SC_PINCSR_CD_LEV_Pos);
000008  6a41              LDR      r1,[r0,#0x24]
;;;45     
;;;46         if(sc == SC0 && u32CardStateIgnore[0] == 1)
00000a  4c0d              LDR      r4,|L3.64|
;;;47             return TRUE;
;;;48         else if(sc == SC1 && u32CardStateIgnore[1] == 1)
;;;49             return TRUE;
;;;50         else if(sc == SC2 && u32CardStateIgnore[2] == 1)
;;;51             return TRUE;
;;;52         else if(cond1 != cond2)
;;;53             return FALSE;
;;;54         else
;;;55             return TRUE;
;;;56     }
00000c  0549              LSLS     r1,r1,#21
00000e  0fca              LSRS     r2,r1,#31
000010  490c              LDR      r1,|L3.68|
000012  42a0              CMP      r0,r4                 ;46
000014  d102              BNE      |L3.28|
000016  680c              LDR      r4,[r1,#0]            ;46  ; u32CardStateIgnore
000018  2c01              CMP      r4,#1                 ;46
00001a  d00f              BEQ      |L3.60|
                  |L3.28|
00001c  4c0a              LDR      r4,|L3.72|
00001e  42a0              CMP      r0,r4                 ;48
000020  d102              BNE      |L3.40|
000022  684c              LDR      r4,[r1,#4]            ;48  ; u32CardStateIgnore
000024  2c01              CMP      r4,#1                 ;48
000026  d009              BEQ      |L3.60|
                  |L3.40|
000028  4c08              LDR      r4,|L3.76|
00002a  42a0              CMP      r0,r4                 ;50
00002c  d102              BNE      |L3.52|
00002e  6888              LDR      r0,[r1,#8]            ;50  ; u32CardStateIgnore
000030  2801              CMP      r0,#1                 ;50
000032  d002              BEQ      |L3.58|
                  |L3.52|
000034  4293              CMP      r3,r2                 ;52
000036  d001              BEQ      |L3.60|
000038  2000              MOVS     r0,#0                 ;53
                  |L3.58|
00003a  bd10              POP      {r4,pc}
                  |L3.60|
00003c  2001              MOVS     r0,#1                 ;55
00003e  bd10              POP      {r4,pc}
;;;57     
                          ENDP

                  |L3.64|
                          DCD      0x40190000
                  |L3.68|
                          DCD      ||.bss||
                  |L3.72|
                          DCD      0x401b0000
                  |L3.76|
                          DCD      0x401c0000

                          AREA ||i.SC_Open||, CODE, READONLY, ALIGN=2

                  SC_Open PROC
;;;92       */
;;;93     void SC_Open(SC_T *sc, uint32_t u32CD, uint32_t u32PWR)
000000  b5f0              PUSH     {r4-r7,lr}
;;;94     {
;;;95         uint32_t u32Reg = 0, u32Intf;
;;;96     
;;;97         if(sc == SC0)
000002  4b13              LDR      r3,|L4.80|
000004  2400              MOVS     r4,#0                 ;95
000006  4298              CMP      r0,r3
000008  d101              BNE      |L4.14|
;;;98             u32Intf = 0;
00000a  2300              MOVS     r3,#0
00000c  e005              B        |L4.26|
                  |L4.14|
;;;99         else if(sc == SC1)
00000e  4b11              LDR      r3,|L4.84|
000010  4298              CMP      r0,r3
000012  d101              BNE      |L4.24|
;;;100            u32Intf = 1;
000014  2301              MOVS     r3,#1
000016  e000              B        |L4.26|
                  |L4.24|
;;;101        else
;;;102            u32Intf = 2;
000018  2302              MOVS     r3,#2
                  |L4.26|
;;;103    
;;;104        if(u32CD != SC_PIN_STATE_IGNORE)
00001a  1c4f              ADDS     r7,r1,#1
;;;105        {
;;;106            u32Reg = u32CD ? 0: SC_PINCSR_CD_LEV_Msk;
;;;107            u32CardStateIgnore[u32Intf] = 0;
00001c  4e0e              LDR      r6,|L4.88|
00001e  2501              MOVS     r5,#1                 ;100
000020  2f00              CMP      r7,#0                 ;104
000022  d009              BEQ      |L4.56|
000024  2900              CMP      r1,#0                 ;106
000026  d001              BEQ      |L4.44|
000028  2400              MOVS     r4,#0                 ;106
00002a  e001              B        |L4.48|
                  |L4.44|
00002c  2401              MOVS     r4,#1                 ;106
00002e  02a4              LSLS     r4,r4,#10             ;106
                  |L4.48|
000030  2100              MOVS     r1,#0
000032  009b              LSLS     r3,r3,#2
000034  50f1              STR      r1,[r6,r3]
000036  e001              B        |L4.60|
                  |L4.56|
;;;108        }
;;;109        else
;;;110        {
;;;111            u32CardStateIgnore[u32Intf] = 1;
000038  0099              LSLS     r1,r3,#2
00003a  5075              STR      r5,[r6,r1]
                  |L4.60|
;;;112        }
;;;113        u32Reg |= u32PWR ? 0 : SC_PINCSR_POW_INV_Msk;
00003c  2a00              CMP      r2,#0
00003e  d001              BEQ      |L4.68|
000040  2100              MOVS     r1,#0
000042  e001              B        |L4.72|
                  |L4.68|
000044  2101              MOVS     r1,#1
000046  02c9              LSLS     r1,r1,#11
                  |L4.72|
000048  4321              ORRS     r1,r1,r4
;;;114        sc->PINCSR = u32Reg;
00004a  6241              STR      r1,[r0,#0x24]
;;;115        sc->CTL = SC_CTL_SC_CEN_Msk;
00004c  6045              STR      r5,[r0,#4]
;;;116    }
00004e  bdf0              POP      {r4-r7,pc}
;;;117    
                          ENDP

                  |L4.80|
                          DCD      0x40190000
                  |L4.84|
                          DCD      0x401b0000
                  |L4.88|
                          DCD      ||.bss||

                          AREA ||i.SC_ResetReader||, CODE, READONLY, ALIGN=2

                  SC_ResetReader PROC
;;;122      */
;;;123    void SC_ResetReader(SC_T *sc)
000000  4916              LDR      r1,|L5.92|
;;;124    {
;;;125        uint32_t u32Intf;
;;;126    
;;;127        if(sc == SC0)
000002  4288              CMP      r0,r1
000004  d101              BNE      |L5.10|
;;;128            u32Intf = 0;
000006  2100              MOVS     r1,#0
000008  e005              B        |L5.22|
                  |L5.10|
;;;129        else if(sc == SC1)
00000a  4915              LDR      r1,|L5.96|
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L5.20|
;;;130            u32Intf = 1;
000010  2101              MOVS     r1,#1
000012  e000              B        |L5.22|
                  |L5.20|
;;;131        else
;;;132            u32Intf = 2;
000014  2102              MOVS     r1,#2
                  |L5.22|
;;;133    
;;;134        // Reset FIFO
;;;135        sc->ALTCTL |= (SC_ALTCTL_TX_RST_Msk | SC_ALTCTL_RX_RST_Msk);
000016  6882              LDR      r2,[r0,#8]
000018  2303              MOVS     r3,#3
00001a  431a              ORRS     r2,r2,r3
00001c  6082              STR      r2,[r0,#8]
;;;136        // Set Rx trigger level to 1 character, longest card detect debounce period, disable error retry (EMV ATR does not use error retry)
;;;137        sc->CTL &= ~(SC_CTL_RX_FTRI_LEV_Msk |
00001e  6842              LDR      r2,[r0,#4]
000020  4b10              LDR      r3,|L5.100|
000022  401a              ANDS     r2,r2,r3
000024  6042              STR      r2,[r0,#4]
;;;138                     SC_CTL_CD_DEB_SEL_Msk |
;;;139                     SC_CTL_TX_ERETRY_Msk |
;;;140                     SC_CTL_TX_ERETRY_EN_Msk |
;;;141                     SC_CTL_RX_ERETRY_Msk |
;;;142                     SC_CTL_RX_ERETRY_EN_Msk);
;;;143        // Enable auto convention, and all three smartcard internal timers
;;;144        sc->CTL |= SC_CTL_AUTO_CON_EN_Msk | SC_CTL_TMR_SEL_Msk;
000026  6842              LDR      r2,[r0,#4]
000028  4b0f              LDR      r3,|L5.104|
00002a  431a              ORRS     r2,r2,r3
00002c  6042              STR      r2,[r0,#4]
;;;145        // Disable Rx timeout
;;;146        sc->RFTMR = 0;
00002e  2200              MOVS     r2,#0
000030  6102              STR      r2,[r0,#0x10]
;;;147        // 372 clocks per ETU by default
;;;148        sc->ETUCR = 371;
000032  22ff              MOVS     r2,#0xff
000034  3274              ADDS     r2,r2,#0x74
000036  6142              STR      r2,[r0,#0x14]
;;;149        // Enable auto de-activation while card removal
;;;150        sc->PINCSR = (sc->PINCSR & ~SC_PINCSR_POW_EN_Msk) | SC_PINCSR_ADAC_CD_EN_Msk;
000038  6a42              LDR      r2,[r0,#0x24]
00003a  2380              MOVS     r3,#0x80
00003c  0852              LSRS     r2,r2,#1
00003e  0052              LSLS     r2,r2,#1
000040  431a              ORRS     r2,r2,r3
000042  6242              STR      r2,[r0,#0x24]
;;;151    
;;;152        /* Enable necessary interrupt for smartcard operation */
;;;153        if(u32CardStateIgnore[u32Intf]) // Do not enable card detect interrupt if card present state ignore
000044  4a09              LDR      r2,|L5.108|
000046  0089              LSLS     r1,r1,#2
000048  5851              LDR      r1,[r2,r1]
00004a  2900              CMP      r1,#0
00004c  d001              BEQ      |L5.82|
;;;154            sc->IER = (SC_IER_RDA_IE_Msk |
00004e  4908              LDR      r1,|L5.112|
000050  e001              B        |L5.86|
                  |L5.82|
;;;155                       SC_IER_TERR_IE_Msk |
;;;156                       SC_IER_TMR0_IE_Msk |
;;;157                       SC_IER_TMR1_IE_Msk |
;;;158                       SC_IER_TMR2_IE_Msk |
;;;159                       SC_IER_BGT_IE_Msk |
;;;160                       SC_IER_ACON_ERR_IE_Msk);
;;;161        else
;;;162            sc->IER = (SC_IER_RDA_IE_Msk |
000052  4907              LDR      r1,|L5.112|
000054  3180              ADDS     r1,r1,#0x80
                  |L5.86|
000056  6181              STR      r1,[r0,#0x18]         ;154
;;;163                       SC_IER_TERR_IE_Msk |
;;;164                       SC_IER_TMR0_IE_Msk |
;;;165                       SC_IER_TMR1_IE_Msk |
;;;166                       SC_IER_TMR2_IE_Msk |
;;;167                       SC_IER_BGT_IE_Msk |
;;;168                       SC_IER_CD_IE_Msk |
;;;169                       SC_IER_ACON_ERR_IE_Msk);
;;;170    
;;;171        return;
;;;172    }
000058  4770              BX       lr
;;;173    
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      0x40190000
                  |L5.96|
                          DCD      0x401b0000
                  |L5.100|
                          DCD      0xfc00ff3f
                  |L5.104|
                          DCD      0x00006008
                  |L5.108|
                          DCD      ||.bss||
                  |L5.112|
                          DCD      0x0000047d

                          AREA ||i.SC_SetBlockGuardTime||, CODE, READONLY, ALIGN=1

                  SC_SetBlockGuardTime PROC
;;;179      */
;;;180    void SC_SetBlockGuardTime(SC_T *sc, uint32_t u32BGT)
000000  6842              LDR      r2,[r0,#4]
;;;181    {
;;;182        sc->CTL = (sc->CTL & ~SC_CTL_BGT_Msk) | ((u32BGT - 1) << SC_CTL_BGT_Pos);
000002  231f              MOVS     r3,#0x1f
000004  021b              LSLS     r3,r3,#8
000006  0209              LSLS     r1,r1,#8
000008  39ff              SUBS     r1,r1,#0xff
00000a  439a              BICS     r2,r2,r3
00000c  3901              SUBS     r1,#1
00000e  430a              ORRS     r2,r2,r1
000010  6042              STR      r2,[r0,#4]
;;;183    }
000012  4770              BX       lr
;;;184    
                          ENDP


                          AREA ||i.SC_SetCharGuardTime||, CODE, READONLY, ALIGN=1

                  SC_SetCharGuardTime PROC
;;;190      */
;;;191    void SC_SetCharGuardTime(SC_T *sc, uint32_t u32CGT)
000000  6842              LDR      r2,[r0,#4]
;;;192    {
;;;193        u32CGT -= sc->CTL & SC_CTL_SLEN_Msk ? 11: 12;
000002  0412              LSLS     r2,r2,#16
000004  d501              BPL      |L7.10|
000006  220b              MOVS     r2,#0xb
000008  e000              B        |L7.12|
                  |L7.10|
00000a  220c              MOVS     r2,#0xc
                  |L7.12|
00000c  1a89              SUBS     r1,r1,r2
;;;194        sc->EGTR = u32CGT;
00000e  60c1              STR      r1,[r0,#0xc]
;;;195    }
000010  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i.SC_StartTimer||, CODE, READONLY, ALIGN=1

                  SC_StartTimer PROC
;;;228      */
;;;229    void SC_StartTimer(SC_T *sc, uint32_t u32TimerNum, uint32_t u32Mode, uint32_t u32ETUCount)
000000  1e5b              SUBS     r3,r3,#1
;;;230    {
;;;231        uint32_t reg = u32Mode | (SC_TMR0_CNT_Msk & (u32ETUCount - 1));
000002  021b              LSLS     r3,r3,#8
000004  0a1b              LSRS     r3,r3,#8
000006  4313              ORRS     r3,r3,r2
;;;232    
;;;233        if(u32TimerNum == 0)
000008  2900              CMP      r1,#0
00000a  d007              BEQ      |L8.28|
;;;234        {
;;;235            sc->TMR0 = reg;
;;;236            sc->ALTCTL |= SC_ALTCTL_TMR0_SEN_Msk;
;;;237        }
;;;238        else if(u32TimerNum == 1)
00000c  2901              CMP      r1,#1
00000e  d009              BEQ      |L8.36|
;;;239        {
;;;240            sc->TMR1 = reg;
;;;241            sc->ALTCTL |= SC_ALTCTL_TMR1_SEN_Msk;
;;;242        }
;;;243        else       // timer 2
;;;244        {
;;;245            sc->TMR2 = reg;
000010  6303              STR      r3,[r0,#0x30]
;;;246            sc->ALTCTL |= SC_ALTCTL_TMR2_SEN_Msk;
000012  6881              LDR      r1,[r0,#8]
000014  2280              MOVS     r2,#0x80
                  |L8.22|
000016  4311              ORRS     r1,r1,r2              ;236
000018  6081              STR      r1,[r0,#8]            ;236
;;;247        }
;;;248    }
00001a  4770              BX       lr
                  |L8.28|
00001c  6283              STR      r3,[r0,#0x28]         ;235
00001e  6881              LDR      r1,[r0,#8]            ;236
000020  2220              MOVS     r2,#0x20              ;236
000022  e7f8              B        |L8.22|
                  |L8.36|
000024  62c3              STR      r3,[r0,#0x2c]         ;240
000026  6881              LDR      r1,[r0,#8]            ;241
000028  2240              MOVS     r2,#0x40              ;241
00002a  e7f4              B        |L8.22|
;;;249    
                          ENDP


                          AREA ||i.SC_StopAllTimer||, CODE, READONLY, ALIGN=1

                  SC_StopAllTimer PROC
;;;202      */
;;;203    void SC_StopAllTimer(SC_T *sc)
000000  6881              LDR      r1,[r0,#8]
;;;204    {
;;;205        sc->ALTCTL &= ~(SC_ALTCTL_TMR0_SEN_Msk | SC_ALTCTL_TMR1_SEN_Msk | SC_ALTCTL_TMR2_SEN_Msk);
000002  22e0              MOVS     r2,#0xe0
000004  4391              BICS     r1,r1,r2
000006  6081              STR      r1,[r0,#8]
;;;206    }
000008  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.SC_StopTimer||, CODE, READONLY, ALIGN=1

                  SC_StopTimer PROC
;;;256      */
;;;257    void SC_StopTimer(SC_T *sc, uint32_t u32TimerNum)
000000  2900              CMP      r1,#0
;;;258    {
000002  d006              BEQ      |L10.18|
;;;259        if(u32TimerNum == 0)
;;;260            sc->ALTCTL &= ~SC_ALTCTL_TMR0_SEN_Msk;
;;;261        else if(u32TimerNum == 1)
000004  2901              CMP      r1,#1
;;;262            sc->ALTCTL &= ~SC_ALTCTL_TMR1_SEN_Msk;
;;;263        else    // timer 2
;;;264            sc->ALTCTL &= ~SC_ALTCTL_TMR2_SEN_Msk;
000006  6881              LDR      r1,[r0,#8]
000008  d006              BEQ      |L10.24|
00000a  2280              MOVS     r2,#0x80
                  |L10.12|
00000c  4391              BICS     r1,r1,r2              ;260
00000e  6081              STR      r1,[r0,#8]            ;260
;;;265    }
000010  4770              BX       lr
                  |L10.18|
000012  6881              LDR      r1,[r0,#8]            ;260
000014  2220              MOVS     r2,#0x20              ;260
000016  e7f9              B        |L10.12|
                  |L10.24|
000018  2240              MOVS     r2,#0x40              ;262
00001a  e7f7              B        |L10.12|
;;;266    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  u32CardStateIgnore
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\sc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___4_sc_c_3124790d____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___4_sc_c_3124790d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___4_sc_c_3124790d____REVSH|
#line 402
|__asm___4_sc_c_3124790d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
