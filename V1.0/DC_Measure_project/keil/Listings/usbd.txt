; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\usbd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usbd.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\usbd.crf ..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;483     */
;;;484    void USBD_CtrlIn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
;;;486        if(g_usbd_CtrlInSize)
000002  4c1e              LDR      r4,|L1.124|
000004  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlInSize
000006  2600              MOVS     r6,#0
;;;487        {
;;;488            // Process remained data
;;;489            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
;;;490            {
;;;491                // Data size > MXPLD
;;;492                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
000008  4d1d              LDR      r5,|L1.128|
00000a  2800              CMP      r0,#0                 ;486
00000c  d01f              BEQ      |L1.78|
00000e  68a0              LDR      r0,[r4,#8]            ;489  ; g_usbd_CtrlInSize
000010  69e3              LDR      r3,[r4,#0x1c]         ;489  ; g_usbd_CtrlMaxPktSize
000012  4621              MOV      r1,r4                 ;486
000014  4298              CMP      r0,r3                 ;489
000016  4a1b              LDR      r2,|L1.132|
000018  6849              LDR      r1,[r1,#4]
;;;493                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
;;;494                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;495                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;496            }
;;;497            else
;;;498            {
;;;499                // Data size <= MXPLD
;;;500                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
00001a  6a28              LDR      r0,[r5,#0x20]
00001c  d90e              BLS      |L1.60|
00001e  1880              ADDS     r0,r0,r2              ;492
000020  69e2              LDR      r2,[r4,#0x1c]         ;492  ; g_usbd_CtrlMaxPktSize
000022  f7fffffe          BL       USBD_MemCopy
000026  69e0              LDR      r0,[r4,#0x1c]         ;493  ; g_usbd_CtrlMaxPktSize
000028  6268              STR      r0,[r5,#0x24]         ;493
00002a  69e1              LDR      r1,[r4,#0x1c]         ;494  ; g_usbd_CtrlMaxPktSize
00002c  6860              LDR      r0,[r4,#4]            ;494  ; g_usbd_CtrlInPointer
00002e  1840              ADDS     r0,r0,r1              ;494
000030  6060              STR      r0,[r4,#4]            ;495  ; g_usbd_CtrlInPointer
000032  68a0              LDR      r0,[r4,#8]            ;495  ; g_usbd_CtrlInSize
000034  69e1              LDR      r1,[r4,#0x1c]         ;495  ; g_usbd_CtrlMaxPktSize
000036  1a40              SUBS     r0,r0,r1              ;495
000038  60a0              STR      r0,[r4,#8]            ;495  ; g_usbd_CtrlInSize
;;;501                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
;;;502                g_usbd_CtrlInPointer = 0;
;;;503                g_usbd_CtrlInSize = 0;
;;;504            }
;;;505        }
;;;506        else
;;;507        {
;;;508            // In ACK for Set address
;;;509            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;510            {
;;;511                if((USBD_GET_ADDR() != g_usbd_UsbAddr) && (USBD_GET_ADDR() == 0))
;;;512                {
;;;513                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;514                }
;;;515            }
;;;516    
;;;517            /* For the case of data size is integral times maximum packet size */
;;;518            if(g_usbd_CtrlInZeroFlag)
;;;519            {
;;;520                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;521                g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
;;;522            }
;;;523        }
;;;524    }
00003a  bd70              POP      {r4-r6,pc}
                  |L1.60|
00003c  1880              ADDS     r0,r0,r2              ;500
00003e  68a2              LDR      r2,[r4,#8]            ;500  ; g_usbd_CtrlInSize
000040  f7fffffe          BL       USBD_MemCopy
000044  68a0              LDR      r0,[r4,#8]            ;501  ; g_usbd_CtrlInSize
000046  6268              STR      r0,[r5,#0x24]         ;501
000048  6066              STR      r6,[r4,#4]            ;503  ; g_usbd_CtrlInPointer
00004a  60a6              STR      r6,[r4,#8]            ;503  ; g_usbd_CtrlInSize
                  |L1.76|
00004c  bd70              POP      {r4-r6,pc}
                  |L1.78|
00004e  480b              LDR      r0,|L1.124|
000050  3044              ADDS     r0,r0,#0x44           ;509
000052  7801              LDRB     r1,[r0,#0]            ;509  ; g_usbd_SetupPacket
000054  2900              CMP      r1,#0                 ;509
000056  d10b              BNE      |L1.112|
000058  7840              LDRB     r0,[r0,#1]            ;509  ; g_usbd_SetupPacket
00005a  2805              CMP      r0,#5                 ;509
00005c  d108              BNE      |L1.112|
00005e  6928              LDR      r0,[r5,#0x10]         ;511
000060  69a1              LDR      r1,[r4,#0x18]         ;511  ; g_usbd_UsbAddr
000062  4288              CMP      r0,r1                 ;511
000064  d004              BEQ      |L1.112|
000066  6928              LDR      r0,[r5,#0x10]         ;511
000068  2800              CMP      r0,#0                 ;511
00006a  d101              BNE      |L1.112|
00006c  69a0              LDR      r0,[r4,#0x18]         ;513  ; g_usbd_UsbAddr
00006e  6128              STR      r0,[r5,#0x10]         ;513
                  |L1.112|
000070  7860              LDRB     r0,[r4,#1]            ;518  ; g_usbd_CtrlInZeroFlag
000072  2800              CMP      r0,#0                 ;518
000074  d0ea              BEQ      |L1.76|
000076  626e              STR      r6,[r5,#0x24]         ;520
000078  7066              STRB     r6,[r4,#1]            ;521
00007a  bd70              POP      {r4-r6,pc}
;;;525    
                          ENDP

                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      0x40060000
                  |L1.132|
                          DCD      0x40060100

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;552     */
;;;553    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;554    {
;;;555        uint32_t u32Size;
;;;556    
;;;557        if (g_usbd_CtrlOutToggle != (USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk))
000002  4811              LDR      r0,|L2.72|
000004  6942              LDR      r2,[r0,#0x14]
000006  4c11              LDR      r4,|L2.76|
000008  210f              MOVS     r1,#0xf
00000a  0309              LSLS     r1,r1,#12
00000c  6a63              LDR      r3,[r4,#0x24]  ; g_usbd_CtrlOutToggle
00000e  400a              ANDS     r2,r2,r1
000010  429a              CMP      r2,r3
000012  d015              BEQ      |L2.64|
;;;558        {
;;;559            g_usbd_CtrlOutToggle = USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk;
000014  6942              LDR      r2,[r0,#0x14]
000016  400a              ANDS     r2,r2,r1
000018  6262              STR      r2,[r4,#0x24]  ; g_usbd_CtrlOutToggle
;;;560            if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
00001a  6921              LDR      r1,[r4,#0x10]  ; g_usbd_CtrlOutSize
00001c  6962              LDR      r2,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
00001e  4291              CMP      r1,r2
000020  d20d              BCS      |L2.62|
;;;561            {
;;;562                u32Size = USBD_GET_PAYLOAD_LEN(EP1);
000022  6b45              LDR      r5,[r0,#0x34]
;;;563                USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1), u32Size);
000024  6b00              LDR      r0,[r0,#0x30]
000026  490a              LDR      r1,|L2.80|
000028  462a              MOV      r2,r5
00002a  1841              ADDS     r1,r0,r1
00002c  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
00002e  f7fffffe          BL       USBD_MemCopy
;;;564                g_usbd_CtrlOutPointer += u32Size;
000032  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000034  1940              ADDS     r0,r0,r5
;;;565                g_usbd_CtrlOutSize += u32Size;
000036  60e0              STR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000038  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
00003a  1940              ADDS     r0,r0,r5
00003c  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
                  |L2.62|
;;;566            }
;;;567        }
;;;568        else
;;;569        {
;;;570            USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
;;;571        }
;;;572    }
00003e  bd70              POP      {r4-r6,pc}
                  |L2.64|
000040  69e1              LDR      r1,[r4,#0x1c]         ;570  ; g_usbd_CtrlMaxPktSize
000042  6341              STR      r1,[r0,#0x34]         ;570
000044  bd70              POP      {r4-r6,pc}
;;;573    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      0x40060000
                  |L2.76|
                          DCD      ||.data||
                  |L2.80|
                          DCD      0x40060100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;157     */
;;;158    void USBD_GetDescriptor(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;159    {
;;;160        uint32_t u32Len;
;;;161    
;;;162        g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
000002  483b              LDR      r0,|L3.240|
000004  2100              MOVS     r1,#0
000006  7041              STRB     r1,[r0,#1]
;;;163        u32Len = 0;
;;;164        u32Len = g_usbd_SetupPacket[7];
000008  4606              MOV      r6,r0
00000a  3644              ADDS     r6,r6,#0x44
00000c  79f1              LDRB     r1,[r6,#7]  ; g_usbd_SetupPacket
;;;165        u32Len <<= 8;
;;;166        u32Len += g_usbd_SetupPacket[6];
00000e  79b2              LDRB     r2,[r6,#6]  ; g_usbd_SetupPacket
000010  0209              LSLS     r1,r1,#8              ;165
000012  1854              ADDS     r4,r2,r1
;;;167    
;;;168        switch (g_usbd_SetupPacket[3])
;;;169        {
;;;170        // Get Device Descriptor
;;;171        case DESC_DEVICE:
;;;172        {
;;;173            u32Len = Minimum(u32Len, LEN_DEVICE);
;;;174            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
;;;175            USBD_PrepareCtrlOut(0,0);
;;;176            break;
;;;177        }
;;;178        // Get Configuration Descriptor
;;;179        case DESC_CONFIG:
;;;180        {
;;;181            uint32_t u32TotalLen;
;;;182    
;;;183            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
;;;184            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;185    
;;;186            if (u32Len > u32TotalLen)
;;;187            {
;;;188                u32Len = u32TotalLen;
;;;189                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;190                {
;;;191                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;192                }
;;;193            }
;;;194            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;195            USBD_PrepareCtrlOut(0,0);
;;;196            break;
;;;197        }
;;;198        // Get HID Descriptor
;;;199        case DESC_HID:
;;;200        {
;;;201            /* CV3.0 HID Class Descriptor Test,
;;;202               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;203            uint32_t u32ConfigDescOffset;   // u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index)
;;;204            u32Len = Minimum(u32Len, LEN_HID);
;;;205            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
;;;206            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
;;;207            USBD_PrepareCtrlOut(0,0);
;;;208            break;
;;;209        }
;;;210        // Get Report Descriptor
;;;211        case DESC_HID_RPT:
;;;212        {
;;;213            if (u32Len > g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]])
;;;214            {
;;;215                u32Len = g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]];
;;;216                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;217                {
;;;218                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;219                }
;;;220            }
;;;221            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
;;;222            USBD_PrepareCtrlOut(0,0);
;;;223            break;
;;;224        }
;;;225        // Get String Descriptor
;;;226        case DESC_STRING:
;;;227        {
;;;228            // Get String Descriptor
;;;229            if(g_usbd_SetupPacket[2] < 4)
;;;230            {
;;;231                if (u32Len > g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0])
;;;232                {
;;;233                    u32Len = g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0];
;;;234                    if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;235                    {
;;;236                        g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;237                    }
;;;238                }
;;;239                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
;;;240                USBD_PrepareCtrlOut(0, 0);
;;;241            }
;;;242            else
;;;243            {
;;;244                // Not support. Reply STALL.
;;;245                USBD_SET_EP_STALL(EP0);
000014  4a37              LDR      r2,|L3.244|
000016  78f1              LDRB     r1,[r6,#3]            ;168  ; g_usbd_SetupPacket
000018  4605              MOV      r5,r0                 ;162
00001a  2701              MOVS     r7,#1                 ;191
00001c  1553              ASRS     r3,r2,#21
00001e  6c2d              LDR      r5,[r5,#0x40]         ;174
000020  2903              CMP      r1,#3                 ;168
000022  d048              BEQ      |L3.182|
000024  dc04              BGT      |L3.48|
000026  2901              CMP      r1,#1                 ;168
000028  d00b              BEQ      |L3.66|
00002a  2902              CMP      r1,#2                 ;168
00002c  d158              BNE      |L3.224|
00002e  e00e              B        |L3.78|
                  |L3.48|
000030  4e2f              LDR      r6,|L3.240|
000032  3644              ADDS     r6,r6,#0x44           ;164
000034  7936              LDRB     r6,[r6,#4]            ;205
000036  00b6              LSLS     r6,r6,#2              ;205
000038  2921              CMP      r1,#0x21              ;168
00003a  d01b              BEQ      |L3.116|
00003c  2922              CMP      r1,#0x22              ;168
00003e  d14f              BNE      |L3.224|
000040  e021              B        |L3.134|
                  |L3.66|
000042  2c12              CMP      r4,#0x12              ;173
000044  d300              BCC      |L3.72|
000046  2412              MOVS     r4,#0x12              ;173
                  |L3.72|
000048  4621              MOV      r1,r4                 ;173
00004a  6828              LDR      r0,[r5,#0]            ;176
00004c  e02c              B        |L3.168|
                  |L3.78|
00004e  686d              LDR      r5,[r5,#4]            ;183
000050  78e9              LDRB     r1,[r5,#3]            ;183
000052  78aa              LDRB     r2,[r5,#2]            ;184
000054  0209              LSLS     r1,r1,#8              ;184
000056  1851              ADDS     r1,r2,r1              ;184
000058  428c              CMP      r4,r1                 ;186
00005a  d908              BLS      |L3.110|
00005c  460c              MOV      r4,r1                 ;188
00005e  69c1              LDR      r1,[r0,#0x1c]         ;189  ; g_usbd_CtrlMaxPktSize
000060  4606              MOV      r6,r0                 ;189
000062  4620              MOV      r0,r4                 ;189
000064  f7fffffe          BL       __aeabi_uidivmod
000068  2900              CMP      r1,#0                 ;189
00006a  d100              BNE      |L3.110|
00006c  7077              STRB     r7,[r6,#1]            ;191
                  |L3.110|
00006e  4621              MOV      r1,r4                 ;194
000070  4628              MOV      r0,r5                 ;194
000072  e019              B        |L3.168|
                  |L3.116|
000074  2c09              CMP      r4,#9                 ;204
000076  d300              BCC      |L3.122|
000078  2409              MOVS     r4,#9                 ;204
                  |L3.122|
00007a  6968              LDR      r0,[r5,#0x14]         ;205
00007c  686a              LDR      r2,[r5,#4]            ;206
00007e  5980              LDR      r0,[r0,r6]            ;205
000080  4621              MOV      r1,r4                 ;204
000082  1810              ADDS     r0,r2,r0              ;206
000084  e010              B        |L3.168|
                  |L3.134|
000086  6929              LDR      r1,[r5,#0x10]         ;213
000088  5989              LDR      r1,[r1,r6]            ;213
00008a  42a1              CMP      r1,r4                 ;213
00008c  d209              BCS      |L3.162|
00008e  4818              LDR      r0,|L3.240|
000090  460c              MOV      r4,r1                 ;215
000092  69c1              LDR      r1,[r0,#0x1c]         ;216  ; g_usbd_CtrlMaxPktSize
000094  4620              MOV      r0,r4                 ;216
000096  f7fffffe          BL       __aeabi_uidivmod
00009a  2900              CMP      r1,#0                 ;216
00009c  d101              BNE      |L3.162|
00009e  4814              LDR      r0,|L3.240|
0000a0  7047              STRB     r7,[r0,#1]            ;218
                  |L3.162|
0000a2  68e8              LDR      r0,[r5,#0xc]          ;221
0000a4  4621              MOV      r1,r4                 ;221
0000a6  5980              LDR      r0,[r0,r6]            ;221
                  |L3.168|
0000a8  f7fffffe          BL       USBD_PrepareCtrlIn
0000ac  2100              MOVS     r1,#0                 ;222
0000ae  4608              MOV      r0,r1                 ;222
0000b0  f7fffffe          BL       USBD_PrepareCtrlOut
;;;246                USBD_SET_EP_STALL(EP1);
;;;247            }
;;;248            break;
;;;249        }
;;;250        default:
;;;251            // Not support. Reply STALL.
;;;252            USBD_SET_EP_STALL(EP0);
;;;253            USBD_SET_EP_STALL(EP1);
;;;254            break;
;;;255        }
;;;256    }
0000b4  bdf8              POP      {r3-r7,pc}
                  |L3.182|
0000b6  78b1              LDRB     r1,[r6,#2]            ;229  ; g_usbd_SetupPacket
0000b8  2904              CMP      r1,#4                 ;229
0000ba  d211              BCS      |L3.224|
0000bc  68aa              LDR      r2,[r5,#8]            ;231
0000be  0089              LSLS     r1,r1,#2              ;231
0000c0  5856              LDR      r6,[r2,r1]            ;231
0000c2  7831              LDRB     r1,[r6,#0]            ;231
0000c4  42a1              CMP      r1,r4                 ;231
0000c6  d208              BCS      |L3.218|
0000c8  460c              MOV      r4,r1                 ;233
0000ca  69c1              LDR      r1,[r0,#0x1c]         ;234  ; g_usbd_CtrlMaxPktSize
0000cc  4605              MOV      r5,r0                 ;233
0000ce  4620              MOV      r0,r4                 ;234
0000d0  f7fffffe          BL       __aeabi_uidivmod
0000d4  2900              CMP      r1,#0                 ;234
0000d6  d100              BNE      |L3.218|
0000d8  706f              STRB     r7,[r5,#1]            ;236
                  |L3.218|
0000da  4621              MOV      r1,r4                 ;239
0000dc  4630              MOV      r0,r6                 ;239
0000de  e7e3              B        |L3.168|
                  |L3.224|
0000e0  6a90              LDR      r0,[r2,#0x28]         ;252
0000e2  4318              ORRS     r0,r0,r3              ;252
0000e4  6290              STR      r0,[r2,#0x28]         ;252
0000e6  6b90              LDR      r0,[r2,#0x38]         ;253
0000e8  4318              ORRS     r0,r0,r3              ;253
0000ea  6390              STR      r0,[r2,#0x38]         ;253
0000ec  bdf8              POP      {r3-r7,pc}
;;;257    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      ||.data||
                  |L3.244|
                          DCD      0x40060000

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;95      */
;;;96     void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98         USBD_MemCopy(buf, g_usbd_SetupPacket, 8);
000002  2208              MOVS     r2,#8
000004  4901              LDR      r1,|L4.12|
000006  f7fffffe          BL       USBD_MemCopy
;;;99     }
00000a  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  |L4.12|
                          DCD      ||.data||+0x44

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;630    
;;;631    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;632    {
;;;633        g_u32EpStallLock = u32EpBitmap;
000002  63c8              STR      r0,[r1,#0x3c]  ; g_u32EpStallLock
;;;634    }
000004  4770              BX       lr
;;;635    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;393      */
;;;394    static __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
000000  e003              B        |L6.10|
                  |L6.2|
;;;395    {
;;;396        while (size--) *dest++ = *src++;
000002  780b              LDRB     r3,[r1,#0]
000004  7003              STRB     r3,[r0,#0]
000006  1c40              ADDS     r0,r0,#1
000008  1c49              ADDS     r1,r1,#1
                  |L6.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L6.2|
;;;397    }
00000e  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;53       */
;;;54     void USBD_Open(S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b0a              LDR      r3,|L7.44|
;;;55     {
;;;56         g_usbd_sInfo = param;
;;;57         g_usbd_pfnClassRequest = pfnClassReq;
;;;58         g_usbd_pfnSetInterface = pfnSetInterface;
;;;59     
;;;60         /* get EP0 maximum packet size */
;;;61         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000002  635a              STR      r2,[r3,#0x34]  ; g_usbd_pfnSetInterface
000004  6319              STR      r1,[r3,#0x30]  ; g_usbd_pfnClassRequest
000006  6418              STR      r0,[r3,#0x40]  ; g_usbd_sInfo
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  61d8              STR      r0,[r3,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;62     
;;;63         /* Initial USB engine */
;;;64         USBD->CTL = 0x29f;
00000e  4809              LDR      r0,|L7.52|
000010  4907              LDR      r1,|L7.48|
000012  6001              STR      r1,[r0,#0]
;;;65         USBD->PDMA |= USBD_PDMA_BYTEM_Msk;
000014  4907              LDR      r1,|L7.52|
000016  3180              ADDS     r1,r1,#0x80
000018  6a4a              LDR      r2,[r1,#0x24]
00001a  2304              MOVS     r3,#4
00001c  431a              ORRS     r2,r2,r3
00001e  624a              STR      r2,[r1,#0x24]
;;;66         /* Force SE0, and then clear it to connect*/
;;;67         USBD_SET_SE0();
000020  6801              LDR      r1,[r0,#0]
000022  2210              MOVS     r2,#0x10
000024  4311              ORRS     r1,r1,r2
000026  6001              STR      r1,[r0,#0]
;;;68     }
000028  4770              BX       lr
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.data||
                  |L7.48|
                          DCD      0x0000029f
                  |L7.52|
                          DCD      0x40060000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;452     */
;;;453    void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;454    {
;;;455        if(u32Size > g_usbd_CtrlMaxPktSize)
000002  4c15              LDR      r4,|L8.88|
000004  460d              MOV      r5,r1                 ;454
000006  69e3              LDR      r3,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;456        {
;;;457            // Data size > MXPLD
;;;458            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
;;;459            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
;;;460            USBD_SET_DATA1(EP0);
000008  4e14              LDR      r6,|L8.92|
00000a  2180              MOVS     r1,#0x80
;;;461            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, g_usbd_CtrlMaxPktSize);
00000c  4a14              LDR      r2,|L8.96|
00000e  429d              CMP      r5,r3                 ;455
000010  d912              BLS      |L8.56|
000012  69e3              LDR      r3,[r4,#0x1c]         ;458  ; g_usbd_CtrlMaxPktSize
000014  18c3              ADDS     r3,r0,r3              ;458
000016  6063              STR      r3,[r4,#4]            ;459  ; g_usbd_CtrlInPointer
000018  69e3              LDR      r3,[r4,#0x1c]         ;459  ; g_usbd_CtrlMaxPktSize
00001a  1aeb              SUBS     r3,r5,r3              ;459
00001c  60a3              STR      r3,[r4,#8]            ;459  ; g_usbd_CtrlInSize
00001e  6ab3              LDR      r3,[r6,#0x28]         ;460
000020  430b              ORRS     r3,r3,r1              ;460
000022  62b3              STR      r3,[r6,#0x28]         ;460
000024  6a31              LDR      r1,[r6,#0x20]
000026  188b              ADDS     r3,r1,r2
000028  69e2              LDR      r2,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
00002a  4601              MOV      r1,r0
00002c  4618              MOV      r0,r3
00002e  f7fffffe          BL       USBD_MemCopy
;;;462            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000032  69e0              LDR      r0,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
000034  6270              STR      r0,[r6,#0x24]
;;;463        }
;;;464        else
;;;465        {
;;;466            // Data size <= MXPLD
;;;467            g_usbd_CtrlInPointer = 0;
;;;468            g_usbd_CtrlInSize = 0;
;;;469            USBD_SET_DATA1(EP0);
;;;470            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, u32Size);
;;;471            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;472        }
;;;473    }
000036  bd70              POP      {r4-r6,pc}
                  |L8.56|
000038  2300              MOVS     r3,#0                 ;467
00003a  6063              STR      r3,[r4,#4]            ;468  ; g_usbd_CtrlInPointer
00003c  60a3              STR      r3,[r4,#8]            ;468  ; g_usbd_CtrlInSize
00003e  6ab3              LDR      r3,[r6,#0x28]         ;469
000040  430b              ORRS     r3,r3,r1              ;469
000042  62b3              STR      r3,[r6,#0x28]         ;469
000044  6a31              LDR      r1,[r6,#0x20]         ;470
000046  188b              ADDS     r3,r1,r2              ;470
000048  4601              MOV      r1,r0                 ;470
00004a  462a              MOV      r2,r5                 ;470
00004c  4618              MOV      r0,r3                 ;470
00004e  f7fffffe          BL       USBD_MemCopy
000052  6275              STR      r5,[r6,#0x24]         ;471
000054  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      ||.data||
                  |L8.92|
                          DCD      0x40060000
                  |L8.96|
                          DCD      0x40060100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;535     */
;;;536    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;537    {
;;;538        g_usbd_CtrlOutPointer = pu8Buf;
;;;539        g_usbd_CtrlOutSize = 0;
000002  60d0              STR      r0,[r2,#0xc]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;540        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;541        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  69d0              LDR      r0,[r2,#0x1c]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6348              STR      r0,[r1,#0x34]
;;;542    }
000010  4770              BX       lr
;;;543    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x40060000

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;109     */
;;;110    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112        g_usbd_CtrlOutToggle = 0;
000002  4c13              LDR      r4,|L10.80|
000004  2000              MOVS     r0,#0
000006  6260              STR      r0,[r4,#0x24]  ; g_usbd_CtrlOutToggle
;;;113        // Setup packet process
;;;114        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8);
000008  4620              MOV      r0,r4
00000a  2208              MOVS     r2,#8
00000c  4911              LDR      r1,|L10.84|
00000e  3044              ADDS     r0,r0,#0x44
000010  f7fffffe          BL       USBD_MemCopy
;;;115    
;;;116        switch (g_usbd_SetupPacket[0] & 0x60)   /* request type */
000014  4620              MOV      r0,r4
000016  3044              ADDS     r0,r0,#0x44
000018  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
00001a  2160              MOVS     r1,#0x60
00001c  4008              ANDS     r0,r0,r1
00001e  d00c              BEQ      |L10.58|
000020  2820              CMP      r0,#0x20
000022  d00d              BEQ      |L10.64|
000024  2840              CMP      r0,#0x40
000026  d00d              BEQ      |L10.68|
;;;117        {
;;;118        case REQ_STANDARD:   // Standard
;;;119        {
;;;120            USBD_StandardRequest();
;;;121            break;
;;;122        }
;;;123        case REQ_CLASS:   // Class
;;;124        {
;;;125            if (g_usbd_pfnClassRequest != NULL)
;;;126            {
;;;127                g_usbd_pfnClassRequest();
;;;128            }
;;;129            break;
;;;130        }
;;;131        case REQ_VENDOR:   // Vendor
;;;132        {
;;;133            if (g_usbd_pfnVendorRequest != NULL)
;;;134            {
;;;135                g_usbd_pfnVendorRequest();
;;;136            }
;;;137            break;
;;;138        }
;;;139        default:   // reserved
;;;140        {
;;;141            /* Setup error, stall the device */
;;;142            USBD_SET_EP_STALL(EP0);
000028  480b              LDR      r0,|L10.88|
00002a  6a82              LDR      r2,[r0,#0x28]
00002c  1541              ASRS     r1,r0,#21
00002e  430a              ORRS     r2,r2,r1
000030  6282              STR      r2,[r0,#0x28]
;;;143            USBD_SET_EP_STALL(EP1);
000032  6b82              LDR      r2,[r0,#0x38]
000034  430a              ORRS     r2,r2,r1
000036  6382              STR      r2,[r0,#0x38]
;;;144            break;
;;;145        }
;;;146        }
;;;147    }
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  f7fffffe          BL       USBD_StandardRequest
                  |L10.62|
00003e  bd10              POP      {r4,pc}
                  |L10.64|
000040  6b20              LDR      r0,[r4,#0x30]         ;125  ; g_usbd_pfnClassRequest
000042  e000              B        |L10.70|
                  |L10.68|
000044  6ae0              LDR      r0,[r4,#0x2c]         ;133  ; g_usbd_pfnVendorRequest
                  |L10.70|
000046  2800              CMP      r0,#0                 ;125
000048  d0f9              BEQ      |L10.62|
00004a  4780              BLX      r0                    ;135
00004c  bd10              POP      {r4,pc}
;;;148    
                          ENDP

00004e  0000              DCW      0x0000
                  |L10.80|
                          DCD      ||.data||
                  |L10.84|
                          DCD      0x40060100
                  |L10.88|
                          DCD      0x40060000

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;625     */
;;;626    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;627    {
;;;628        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6388              STR      r0,[r1,#0x38]  ; g_usbd_pfnSetConfigCallback
;;;629    }
000004  4770              BX       lr
;;;630    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;612     */
;;;613    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;614    {
;;;615        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  62c8              STR      r0,[r1,#0x2c]  ; g_usbd_pfnVendorRequest
;;;616    }
000004  4770              BX       lr
;;;617    /**
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;266     */
;;;267    void USBD_StandardRequest(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;268    {
;;;269        /* clear global variables for new request */
;;;270        g_usbd_CtrlInPointer = 0;
000002  4f70              LDR      r7,|L13.452|
000004  2500              MOVS     r5,#0
;;;271        g_usbd_CtrlInSize = 0;
000006  607d              STR      r5,[r7,#4]  ; g_usbd_CtrlInPointer
000008  60bd              STR      r5,[r7,#8]  ; g_usbd_CtrlInSize
;;;272    
;;;273        if (g_usbd_SetupPacket[0] & 0x80)   /* request data transfer direction */
00000a  463c              MOV      r4,r7
00000c  3444              ADDS     r4,r4,#0x44
;;;274        {
;;;275            // Device to host
;;;276            switch (g_usbd_SetupPacket[1])
;;;277            {
;;;278            case GET_CONFIGURATION:
;;;279            {
;;;280                // Return current configuration setting
;;;281                /* Data stage */
;;;282                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbConfig;
;;;283                USBD_SET_DATA1(EP0);
;;;284                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;285                /* Status stage */
;;;286                USBD_PrepareCtrlOut(0,0);
;;;287                break;
;;;288            }
;;;289            case GET_DESCRIPTOR:
;;;290            {
;;;291                USBD_GetDescriptor();
;;;292                break;
;;;293            }
;;;294            case GET_INTERFACE:
;;;295            {
;;;296                // Return current interface setting
;;;297                /* Data stage */
;;;298                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbAltInterface;
;;;299                USBD_SET_DATA1(EP0);
;;;300                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;301                /* Status stage */
;;;302                USBD_PrepareCtrlOut(0,0);
;;;303                break;
;;;304            }
;;;305            case GET_STATUS:
;;;306            {
;;;307                // Device
;;;308                if(g_usbd_SetupPacket[0] == 0x80)
;;;309                {
;;;310                    uint8_t u8Tmp;
;;;311    
;;;312                    u8Tmp = 0;
;;;313                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x40) u8Tmp |= 1; // Self-Powered/Bus-Powered.
;;;314                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x20) u8Tmp |= (g_usbd_RemoteWakeupEn << 1); // Remote wake up
;;;315    
;;;316                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = u8Tmp;
;;;317                }
;;;318                // Interface
;;;319                else if (g_usbd_SetupPacket[0] == 0x81)
;;;320                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = 0;
;;;321                // Endpoint
;;;322                else if (g_usbd_SetupPacket[0] == 0x82)
;;;323                {
;;;324                    uint8_t ep = g_usbd_SetupPacket[4] & 0xF;
00000e  7921              LDRB     r1,[r4,#4]
000010  4638              MOV      r0,r7                 ;273
000012  3044              ADDS     r0,r0,#0x44           ;273
000014  070b              LSLS     r3,r1,#28
000016  7800              LDRB     r0,[r0,#0]            ;273  ; g_usbd_SetupPacket
000018  7861              LDRB     r1,[r4,#1]            ;276
00001a  0602              LSLS     r2,r0,#24             ;273
00001c  0f1b              LSRS     r3,r3,#28
00001e  4c6a              LDR      r4,|L13.456|
000020  2680              MOVS     r6,#0x80              ;283
000022  2a00              CMP      r2,#0                 ;273
000024  da5b              BGE      |L13.222|
000026  4a69              LDR      r2,|L13.460|
000028  2900              CMP      r1,#0                 ;276
00002a  d020              BEQ      |L13.110|
00002c  2906              CMP      r1,#6                 ;276
00002e  d00d              BEQ      |L13.76|
000030  2908              CMP      r1,#8                 ;276
000032  d009              BEQ      |L13.72|
000034  290a              CMP      r1,#0xa               ;276
000036  d00c              BEQ      |L13.82|
;;;325                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = USBD_GetStall(ep)? 1 : 0;
;;;326                }
;;;327    
;;;328                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1) = 0;
;;;329                /* Data stage */
;;;330                USBD_SET_DATA1(EP0);
;;;331                USBD_SET_PAYLOAD_LEN(EP0, 2);
;;;332                /* Status stage */
;;;333                USBD_PrepareCtrlOut(0,0);
;;;334                break;
;;;335            }
;;;336            default:
;;;337            {
;;;338                /* Setup error, stall the device */
;;;339                USBD_SET_EP_STALL(EP0);
000038  6aa0              LDR      r0,[r4,#0x28]
00003a  1551              ASRS     r1,r2,#21
00003c  4308              ORRS     r0,r0,r1
00003e  62a0              STR      r0,[r4,#0x28]
;;;340                USBD_SET_EP_STALL(EP1);
000040  6ba0              LDR      r0,[r4,#0x38]
000042  4308              ORRS     r0,r0,r1
000044  63a0              STR      r0,[r4,#0x38]
;;;341                break;
;;;342            }
;;;343            }
;;;344        }
;;;345        else
;;;346        {
;;;347            // Host to device
;;;348            switch (g_usbd_SetupPacket[1])
;;;349            {
;;;350            case CLEAR_FEATURE:
;;;351            {
;;;352                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;353                {
;;;354    
;;;355                    int32_t epNum, i;
;;;356    
;;;357                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;358                       a flag: g_u32EpStallLock is added to support it */
;;;359                    epNum = g_usbd_SetupPacket[4] & 0xF;
;;;360                    for(i = 0; i < USBD_MAX_EP; i++)
;;;361                    {
;;;362                        if(((USBD->EP[i].CFG & 0xF) == epNum) && ((g_u32EpStallLock & (1 << i)) == 0))
;;;363                            USBD->EP[i].CFG &= ~(USBD_CFG_SSTALL_Msk | USBD_CFG_DSQ_SYNC_Msk);
;;;364                    }
;;;365                }
;;;366                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;367                    g_usbd_RemoteWakeupEn = 0;
;;;368                /* Status stage */
;;;369                USBD_SET_DATA1(EP0);
;;;370                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;371                break;
;;;372            }
;;;373            case SET_ADDRESS:
;;;374            {
;;;375                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;376    
;;;377                // DATA IN for end of setup
;;;378                /* Status Stage */
;;;379                USBD_SET_DATA1(EP0);
;;;380                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;381                break;
;;;382            }
;;;383            case SET_CONFIGURATION:
;;;384            {
;;;385                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;386    
;;;387                    if (g_usbd_pfnSetConfigCallback)
;;;388                        g_usbd_pfnSetConfigCallback();
;;;389    
;;;390                    if (g_usbd_UsbConfig == 0)
;;;391                    {
;;;392                        int volatile i;
;;;393    
;;;394                        /* Reset PID DATA0 */
;;;395                        for (i = 2; i < USBD_MAX_EP; i++)
;;;396                            USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
;;;397                    }
;;;398    
;;;399                    // DATA IN for end of setup
;;;400                    /* Status stage */
;;;401                    USBD_SET_DATA1(EP0);
;;;402                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;403                    break;
;;;404                }
;;;405    
;;;406                case SET_FEATURE:
;;;407                {
;;;408                    if (g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;409                        USBD_SetStall(g_usbd_SetupPacket[4] & 0xF);
;;;410                    else if (g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;411                        g_usbd_RemoteWakeupEn = 1;
;;;412    
;;;413                    /* Status stage */
;;;414                    USBD_SET_DATA1(EP0);
;;;415                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;416                    break;
;;;417                }
;;;418    
;;;419                case SET_INTERFACE:
;;;420                {
;;;421                    g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;422    
;;;423                    if (g_usbd_pfnSetInterface != NULL)
;;;424                        g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;425    
;;;426                    /* Status stage */
;;;427                    USBD_SET_DATA1(EP0);
;;;428                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;429                    break;
;;;430                }
;;;431    
;;;432                default:
;;;433                {
;;;434                    /* Setup error, stall the device */
;;;435                    USBD_SET_EP_STALL(EP0);
;;;436                    USBD_SET_EP_STALL(EP1);
;;;437                    break;
;;;438                }
;;;439            }
;;;440        }
;;;441    }
000046  bdf8              POP      {r3-r7,pc}
                  |L13.72|
000048  6ab8              LDR      r0,[r7,#0x28]         ;282  ; g_usbd_UsbConfig
00004a  e003              B        |L13.84|
                  |L13.76|
00004c  f7fffffe          BL       USBD_GetDescriptor
000050  bdf8              POP      {r3-r7,pc}
                  |L13.82|
000052  6a38              LDR      r0,[r7,#0x20]         ;298  ; g_usbd_UsbAltInterface
                  |L13.84|
000054  6a21              LDR      r1,[r4,#0x20]         ;282
000056  1889              ADDS     r1,r1,r2              ;282
000058  7008              STRB     r0,[r1,#0]            ;282
00005a  6aa0              LDR      r0,[r4,#0x28]         ;283
00005c  4330              ORRS     r0,r0,r6              ;283
00005e  62a0              STR      r0,[r4,#0x28]         ;283
000060  2001              MOVS     r0,#1                 ;284
                  |L13.98|
000062  6260              STR      r0,[r4,#0x24]         ;284
000064  2100              MOVS     r1,#0                 ;286
000066  4608              MOV      r0,r1                 ;286
000068  f7fffffe          BL       USBD_PrepareCtrlOut
00006c  bdf8              POP      {r3-r7,pc}
                  |L13.110|
00006e  2880              CMP      r0,#0x80              ;308
000070  d004              BEQ      |L13.124|
000072  2881              CMP      r0,#0x81              ;319
000074  d010              BEQ      |L13.152|
000076  2882              CMP      r0,#0x82              ;322
000078  d012              BEQ      |L13.160|
00007a  e028              B        |L13.206|
                  |L13.124|
00007c  6c39              LDR      r1,[r7,#0x40]         ;313  ; g_usbd_sInfo
00007e  2000              MOVS     r0,#0                 ;312
000080  6849              LDR      r1,[r1,#4]            ;313
000082  79c9              LDRB     r1,[r1,#7]            ;313
000084  064b              LSLS     r3,r1,#25             ;313
000086  d500              BPL      |L13.138|
000088  2001              MOVS     r0,#1                 ;313
                  |L13.138|
00008a  0689              LSLS     r1,r1,#26             ;314
00008c  d51c              BPL      |L13.200|
00008e  7839              LDRB     r1,[r7,#0]            ;314  ; g_usbd_RemoteWakeupEn
000090  0049              LSLS     r1,r1,#1              ;314
000092  4301              ORRS     r1,r1,r0              ;314
000094  b2c8              UXTB     r0,r1                 ;314
000096  e017              B        |L13.200|
                  |L13.152|
000098  6a20              LDR      r0,[r4,#0x20]         ;320
00009a  1880              ADDS     r0,r0,r2              ;320
00009c  7005              STRB     r5,[r0,#0]            ;320
00009e  e016              B        |L13.206|
                  |L13.160|
0000a0  2000              MOVS     r0,#0                 ;320
                  |L13.162|
0000a2  4949              LDR      r1,|L13.456|
0000a4  0107              LSLS     r7,r0,#4              ;320
0000a6  3128              ADDS     r1,r1,#0x28           ;320
0000a8  1879              ADDS     r1,r7,r1              ;320
0000aa  6809              LDR      r1,[r1,#0]            ;320
0000ac  070f              LSLS     r7,r1,#28             ;320
0000ae  0f3f              LSRS     r7,r7,#28             ;320
0000b0  429f              CMP      r7,r3                 ;320
0000b2  d002              BEQ      |L13.186|
0000b4  1c40              ADDS     r0,r0,#1              ;320
0000b6  2808              CMP      r0,#8                 ;320
0000b8  dbf3              BLT      |L13.162|
                  |L13.186|
0000ba  2001              MOVS     r0,#1                 ;320
0000bc  0240              LSLS     r0,r0,#9              ;320
0000be  4201              TST      r1,r0                 ;320
0000c0  d001              BEQ      |L13.198|
0000c2  2001              MOVS     r0,#1                 ;325
0000c4  e000              B        |L13.200|
                  |L13.198|
0000c6  2000              MOVS     r0,#0                 ;325
                  |L13.200|
0000c8  6a21              LDR      r1,[r4,#0x20]         ;325
0000ca  1889              ADDS     r1,r1,r2              ;325
0000cc  7008              STRB     r0,[r1,#0]            ;325
                  |L13.206|
0000ce  6a20              LDR      r0,[r4,#0x20]         ;328
0000d0  1880              ADDS     r0,r0,r2              ;328
0000d2  7045              STRB     r5,[r0,#1]            ;328
0000d4  6aa0              LDR      r0,[r4,#0x28]         ;330
0000d6  4330              ORRS     r0,r0,r6              ;330
0000d8  62a0              STR      r0,[r4,#0x28]         ;330
0000da  2002              MOVS     r0,#2                 ;331
0000dc  e7c1              B        |L13.98|
                  |L13.222|
0000de  4839              LDR      r0,|L13.452|
0000e0  3044              ADDS     r0,r0,#0x44           ;273
0000e2  7880              LDRB     r0,[r0,#2]            ;352
0000e4  2905              CMP      r1,#5                 ;348
0000e6  d035              BEQ      |L13.340|
0000e8  dc04              BGT      |L13.244|
0000ea  2901              CMP      r1,#1                 ;348
0000ec  d00f              BEQ      |L13.270|
0000ee  2903              CMP      r1,#3                 ;348
0000f0  d104              BNE      |L13.252|
0000f2  e048              B        |L13.390|
                  |L13.244|
0000f4  2909              CMP      r1,#9                 ;348
0000f6  d02f              BEQ      |L13.344|
0000f8  290b              CMP      r1,#0xb               ;348
0000fa  d05c              BEQ      |L13.438|
                  |L13.252|
0000fc  6aa1              LDR      r1,[r4,#0x28]         ;435
0000fe  2001              MOVS     r0,#1                 ;435
000100  0240              LSLS     r0,r0,#9              ;435
000102  4301              ORRS     r1,r1,r0              ;435
000104  62a1              STR      r1,[r4,#0x28]         ;435
000106  6ba1              LDR      r1,[r4,#0x38]         ;436
000108  4301              ORRS     r1,r1,r0              ;436
00010a  63a1              STR      r1,[r4,#0x38]         ;436
00010c  bdf8              POP      {r3-r7,pc}
                  |L13.270|
00010e  2800              CMP      r0,#0                 ;352
000110  d002              BEQ      |L13.280|
000112  2801              CMP      r0,#1                 ;366
000114  d018              BEQ      |L13.328|
000116  e018              B        |L13.330|
                  |L13.280|
000118  6bf9              LDR      r1,[r7,#0x3c]         ;362
00011a  2000              MOVS     r0,#0                 ;360
00011c  468c              MOV      r12,r1                ;362
                  |L13.286|
00011e  0101              LSLS     r1,r0,#4              ;362
000120  1909              ADDS     r1,r1,r4              ;362
000122  6a8a              LDR      r2,[r1,#0x28]         ;362
000124  0712              LSLS     r2,r2,#28             ;362
000126  0f12              LSRS     r2,r2,#28             ;362
000128  429a              CMP      r2,r3                 ;362
00012a  d109              BNE      |L13.320|
00012c  2201              MOVS     r2,#1                 ;362
00012e  4082              LSLS     r2,r2,r0              ;362
000130  4667              MOV      r7,r12                ;362
000132  423a              TST      r2,r7                 ;362
000134  d104              BNE      |L13.320|
000136  6a8a              LDR      r2,[r1,#0x28]         ;363
000138  2705              MOVS     r7,#5                 ;363
00013a  01ff              LSLS     r7,r7,#7              ;363
00013c  43ba              BICS     r2,r2,r7              ;363
00013e  628a              STR      r2,[r1,#0x28]         ;363
                  |L13.320|
000140  1c40              ADDS     r0,r0,#1              ;363
000142  2808              CMP      r0,#8                 ;360
000144  dbeb              BLT      |L13.286|
000146  e000              B        |L13.330|
                  |L13.328|
000148  703d              STRB     r5,[r7,#0]            ;367
                  |L13.330|
00014a  6aa0              LDR      r0,[r4,#0x28]         ;369
00014c  4330              ORRS     r0,r0,r6              ;369
00014e  62a0              STR      r0,[r4,#0x28]         ;369
000150  6265              STR      r5,[r4,#0x24]         ;370
000152  bdf8              POP      {r3-r7,pc}
                  |L13.340|
000154  61b8              STR      r0,[r7,#0x18]         ;375  ; g_usbd_UsbAddr
000156  e7f8              B        |L13.330|
                  |L13.344|
000158  62b8              STR      r0,[r7,#0x28]         ;385  ; g_usbd_UsbConfig
00015a  6bb8              LDR      r0,[r7,#0x38]         ;387  ; g_usbd_pfnSetConfigCallback
00015c  2800              CMP      r0,#0                 ;387
00015e  d000              BEQ      |L13.354|
000160  4780              BLX      r0                    ;388
                  |L13.354|
000162  6ab8              LDR      r0,[r7,#0x28]         ;390  ; g_usbd_UsbConfig
000164  2800              CMP      r0,#0                 ;390
000166  d1f0              BNE      |L13.330|
000168  2002              MOVS     r0,#2                 ;395
00016a  4917              LDR      r1,|L13.456|
00016c  9000              STR      r0,[sp,#0]            ;395
00016e  3128              ADDS     r1,r1,#0x28           ;395
                  |L13.368|
000170  0100              LSLS     r0,r0,#4              ;396
000172  1840              ADDS     r0,r0,r1              ;396
000174  6802              LDR      r2,[r0,#0]            ;396
000176  43b2              BICS     r2,r2,r6              ;396
000178  6002              STR      r2,[r0,#0]            ;396
00017a  9800              LDR      r0,[sp,#0]            ;395
00017c  1c40              ADDS     r0,r0,#1              ;395
00017e  9000              STR      r0,[sp,#0]            ;395
000180  2808              CMP      r0,#8                 ;395
000182  dbf5              BLT      |L13.368|
000184  e7e1              B        |L13.330|
                  |L13.390|
000186  2800              CMP      r0,#0                 ;408
000188  d003              BEQ      |L13.402|
00018a  2801              CMP      r0,#1                 ;410
00018c  d1dd              BNE      |L13.330|
00018e  7038              STRB     r0,[r7,#0]            ;411
000190  e7db              B        |L13.330|
                  |L13.402|
000192  490d              LDR      r1,|L13.456|
000194  0102              LSLS     r2,r0,#4              ;411
000196  3128              ADDS     r1,r1,#0x28           ;411
000198  1852              ADDS     r2,r2,r1              ;411
00019a  6811              LDR      r1,[r2,#0]            ;411
00019c  070f              LSLS     r7,r1,#28             ;411
00019e  0f3f              LSRS     r7,r7,#28             ;411
0001a0  429f              CMP      r7,r3                 ;411
0001a2  d104              BNE      |L13.430|
0001a4  2001              MOVS     r0,#1                 ;411
0001a6  0240              LSLS     r0,r0,#9              ;411
0001a8  4301              ORRS     r1,r1,r0              ;411
0001aa  6011              STR      r1,[r2,#0]            ;411
0001ac  e7cd              B        |L13.330|
                  |L13.430|
0001ae  1c40              ADDS     r0,r0,#1              ;411
0001b0  2808              CMP      r0,#8                 ;411
0001b2  dbee              BLT      |L13.402|
0001b4  e7c9              B        |L13.330|
                  |L13.438|
0001b6  6238              STR      r0,[r7,#0x20]         ;421  ; g_usbd_UsbAltInterface
0001b8  6b79              LDR      r1,[r7,#0x34]         ;423  ; g_usbd_pfnSetInterface
0001ba  2900              CMP      r1,#0                 ;423
0001bc  d0c5              BEQ      |L13.330|
0001be  6a38              LDR      r0,[r7,#0x20]         ;424  ; g_usbd_UsbAltInterface
0001c0  4788              BLX      r1                    ;424
0001c2  e7c2              B        |L13.330|
;;;442    
                          ENDP

                  |L13.452|
                          DCD      ||.data||
                  |L13.456|
                          DCD      0x40060000
                  |L13.460|
                          DCD      0x40060100

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;78      */
;;;79     void USBD_Start(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81         /* Enable USB-related interrupts. */
;;;82         USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000002  4c06              LDR      r4,|L14.28|
000004  68a0              LDR      r0,[r4,#8]
000006  210f              MOVS     r1,#0xf
000008  4308              ORRS     r0,r0,r1
00000a  60a0              STR      r0,[r4,#8]
;;;83         CLK_SysTickDelay(100000);
00000c  4804              LDR      r0,|L14.32|
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;84         USBD_CLR_SE0();
000012  6820              LDR      r0,[r4,#0]
000014  2110              MOVS     r1,#0x10
000016  4388              BICS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
;;;85     }
00001a  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L14.28|
                          DCD      0x40060000
                  |L14.32|
                          DCD      0x000186a0

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;582     */
;;;583    void USBD_SwReset(void)
000000  b530              PUSH     {r4,r5,lr}
;;;584    {
;;;585        int i;
;;;586    
;;;587        // Reset all variables for protocol
;;;588        g_usbd_CtrlInPointer = 0;
000002  480b              LDR      r0,|L15.48|
000004  2300              MOVS     r3,#0
;;;589        g_usbd_CtrlInSize = 0;
000006  6043              STR      r3,[r0,#4]  ; g_usbd_CtrlInPointer
000008  6083              STR      r3,[r0,#8]  ; g_usbd_CtrlInSize
;;;590        g_usbd_CtrlOutPointer = 0;
;;;591        g_usbd_CtrlOutSize = 0;
00000a  60c3              STR      r3,[r0,#0xc]  ; g_usbd_CtrlOutPointer
00000c  6103              STR      r3,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;592        g_usbd_CtrlOutSizeLimit = 0;
00000e  6143              STR      r3,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;593        memset(g_usbd_SetupPacket, 0, 8);
000010  6443              STR      r3,[r0,#0x44]  ; g_usbd_SetupPacket
;;;594    
;;;595        /* Reset PID DATA0 */
;;;596        for (i=0; i<USBD_MAX_EP; i++)
000012  6483              STR      r3,[r0,#0x48]  ; g_usbd_SetupPacket
;;;597            USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
000014  4a07              LDR      r2,|L15.52|
000016  4618              MOV      r0,r3                 ;596
000018  2480              MOVS     r4,#0x80
                  |L15.26|
00001a  0101              LSLS     r1,r0,#4
00001c  1889              ADDS     r1,r1,r2
00001e  6a8d              LDR      r5,[r1,#0x28]
000020  43a5              BICS     r5,r5,r4
000022  628d              STR      r5,[r1,#0x28]
000024  1c40              ADDS     r0,r0,#1
000026  2808              CMP      r0,#8                 ;596
000028  dbf7              BLT      |L15.26|
;;;598    
;;;599        // Reset USB device address
;;;600        USBD_SET_ADDR(0);
00002a  6113              STR      r3,[r2,#0x10]
;;;601    }
00002c  bd30              POP      {r4,r5,pc}
;;;602    
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      ||.data||
                  |L15.52|
                          DCD      0x40060000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00                DCB      0x00
                  g_usbd_CtrlInZeroFlag
000001  000000            DCB      0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_CtrlOutToggle
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
