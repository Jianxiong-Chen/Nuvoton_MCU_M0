; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\rtc.crf ..\..\Library\StdDriver\src\rtc.c]
                          THUMB

                          AREA ||i.RTC_32KCalibration||, CODE, READONLY, ALIGN=2

                  RTC_32KCalibration PROC
;;;57      */
;;;58     void RTC_32KCalibration(int32_t i32FrequencyX100)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         int32_t i32RegInt,i32RegFra ;
;;;61     
;;;62         /* Compute Integer and Fraction for RTC register*/
;;;63         i32RegInt = (i32FrequencyX100/100) - RTC_FCR_REFERENCE;
000002  2164              MOVS     r1,#0x64
000004  f7fffffe          BL       __aeabi_idivmod
000008  4a0c              LDR      r2,|L1.60|
00000a  1884              ADDS     r4,r0,r2
;;;64         i32RegFra = (((i32FrequencyX100%100)) * 60) / 100;
00000c  203c              MOVS     r0,#0x3c
00000e  4348              MULS     r0,r1,r0
000010  2164              MOVS     r1,#0x64
000012  f7fffffe          BL       __aeabi_idivmod
;;;65     
;;;66         /* Judge Integer part is reasonable */
;;;67         if ( (i32RegInt < 0) | (i32RegInt > 15) )
000016  0fe2              LSRS     r2,r4,#31
000018  2c0f              CMP      r4,#0xf
00001a  dd01              BLE      |L1.32|
00001c  2101              MOVS     r1,#1
00001e  e000              B        |L1.34|
                  |L1.32|
000020  2100              MOVS     r1,#0
                  |L1.34|
000022  430a              ORRS     r2,r2,r1
000024  d108              BNE      |L1.56|
;;;68         {
;;;69             return;
;;;70         }
;;;71     
;;;72         RTC->AER = RTC_WRITE_KEY;
000026  4907              LDR      r1,|L1.68|
000028  4a05              LDR      r2,|L1.64|
00002a  604a              STR      r2,[r1,#4]
                  |L1.44|
;;;73         while(!(RTC->AER & RTC_AER_ENF_Msk));
00002c  684a              LDR      r2,[r1,#4]
00002e  03d2              LSLS     r2,r2,#15
000030  d5fc              BPL      |L1.44|
;;;74     
;;;75         RTC->FCR = (uint32_t)((i32RegInt<<8) | i32RegFra);
000032  0222              LSLS     r2,r4,#8
000034  4302              ORRS     r2,r2,r0
000036  608a              STR      r2,[r1,#8]
                  |L1.56|
;;;76     
;;;77     }
000038  bd10              POP      {r4,pc}
;;;78     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0xffff8007
                  |L1.64|
                          DCD      0x0000a965
                  |L1.68|
                          DCD      0x40008000

                          AREA ||i.RTC_Close||, CODE, READONLY, ALIGN=2

                  RTC_Close PROC
;;;824     */
;;;825    void RTC_Close (void)
000000  4802              LDR      r0,|L2.12|
;;;826    {
;;;827        CLK->APBCLK  &= ~CLK_APBCLK_RTC_EN_Msk;
000002  6881              LDR      r1,[r0,#8]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;828    }
00000a  4770              BX       lr
;;;829    
                          ENDP

                  |L2.12|
                          DCD      0x50000200

                          AREA ||i.RTC_DisableInt||, CODE, READONLY, ALIGN=2

                  RTC_DisableInt PROC
;;;794     */
;;;795    void RTC_DisableInt(uint32_t u32IntFlagMask)
000000  4a0e              LDR      r2,|L3.60|
;;;796    {
;;;797        RTC->AER = RTC_WRITE_KEY;
000002  490f              LDR      r1,|L3.64|
                  |L3.4|
;;;798        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L3.4|
;;;799    
;;;800        if(u32IntFlagMask & RTC_RIER_TIER_Msk)
00000c  0782              LSLS     r2,r0,#30
00000e  d504              BPL      |L3.26|
;;;801        {
;;;802            RTC->RIER &= ~RTC_RIER_TIER_Msk;
000010  6a8b              LDR      r3,[r1,#0x28]
000012  2202              MOVS     r2,#2
000014  4393              BICS     r3,r3,r2
000016  628b              STR      r3,[r1,#0x28]
;;;803            RTC->RIIR = RTC_RIIR_TIF_Msk;
000018  62ca              STR      r2,[r1,#0x2c]
                  |L3.26|
;;;804        }
;;;805    
;;;806        if(u32IntFlagMask & RTC_RIER_AIER_Msk)
00001a  07c2              LSLS     r2,r0,#31
00001c  d005              BEQ      |L3.42|
;;;807        {
;;;808            RTC->RIER &= ~RTC_RIER_AIER_Msk;
00001e  6a8a              LDR      r2,[r1,#0x28]
000020  0852              LSRS     r2,r2,#1
000022  0052              LSLS     r2,r2,#1
000024  628a              STR      r2,[r1,#0x28]
;;;809            RTC->RIIR = RTC_RIIR_AIF_Msk;
000026  2201              MOVS     r2,#1
000028  62ca              STR      r2,[r1,#0x2c]
                  |L3.42|
;;;810        }
;;;811    
;;;812        if(u32IntFlagMask & RTC_RIER_SNOOPIER_Msk)
00002a  0740              LSLS     r0,r0,#29
00002c  d504              BPL      |L3.56|
;;;813        {
;;;814            RTC->RIER &= ~RTC_RIER_SNOOPIER_Msk;
00002e  6a8a              LDR      r2,[r1,#0x28]
000030  2004              MOVS     r0,#4
000032  4382              BICS     r2,r2,r0
000034  628a              STR      r2,[r1,#0x28]
;;;815            RTC->RIIR = RTC_RIIR_SNOOPIF_Msk;
000036  62c8              STR      r0,[r1,#0x2c]
                  |L3.56|
;;;816        }
;;;817    }
000038  4770              BX       lr
;;;818    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x0000a965
                  |L3.64|
                          DCD      0x40008000

                          AREA ||i.RTC_DisableTamperDetection||, CODE, READONLY, ALIGN=2

                  RTC_DisableTamperDetection PROC
;;;716     */
;;;717    void RTC_DisableTamperDetection(void)
000000  4905              LDR      r1,|L4.24|
;;;718    {
;;;719        RTC->AER = RTC_WRITE_KEY;
000002  4806              LDR      r0,|L4.28|
                  |L4.4|
;;;720        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  6041              STR      r1,[r0,#4]
000006  6842              LDR      r2,[r0,#4]
000008  03d2              LSLS     r2,r2,#15
00000a  d5fb              BPL      |L4.4|
;;;721    
;;;722        RTC->SPRCTL &= ~RTC_SPRCTL_SNOOPEN_Msk;
00000c  6bc1              LDR      r1,[r0,#0x3c]
00000e  0849              LSRS     r1,r1,#1
000010  0049              LSLS     r1,r1,#1
000012  63c1              STR      r1,[r0,#0x3c]
;;;723    }
000014  4770              BX       lr
;;;724    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x0000a965
                  |L4.28|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableInt||, CODE, READONLY, ALIGN=2

                  RTC_EnableInt PROC
;;;775     */
;;;776    void RTC_EnableInt(uint32_t u32IntFlagMask)
000000  4a04              LDR      r2,|L5.20|
;;;777    {
;;;778        RTC->AER = RTC_WRITE_KEY;
000002  4905              LDR      r1,|L5.24|
                  |L5.4|
;;;779        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L5.4|
;;;780    
;;;781        RTC->RIER |= u32IntFlagMask;
00000c  6a8a              LDR      r2,[r1,#0x28]
00000e  4302              ORRS     r2,r2,r0
000010  628a              STR      r2,[r1,#0x28]
;;;782    }
000012  4770              BX       lr
;;;783    
                          ENDP

                  |L5.20|
                          DCD      0x0000a965
                  |L5.24|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableTamperDetection||, CODE, READONLY, ALIGN=2

                  RTC_EnableTamperDetection PROC
;;;690     */
;;;691    void RTC_EnableTamperDetection(uint32_t u32PinCondition)
000000  4a0c              LDR      r2,|L6.52|
;;;692    {
;;;693        RTC->AER = RTC_WRITE_KEY;
000002  490d              LDR      r1,|L6.56|
                  |L6.4|
;;;694        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L6.4|
;;;695    
;;;696        /* detection edge select */
;;;697        if(u32PinCondition)
;;;698            RTC->SPRCTL |= RTC_SPRCTL_SNOOPEDGE_Msk;
00000c  2302              MOVS     r3,#2
00000e  2800              CMP      r0,#0                 ;697
;;;699        else
;;;700            RTC->SPRCTL &= ~RTC_SPRCTL_SNOOPEDGE_Msk;
000010  6bca              LDR      r2,[r1,#0x3c]
000012  4608              MOV      r0,r1
000014  d001              BEQ      |L6.26|
000016  431a              ORRS     r2,r2,r3              ;698
000018  e000              B        |L6.28|
                  |L6.26|
00001a  439a              BICS     r2,r2,r3
                  |L6.28|
00001c  63c2              STR      r2,[r0,#0x3c]         ;698
                  |L6.30|
;;;701    
;;;702        while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRDY_Msk));
00001e  6bc8              LDR      r0,[r1,#0x3c]
000020  0600              LSLS     r0,r0,#24
000022  d5fc              BPL      |L6.30|
;;;703    
;;;704        /* enable snooper pin event detection */
;;;705        RTC->SPRCTL |= RTC_SPRCTL_SNOOPEN_Msk;
000024  6bc8              LDR      r0,[r1,#0x3c]
000026  2201              MOVS     r2,#1
000028  4310              ORRS     r0,r0,r2
00002a  63c8              STR      r0,[r1,#0x3c]
                  |L6.44|
;;;706        while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRDY_Msk));
00002c  6bc8              LDR      r0,[r1,#0x3c]
00002e  0600              LSLS     r0,r0,#24
000030  d5fc              BPL      |L6.44|
;;;707    }
000032  4770              BX       lr
;;;708    
                          ENDP

                  |L6.52|
                          DCD      0x0000a965
                  |L6.56|
                          DCD      0x40008000

                          AREA ||i.RTC_GetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmDateAndTime PROC
;;;289     */
;;;290    void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;291    {
;;;292        uint32_t u32Tmp;
;;;293    
;;;294        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;  /* 12/24-hour */
000002  4a3e              LDR      r2,|L7.252|
000004  6951              LDR      r1,[r2,#0x14]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;295        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;        /* Day of week */
00000a  61c1              STR      r1,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
;;;296    
;;;297        RTC->AER = RTC_WRITE_KEY;
00000e  4c3c              LDR      r4,|L7.256|
000010  0749              LSLS     r1,r1,#29             ;295
000012  0f49              LSRS     r1,r1,#29             ;295
000014  60c1              STR      r1,[r0,#0xc]
000016  6054              STR      r4,[r2,#4]
                  |L7.24|
;;;298        while(!(RTC->AER & RTC_AER_ENF_Msk));
000018  6851              LDR      r1,[r2,#4]
00001a  03c9              LSLS     r1,r1,#15
00001c  d5fc              BPL      |L7.24|
;;;299    
;;;300        g_u32hiYear  = (RTC->CAR & RTC_CAR_10YEAR_Msk) >> RTC_CAR_10YEAR_Pos;
00001e  6a11              LDR      r1,[r2,#0x20]
;;;301        g_u32loYear  = (RTC->CAR & RTC_CAR_1YEAR_Msk)  >> RTC_CAR_1YEAR_Pos;
;;;302        g_u32hiMonth = (RTC->CAR & RTC_CAR_10MON_Msk)  >> RTC_CAR_10MON_Pos;
;;;303        g_u32loMonth = (RTC->CAR & RTC_CAR_1MON_Msk)   >> RTC_CAR_1MON_Pos;
;;;304        g_u32hiDay   = (RTC->CAR & RTC_CAR_10DAY_Msk)  >> RTC_CAR_10DAY_Pos;
;;;305        g_u32loDay   = (RTC->CAR & RTC_CAR_1DAY_Msk);
;;;306    
;;;307        RTC->AER = RTC_WRITE_KEY;
;;;308        while(!(RTC->AER & RTC_AER_ENF_Msk));
;;;309    
;;;310        g_u32hiHour =  (RTC->TAR & RTC_TAR_10HR_Msk)  >> RTC_TAR_10HR_Pos;
;;;311        g_u32loHour =  (RTC->TAR & RTC_TAR_1HR_Msk)   >> RTC_TAR_1HR_Pos;
;;;312        g_u32hiMin    =  (RTC->TAR & RTC_TAR_10MIN_Msk) >> RTC_TAR_10MIN_Pos;
;;;313        g_u32loMin    =  (RTC->TAR & RTC_TAR_1MIN_Msk)  >> RTC_TAR_1MIN_Pos;
;;;314        g_u32hiSec    =  (RTC->TAR & RTC_TAR_10SEC_Msk) >> RTC_TAR_10SEC_Pos;
;;;315        g_u32loSec    =  (RTC->TAR & RTC_TAR_1SEC_Msk);
;;;316    
;;;317        u32Tmp  = (g_u32hiYear * 10);                                    /* Compute to 20XX year */
;;;318        u32Tmp += g_u32loYear;
;;;319        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;320    
;;;321        u32Tmp = (g_u32hiMonth * 10);                                    /* Compute 0~12 month */
;;;322        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;323    
;;;324        u32Tmp = (g_u32hiDay * 10);                                        /* Compute 0~31 day */
;;;325        sPt->u32Day = u32Tmp + g_u32loDay;
;;;326    
;;;327        if (sPt->u32TimeScale == RTC_CLOCK_12)                  /* Compute12/24 hour */
;;;328        {
;;;329            u32Tmp  = (g_u32hiHour * 10);
;;;330            u32Tmp += g_u32loHour;
;;;331            sPt->u32Hour = u32Tmp;                                        /* AM: 1~12. PM: 21~32. */
;;;332    
;;;333            if (sPt->u32Hour >= 21)
;;;334            {
;;;335                sPt->u32AmPm  = RTC_PM;
;;;336                sPt->u32Hour -= 20;
;;;337            }
;;;338            else
;;;339            {
;;;340                sPt->u32AmPm = RTC_AM;
;;;341            }
;;;342    
;;;343            u32Tmp  = (g_u32hiMin * 10);
;;;344            u32Tmp += g_u32loMin;
;;;345            sPt->u32Minute = u32Tmp;
;;;346    
;;;347            u32Tmp  = (g_u32hiSec * 10);
;;;348            u32Tmp += g_u32loSec;
;;;349            sPt->u32Second = u32Tmp;
;;;350    
;;;351        }
;;;352        else
;;;353        {
;;;354            u32Tmp  = (g_u32hiHour * 10);
;;;355            u32Tmp +=  g_u32loHour;
;;;356            sPt->u32Hour = u32Tmp;
;;;357    
;;;358            u32Tmp = (g_u32hiMin * 10);
;;;359            u32Tmp+= g_u32loMin;
;;;360            sPt->u32Minute = u32Tmp;
;;;361    
;;;362            u32Tmp  = (g_u32hiSec * 10);
;;;363            u32Tmp += g_u32loSec;
;;;364            sPt->u32Second = u32Tmp;
;;;365        }
;;;366    
;;;367    }
000020  0209              LSLS     r1,r1,#8
000022  0f0b              LSRS     r3,r1,#28
000024  4937              LDR      r1,|L7.260|
000026  604b              STR      r3,[r1,#4]            ;300  ; g_u32hiYear
000028  6a13              LDR      r3,[r2,#0x20]         ;301
00002a  031b              LSLS     r3,r3,#12
00002c  0f1b              LSRS     r3,r3,#28
00002e  608b              STR      r3,[r1,#8]            ;301  ; g_u32loYear
000030  6a13              LDR      r3,[r2,#0x20]         ;302
000032  2501              MOVS     r5,#1
000034  04db              LSLS     r3,r3,#19
000036  0fdb              LSRS     r3,r3,#31
000038  60cb              STR      r3,[r1,#0xc]          ;302  ; g_u32hiMonth
00003a  6a13              LDR      r3,[r2,#0x20]         ;303
00003c  051b              LSLS     r3,r3,#20
00003e  0f1b              LSRS     r3,r3,#28
000040  610b              STR      r3,[r1,#0x10]         ;303  ; g_u32loMonth
000042  6a13              LDR      r3,[r2,#0x20]         ;304
000044  069b              LSLS     r3,r3,#26
000046  0f9b              LSRS     r3,r3,#30
000048  614b              STR      r3,[r1,#0x14]         ;304  ; g_u32hiDay
00004a  6a13              LDR      r3,[r2,#0x20]         ;305
00004c  071b              LSLS     r3,r3,#28             ;305
00004e  0f1b              LSRS     r3,r3,#28             ;305
000050  618b              STR      r3,[r1,#0x18]         ;305  ; g_u32loDay
000052  6054              STR      r4,[r2,#4]            ;307
                  |L7.84|
000054  6853              LDR      r3,[r2,#4]            ;308
000056  03db              LSLS     r3,r3,#15             ;308
000058  d5fc              BPL      |L7.84|
00005a  69d3              LDR      r3,[r2,#0x1c]         ;310
00005c  029b              LSLS     r3,r3,#10
00005e  0f9b              LSRS     r3,r3,#30
000060  61cb              STR      r3,[r1,#0x1c]         ;310  ; g_u32hiHour
000062  69d3              LDR      r3,[r2,#0x1c]         ;311
000064  031b              LSLS     r3,r3,#12
000066  0f1b              LSRS     r3,r3,#28
000068  620b              STR      r3,[r1,#0x20]         ;311  ; g_u32loHour
00006a  69d3              LDR      r3,[r2,#0x1c]         ;312
00006c  045b              LSLS     r3,r3,#17
00006e  0f5b              LSRS     r3,r3,#29
000070  624b              STR      r3,[r1,#0x24]         ;312  ; g_u32hiMin
000072  69d3              LDR      r3,[r2,#0x1c]         ;313
000074  051b              LSLS     r3,r3,#20
000076  0f1b              LSRS     r3,r3,#28
000078  628b              STR      r3,[r1,#0x28]         ;313  ; g_u32loMin
00007a  69d3              LDR      r3,[r2,#0x1c]         ;314
00007c  065b              LSLS     r3,r3,#25
00007e  0f5b              LSRS     r3,r3,#29
000080  62cb              STR      r3,[r1,#0x2c]         ;314  ; g_u32hiSec
000082  69d2              LDR      r2,[r2,#0x1c]         ;315
000084  0712              LSLS     r2,r2,#28             ;315
000086  0f12              LSRS     r2,r2,#28             ;315
000088  630a              STR      r2,[r1,#0x30]         ;315  ; g_u32loSec
00008a  684a              LDR      r2,[r1,#4]            ;317  ; g_u32hiYear
00008c  230a              MOVS     r3,#0xa               ;317
00008e  435a              MULS     r2,r3,r2              ;317
000090  688b              LDR      r3,[r1,#8]            ;318  ; g_u32loYear
000092  18d2              ADDS     r2,r2,r3              ;318
000094  237d              MOVS     r3,#0x7d              ;319
000096  011b              LSLS     r3,r3,#4              ;319
000098  18d2              ADDS     r2,r2,r3              ;319
00009a  6002              STR      r2,[r0,#0]            ;321
00009c  68ca              LDR      r2,[r1,#0xc]          ;321  ; g_u32hiMonth
00009e  230a              MOVS     r3,#0xa               ;321
0000a0  435a              MULS     r2,r3,r2              ;321
0000a2  690b              LDR      r3,[r1,#0x10]         ;322  ; g_u32loMonth
0000a4  18d2              ADDS     r2,r2,r3              ;322
0000a6  6042              STR      r2,[r0,#4]            ;324
0000a8  694a              LDR      r2,[r1,#0x14]         ;324  ; g_u32hiDay
0000aa  230a              MOVS     r3,#0xa               ;324
0000ac  435a              MULS     r2,r3,r2              ;324
0000ae  698b              LDR      r3,[r1,#0x18]         ;325  ; g_u32loDay
0000b0  18d2              ADDS     r2,r2,r3              ;325
0000b2  6082              STR      r2,[r0,#8]            ;327
0000b4  69c2              LDR      r2,[r0,#0x1c]         ;327
0000b6  2a00              CMP      r2,#0                 ;327
0000b8  69ca              LDR      r2,[r1,#0x1c]         ;354  ; g_u32hiHour
0000ba  d004              BEQ      |L7.198|
0000bc  230a              MOVS     r3,#0xa               ;354
0000be  435a              MULS     r2,r3,r2              ;354
0000c0  6a0b              LDR      r3,[r1,#0x20]         ;355  ; g_u32loHour
0000c2  18d2              ADDS     r2,r2,r3              ;355
0000c4  e009              B        |L7.218|
                  |L7.198|
0000c6  230a              MOVS     r3,#0xa               ;329
0000c8  435a              MULS     r2,r3,r2              ;329
0000ca  6a0b              LDR      r3,[r1,#0x20]         ;330  ; g_u32loHour
0000cc  18d2              ADDS     r2,r2,r3              ;330
0000ce  6102              STR      r2,[r0,#0x10]         ;333
0000d0  2a15              CMP      r2,#0x15              ;333
0000d2  d304              BCC      |L7.222|
0000d4  2302              MOVS     r3,#2                 ;335
0000d6  3a14              SUBS     r2,r2,#0x14           ;335
0000d8  6203              STR      r3,[r0,#0x20]         ;335
                  |L7.218|
0000da  6102              STR      r2,[r0,#0x10]         ;356
0000dc  e000              B        |L7.224|
                  |L7.222|
0000de  6205              STR      r5,[r0,#0x20]         ;340
                  |L7.224|
0000e0  6a4a              LDR      r2,[r1,#0x24]         ;343  ; g_u32hiMin
0000e2  230a              MOVS     r3,#0xa               ;343
0000e4  435a              MULS     r2,r3,r2              ;343
0000e6  6a8b              LDR      r3,[r1,#0x28]         ;344  ; g_u32loMin
0000e8  18d2              ADDS     r2,r2,r3              ;344
0000ea  6142              STR      r2,[r0,#0x14]         ;347
0000ec  6aca              LDR      r2,[r1,#0x2c]         ;347  ; g_u32hiSec
0000ee  230a              MOVS     r3,#0xa               ;347
0000f0  6b09              LDR      r1,[r1,#0x30]         ;348  ; g_u32loSec
0000f2  435a              MULS     r2,r3,r2              ;347
0000f4  1851              ADDS     r1,r2,r1              ;348
0000f6  6181              STR      r1,[r0,#0x18]         ;349
0000f8  bd30              POP      {r4,r5,pc}
;;;368    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L7.252|
                          DCD      0x40008000
                  |L7.256|
                          DCD      0x0000a965
                  |L7.260|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetDateAndTime PROC
;;;196     */
;;;197    void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;198    {
;;;199        uint32_t u32Tmp;
;;;200    
;;;201        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;    /* 12/24-hour */
000002  4a39              LDR      r2,|L8.232|
000004  6951              LDR      r1,[r2,#0x14]
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
;;;202        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;          /* Day of week */
00000a  61c3              STR      r3,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
00000e  0749              LSLS     r1,r1,#29
000010  0f49              LSRS     r1,r1,#29
;;;203    
;;;204        g_u32hiYear  = (RTC->CLR & RTC_CLR_10YEAR_Msk) >> RTC_CLR_10YEAR_Pos;
000012  60c1              STR      r1,[r0,#0xc]
000014  6911              LDR      r1,[r2,#0x10]
;;;205        g_u32loYear  = (RTC->CLR & RTC_CLR_1YEAR_Msk) >> RTC_CLR_1YEAR_Pos;
;;;206        g_u32hiMonth = (RTC->CLR & RTC_CLR_10MON_Msk) >> RTC_CLR_10MON_Pos;
;;;207        g_u32loMonth = (RTC->CLR & RTC_CLR_1MON_Msk) >> RTC_CLR_1MON_Pos;
;;;208        g_u32hiDay   = (RTC->CLR & RTC_CLR_10DAY_Msk) >> RTC_CLR_10DAY_Pos;
;;;209        g_u32loDay   = (RTC->CLR & RTC_CLR_1DAY_Msk);
;;;210    
;;;211        g_u32hiHour =  (RTC->TLR & RTC_TLR_10HR_Msk) >> RTC_TLR_10HR_Pos;
;;;212        g_u32loHour =  (RTC->TLR & RTC_TLR_1HR_Msk) >> RTC_TLR_1HR_Pos;
;;;213        g_u32hiMin  =  (RTC->TLR & RTC_TLR_10MIN_Msk) >> RTC_TLR_10MIN_Pos;
;;;214        g_u32loMin  =  (RTC->TLR & RTC_TLR_1MIN_Msk) >> RTC_TLR_1MIN_Pos;
;;;215        g_u32hiSec  =  (RTC->TLR & RTC_TLR_10SEC_Msk) >> RTC_TLR_10SEC_Pos;
;;;216        g_u32loSec  =  (RTC->TLR & RTC_TLR_1SEC_Msk);
;;;217    
;;;218        u32Tmp  = (g_u32hiYear * 10);              /* Compute to 20XX year */
;;;219        u32Tmp += g_u32loYear;
;;;220        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;221    
;;;222        u32Tmp = (g_u32hiMonth * 10);              /* Compute 0~12 month */
;;;223        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;224    
;;;225        u32Tmp = (g_u32hiDay * 10);                /* Compute 0~31 day */
;;;226        sPt->u32Day   =  u32Tmp  + g_u32loDay;
;;;227    
;;;228        if (sPt->u32TimeScale == RTC_CLOCK_12)   /* Compute12/24 hour */
;;;229        {
;;;230            u32Tmp = (g_u32hiHour * 10);
;;;231            u32Tmp+= g_u32loHour;
;;;232            sPt->u32Hour = u32Tmp;                 /* AM: 1~12. PM: 21~32. */
;;;233    
;;;234            if (sPt->u32Hour >= 21)
;;;235            {
;;;236                sPt->u32AmPm = RTC_PM;
;;;237                sPt->u32Hour -= 20;
;;;238            }
;;;239            else
;;;240            {
;;;241                sPt->u32AmPm = RTC_AM;
;;;242            }
;;;243    
;;;244            u32Tmp = (g_u32hiMin  * 10);
;;;245            u32Tmp+= g_u32loMin;
;;;246            sPt->u32Minute = u32Tmp;
;;;247    
;;;248            u32Tmp = (g_u32hiSec  * 10);
;;;249            u32Tmp+= g_u32loSec;
;;;250            sPt->u32Second = u32Tmp;
;;;251    
;;;252        }
;;;253        else
;;;254        {
;;;255            u32Tmp  = (g_u32hiHour * 10);
;;;256            u32Tmp += g_u32loHour;
;;;257            sPt->u32Hour = u32Tmp;
;;;258    
;;;259            u32Tmp  = (g_u32hiMin * 10);
;;;260            u32Tmp +=  g_u32loMin;
;;;261            sPt->u32Minute = u32Tmp;
;;;262    
;;;263            u32Tmp  = (g_u32hiSec * 10);
;;;264            u32Tmp += g_u32loSec;
;;;265            sPt->u32Second = u32Tmp;
;;;266        }
;;;267    
;;;268    }
000016  0209              LSLS     r1,r1,#8
000018  0f0c              LSRS     r4,r1,#28
00001a  4934              LDR      r1,|L8.236|
00001c  604c              STR      r4,[r1,#4]            ;204  ; g_u32hiYear
00001e  6914              LDR      r4,[r2,#0x10]         ;205
000020  0324              LSLS     r4,r4,#12
000022  0f24              LSRS     r4,r4,#28
000024  608c              STR      r4,[r1,#8]            ;205  ; g_u32loYear
000026  6914              LDR      r4,[r2,#0x10]         ;206
000028  04e5              LSLS     r5,r4,#19
00002a  2401              MOVS     r4,#1
00002c  0fed              LSRS     r5,r5,#31
00002e  60cd              STR      r5,[r1,#0xc]          ;206  ; g_u32hiMonth
000030  6915              LDR      r5,[r2,#0x10]         ;207
000032  052d              LSLS     r5,r5,#20
000034  0f2d              LSRS     r5,r5,#28
000036  610d              STR      r5,[r1,#0x10]         ;207  ; g_u32loMonth
000038  6915              LDR      r5,[r2,#0x10]         ;208
00003a  06ad              LSLS     r5,r5,#26
00003c  0fad              LSRS     r5,r5,#30
00003e  614d              STR      r5,[r1,#0x14]         ;208  ; g_u32hiDay
000040  6915              LDR      r5,[r2,#0x10]         ;209
000042  072d              LSLS     r5,r5,#28             ;209
000044  0f2d              LSRS     r5,r5,#28             ;209
000046  618d              STR      r5,[r1,#0x18]         ;209  ; g_u32loDay
000048  68d5              LDR      r5,[r2,#0xc]          ;211
00004a  02ad              LSLS     r5,r5,#10
00004c  0fad              LSRS     r5,r5,#30
00004e  61cd              STR      r5,[r1,#0x1c]         ;211  ; g_u32hiHour
000050  68d5              LDR      r5,[r2,#0xc]          ;212
000052  032d              LSLS     r5,r5,#12
000054  0f2d              LSRS     r5,r5,#28
000056  620d              STR      r5,[r1,#0x20]         ;212  ; g_u32loHour
000058  68d5              LDR      r5,[r2,#0xc]          ;213
00005a  046d              LSLS     r5,r5,#17
00005c  0f6d              LSRS     r5,r5,#29
00005e  624d              STR      r5,[r1,#0x24]         ;213  ; g_u32hiMin
000060  68d5              LDR      r5,[r2,#0xc]          ;214
000062  052d              LSLS     r5,r5,#20
000064  0f2d              LSRS     r5,r5,#28
000066  628d              STR      r5,[r1,#0x28]         ;214  ; g_u32loMin
000068  68d5              LDR      r5,[r2,#0xc]          ;215
00006a  066d              LSLS     r5,r5,#25
00006c  0f6d              LSRS     r5,r5,#29
00006e  62cd              STR      r5,[r1,#0x2c]         ;215  ; g_u32hiSec
000070  68d2              LDR      r2,[r2,#0xc]          ;216
000072  0712              LSLS     r2,r2,#28             ;216
000074  0f12              LSRS     r2,r2,#28             ;216
000076  630a              STR      r2,[r1,#0x30]         ;216  ; g_u32loSec
000078  684a              LDR      r2,[r1,#4]            ;218  ; g_u32hiYear
00007a  250a              MOVS     r5,#0xa               ;218
00007c  436a              MULS     r2,r5,r2              ;218
00007e  688d              LDR      r5,[r1,#8]            ;219  ; g_u32loYear
000080  1952              ADDS     r2,r2,r5              ;219
000082  257d              MOVS     r5,#0x7d              ;220
000084  012d              LSLS     r5,r5,#4              ;220
000086  1952              ADDS     r2,r2,r5              ;220
000088  6002              STR      r2,[r0,#0]            ;222
00008a  68ca              LDR      r2,[r1,#0xc]          ;222  ; g_u32hiMonth
00008c  250a              MOVS     r5,#0xa               ;222
00008e  436a              MULS     r2,r5,r2              ;222
000090  690d              LDR      r5,[r1,#0x10]         ;223  ; g_u32loMonth
000092  1952              ADDS     r2,r2,r5              ;223
000094  6042              STR      r2,[r0,#4]            ;225
000096  694a              LDR      r2,[r1,#0x14]         ;225  ; g_u32hiDay
000098  250a              MOVS     r5,#0xa               ;225
00009a  436a              MULS     r2,r5,r2              ;225
00009c  698d              LDR      r5,[r1,#0x18]         ;226  ; g_u32loDay
00009e  1952              ADDS     r2,r2,r5              ;226
0000a0  6082              STR      r2,[r0,#8]            ;228
0000a2  69ca              LDR      r2,[r1,#0x1c]         ;255  ; g_u32hiHour
0000a4  2b00              CMP      r3,#0                 ;228
0000a6  d004              BEQ      |L8.178|
0000a8  230a              MOVS     r3,#0xa               ;255
0000aa  435a              MULS     r2,r3,r2              ;255
0000ac  6a0b              LDR      r3,[r1,#0x20]         ;256  ; g_u32loHour
0000ae  18d2              ADDS     r2,r2,r3              ;256
0000b0  e009              B        |L8.198|
                  |L8.178|
0000b2  230a              MOVS     r3,#0xa               ;230
0000b4  435a              MULS     r2,r3,r2              ;230
0000b6  6a0b              LDR      r3,[r1,#0x20]         ;231  ; g_u32loHour
0000b8  18d2              ADDS     r2,r2,r3              ;231
0000ba  6102              STR      r2,[r0,#0x10]         ;234
0000bc  2a15              CMP      r2,#0x15              ;234
0000be  d304              BCC      |L8.202|
0000c0  2302              MOVS     r3,#2                 ;236
0000c2  3a14              SUBS     r2,r2,#0x14           ;236
0000c4  6203              STR      r3,[r0,#0x20]         ;236
                  |L8.198|
0000c6  6102              STR      r2,[r0,#0x10]         ;257
0000c8  e000              B        |L8.204|
                  |L8.202|
0000ca  6204              STR      r4,[r0,#0x20]         ;241
                  |L8.204|
0000cc  6a4a              LDR      r2,[r1,#0x24]         ;244  ; g_u32hiMin
0000ce  230a              MOVS     r3,#0xa               ;244
0000d0  435a              MULS     r2,r3,r2              ;244
0000d2  6a8b              LDR      r3,[r1,#0x28]         ;245  ; g_u32loMin
0000d4  18d2              ADDS     r2,r2,r3              ;245
0000d6  6142              STR      r2,[r0,#0x14]         ;248
0000d8  6aca              LDR      r2,[r1,#0x2c]         ;248  ; g_u32hiSec
0000da  230a              MOVS     r3,#0xa               ;248
0000dc  6b09              LDR      r1,[r1,#0x30]         ;249  ; g_u32loSec
0000de  435a              MULS     r2,r3,r2              ;248
0000e0  1851              ADDS     r1,r2,r1              ;249
0000e2  6181              STR      r1,[r0,#0x18]         ;250
0000e4  bd30              POP      {r4,r5,pc}
;;;269    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L8.232|
                          DCD      0x40008000
                  |L8.236|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  RTC_GetDayOfWeek PROC
;;;732     */
;;;733    uint32_t RTC_GetDayOfWeek(void)
000000  4802              LDR      r0,|L9.12|
;;;734    {
;;;735        return (RTC->DWR & RTC_DWR_DWR_Msk);
000002  6980              LDR      r0,[r0,#0x18]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;736    }
000008  4770              BX       lr
;;;737    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40008000

                          AREA ||i.RTC_Open||, CODE, READONLY, ALIGN=2

                  RTC_Open PROC
;;;99      */
;;;100    void RTC_Open (S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102        uint32_t u32Reg;
;;;103    
;;;104        volatile int32_t i32delay=1000;
000004  207d              MOVS     r0,#0x7d
000006  00c0              LSLS     r0,r0,#3
;;;105    
;;;106        RTC->INIR = RTC_INIT_KEY;
000008  9000              STR      r0,[sp,#0]
00000a  4e38              LDR      r6,|L10.236|
00000c  4836              LDR      r0,|L10.232|
00000e  6030              STR      r0,[r6,#0]
;;;107    
;;;108        if(RTC->INIR != 0x1)
000010  6831              LDR      r1,[r6,#0]
000012  2901              CMP      r1,#1
000014  d003              BEQ      |L10.30|
;;;109        {
;;;110            RTC->INIR = RTC_INIT_KEY;
000016  6030              STR      r0,[r6,#0]
                  |L10.24|
;;;111    
;;;112            while(RTC->INIR != 0x1);
000018  6830              LDR      r0,[r6,#0]
00001a  2801              CMP      r0,#1
00001c  d1fc              BNE      |L10.24|
                  |L10.30|
;;;113        }
;;;114    
;;;115        if(sPt == NULL)
00001e  2c00              CMP      r4,#0
000020  d051              BEQ      |L10.198|
;;;116            return;
;;;117    
;;;118        /*-----------------------------------------------------------------------------------------------------*/
;;;119        /* Second, set RTC 24/12 hour setting                                                                  */
;;;120        /*-----------------------------------------------------------------------------------------------------*/
;;;121        if (sPt->u32TimeScale == RTC_CLOCK_12)
000022  69e0              LDR      r0,[r4,#0x1c]
;;;122        {
;;;123            RTC->AER = RTC_WRITE_KEY;
000024  4d32              LDR      r5,|L10.240|
000026  2800              CMP      r0,#0                 ;121
000028  d04e              BEQ      |L10.200|
                  |L10.42|
;;;124            while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
;;;125            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;126    
;;;127            /*-------------------------------------------------------------------------------------------------*/
;;;128            /* important, range of 12-hour PM mode is 21 upto 32                                               */
;;;129            /*-------------------------------------------------------------------------------------------------*/
;;;130            if (sPt->u32AmPm == RTC_PM)
;;;131                sPt->u32Hour += 20;
;;;132        }
;;;133        else
;;;134        {
;;;135            RTC->AER = RTC_WRITE_KEY;
00002a  6075              STR      r5,[r6,#4]
;;;136            while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00002c  6870              LDR      r0,[r6,#4]
00002e  03c0              LSLS     r0,r0,#15
000030  d5fb              BPL      |L10.42|
;;;137            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000032  6970              LDR      r0,[r6,#0x14]
000034  2101              MOVS     r1,#1
000036  4308              ORRS     r0,r0,r1
000038  6170              STR      r0,[r6,#0x14]
                  |L10.58|
;;;138        }
;;;139    
;;;140        /*-----------------------------------------------------------------------------------------------------*/
;;;141        /* Set RTC Calender Loading                                                                            */
;;;142        /*-----------------------------------------------------------------------------------------------------*/
;;;143        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00003a  207d              MOVS     r0,#0x7d
00003c  6821              LDR      r1,[r4,#0]
00003e  0100              LSLS     r0,r0,#4
000040  1a08              SUBS     r0,r1,r0
000042  210a              MOVS     r1,#0xa
000044  f7fffffe          BL       __aeabi_uidivmod
;;;144        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000048  040f              LSLS     r7,r1,#16
00004a  0500              LSLS     r0,r0,#20             ;143
00004c  4307              ORRS     r7,r7,r0
;;;145        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00004e  210a              MOVS     r1,#0xa
000050  6860              LDR      r0,[r4,#4]
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0300              LSLS     r0,r0,#12
000058  4338              ORRS     r0,r0,r7
;;;146        u32Reg    |= ((sPt->u32Month  % 10) << 8);
00005a  020f              LSLS     r7,r1,#8
00005c  4307              ORRS     r7,r7,r0
;;;147        u32Reg    |= ((sPt->u32Day    / 10) << 4);
00005e  210a              MOVS     r1,#0xa
000060  68a0              LDR      r0,[r4,#8]
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0100              LSLS     r0,r0,#4
000068  4338              ORRS     r0,r0,r7
;;;148        u32Reg    |= (sPt->u32Day     % 10);
;;;149        g_u32Reg = u32Reg;
00006a  4f22              LDR      r7,|L10.244|
00006c  4301              ORRS     r1,r1,r0              ;148
00006e  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;150    
;;;151        RTC->AER = RTC_WRITE_KEY;
000070  481f              LDR      r0,|L10.240|
000072  6070              STR      r0,[r6,#4]
                  |L10.116|
;;;152        while(!(RTC->AER & RTC_AER_ENF_Msk));
000074  6870              LDR      r0,[r6,#4]
000076  03c0              LSLS     r0,r0,#15
000078  d5fc              BPL      |L10.116|
;;;153    
;;;154        RTC->CLR = (uint32_t)g_u32Reg;
00007a  6838              LDR      r0,[r7,#0]  ; g_u32Reg
00007c  6130              STR      r0,[r6,#0x10]
;;;155    
;;;156        /*-----------------------------------------------------------------------------------------------------*/
;;;157        /* Set RTC Time Loading                                                                                */
;;;158        /*-----------------------------------------------------------------------------------------------------*/
;;;159        u32Reg     = ((sPt->u32Hour / 10) << 20);
00007e  210a              MOVS     r1,#0xa
000080  6920              LDR      r0,[r4,#0x10]
000082  f7fffffe          BL       __aeabi_uidivmod
;;;160        u32Reg    |= ((sPt->u32Hour % 10) << 16);
000086  040d              LSLS     r5,r1,#16
000088  0500              LSLS     r0,r0,#20             ;159
00008a  4305              ORRS     r5,r5,r0
;;;161        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00008c  210a              MOVS     r1,#0xa
00008e  6960              LDR      r0,[r4,#0x14]
000090  f7fffffe          BL       __aeabi_uidivmod
000094  0300              LSLS     r0,r0,#12
000096  4328              ORRS     r0,r0,r5
;;;162        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000098  020d              LSLS     r5,r1,#8
00009a  4305              ORRS     r5,r5,r0
;;;163        u32Reg    |= ((sPt->u32Second / 10) << 4);
00009c  210a              MOVS     r1,#0xa
00009e  69a0              LDR      r0,[r4,#0x18]
0000a0  f7fffffe          BL       __aeabi_uidivmod
0000a4  0100              LSLS     r0,r0,#4
0000a6  4328              ORRS     r0,r0,r5
;;;164        u32Reg    |= (sPt->u32Second % 10);
0000a8  4301              ORRS     r1,r1,r0
;;;165        g_u32Reg = u32Reg;
0000aa  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;166    
;;;167        RTC->AER = RTC_WRITE_KEY;
0000ac  4810              LDR      r0,|L10.240|
0000ae  6070              STR      r0,[r6,#4]
                  |L10.176|
;;;168        while(!(RTC->AER & RTC_AER_ENF_Msk));
0000b0  6870              LDR      r0,[r6,#4]
0000b2  03c0              LSLS     r0,r0,#15
0000b4  d5fc              BPL      |L10.176|
;;;169    
;;;170        RTC->TLR = (uint32_t)g_u32Reg;
0000b6  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000b8  60f0              STR      r0,[r6,#0xc]
;;;171    
;;;172        RTC->DWR = sPt->u32DayOfWeek;
0000ba  68e0              LDR      r0,[r4,#0xc]
0000bc  61b0              STR      r0,[r6,#0x18]
                  |L10.190|
;;;173    
;;;174        /* Waiting for RTC settings stable */
;;;175        while(i32delay--);
0000be  9800              LDR      r0,[sp,#0]
0000c0  1e41              SUBS     r1,r0,#1
0000c2  9100              STR      r1,[sp,#0]
0000c4  d2fb              BCS      |L10.190|
                  |L10.198|
;;;176    
;;;177    }
0000c6  bdf8              POP      {r3-r7,pc}
                  |L10.200|
0000c8  6075              STR      r5,[r6,#4]            ;123
0000ca  6870              LDR      r0,[r6,#4]            ;124
0000cc  03c0              LSLS     r0,r0,#15             ;124
0000ce  d5fb              BPL      |L10.200|
0000d0  6970              LDR      r0,[r6,#0x14]         ;125
0000d2  0840              LSRS     r0,r0,#1              ;125
0000d4  0040              LSLS     r0,r0,#1              ;125
0000d6  6170              STR      r0,[r6,#0x14]         ;125
0000d8  6a20              LDR      r0,[r4,#0x20]         ;130
0000da  2802              CMP      r0,#2                 ;130
0000dc  d1ad              BNE      |L10.58|
0000de  6920              LDR      r0,[r4,#0x10]         ;131
0000e0  3014              ADDS     r0,r0,#0x14           ;131
0000e2  6120              STR      r0,[r4,#0x10]         ;131
0000e4  e7a9              B        |L10.58|
;;;178    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L10.232|
                          DCD      0xa5eb1357
                  |L10.236|
                          DCD      0x40008000
                  |L10.240|
                          DCD      0x0000a965
                  |L10.244|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmDate||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDate PROC
;;;612     */
;;;613    void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day)
000000  b5f8              PUSH     {r3-r7,lr}
;;;614    {
;;;615        __IO uint32_t u32Reg;
;;;616    
;;;617        RTC->AER = RTC_WRITE_KEY;
000002  4d19              LDR      r5,|L11.104|
000004  4c19              LDR      r4,|L11.108|
000006  4616              MOV      r6,r2                 ;614
000008  460f              MOV      r7,r1                 ;614
                  |L11.10|
;;;618        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000a  6065              STR      r5,[r4,#4]
00000c  6861              LDR      r1,[r4,#4]
00000e  03c9              LSLS     r1,r1,#15
000010  d5fb              BPL      |L11.10|
;;;619    
;;;620        u32Reg       = ((u32Year - RTC_YEAR2000) / 10) << 20;
000012  227d              MOVS     r2,#0x7d
000014  0112              LSLS     r2,r2,#4
000016  210a              MOVS     r1,#0xa
000018  1a80              SUBS     r0,r0,r2
00001a  f7fffffe          BL       __aeabi_uidivmod
00001e  0500              LSLS     r0,r0,#20
;;;621        u32Reg      |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000020  9000              STR      r0,[sp,#0]
000022  0408              LSLS     r0,r1,#16
000024  9900              LDR      r1,[sp,#0]
000026  4308              ORRS     r0,r0,r1
;;;622        u32Reg      |= ((u32Month  / 10) << 12);
000028  9000              STR      r0,[sp,#0]
00002a  210a              MOVS     r1,#0xa
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  9a00              LDR      r2,[sp,#0]
000034  0300              LSLS     r0,r0,#12
000036  4310              ORRS     r0,r0,r2
;;;623        u32Reg      |= ((u32Month  % 10) << 8);
000038  9000              STR      r0,[sp,#0]
00003a  0208              LSLS     r0,r1,#8
00003c  9900              LDR      r1,[sp,#0]
00003e  4308              ORRS     r0,r0,r1
;;;624        u32Reg      |= ((u32Day    / 10) << 4);
000040  9000              STR      r0,[sp,#0]
000042  210a              MOVS     r1,#0xa
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  9a00              LDR      r2,[sp,#0]
00004c  0100              LSLS     r0,r0,#4
00004e  4310              ORRS     r0,r0,r2
;;;625        u32Reg      |=  (u32Day    % 10);
000050  4301              ORRS     r1,r1,r0
;;;626        g_u32Reg   = u32Reg;
000052  4608              MOV      r0,r1
000054  9100              STR      r1,[sp,#0]
000056  4906              LDR      r1,|L11.112|
000058  6008              STR      r0,[r1,#0]  ; g_u32Reg
                  |L11.90|
;;;627    
;;;628        RTC->AER = RTC_WRITE_KEY;
;;;629        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00005a  6065              STR      r5,[r4,#4]
00005c  6860              LDR      r0,[r4,#4]
00005e  03c0              LSLS     r0,r0,#15
000060  d5fb              BPL      |L11.90|
;;;630    
;;;631        RTC->CAR = (uint32_t)g_u32Reg;
000062  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000064  6220              STR      r0,[r4,#0x20]
;;;632    
;;;633    }
000066  bdf8              POP      {r3-r7,pc}
;;;634    
                          ENDP

                  |L11.104|
                          DCD      0x0000a965
                  |L11.108|
                          DCD      0x40008000
                  |L11.112|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateAndTime PROC
;;;464     */
;;;465    void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;466    {
;;;467        uint32_t u32Reg;
;;;468    
;;;469        RTC->AER = RTC_WRITE_KEY;
000002  4e30              LDR      r6,|L12.196|
000004  4f2e              LDR      r7,|L12.192|
000006  4604              MOV      r4,r0                 ;466
000008  6077              STR      r7,[r6,#4]
                  |L12.10|
;;;470        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000a  6870              LDR      r0,[r6,#4]
00000c  03c0              LSLS     r0,r0,#15
00000e  d5fc              BPL      |L12.10|
;;;471    
;;;472        if (sPt->u32TimeScale == RTC_CLOCK_12)
000010  69e0              LDR      r0,[r4,#0x1c]
000012  2800              CMP      r0,#0
;;;473        {
;;;474            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;475    
;;;476            /*-----------------------------------------------------------------------------------------*/
;;;477            /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;478            /*-----------------------------------------------------------------------------------------*/
;;;479            if (sPt->u32AmPm == RTC_PM)
;;;480                sPt->u32Hour += 20;
;;;481        }
;;;482        else
;;;483        {
;;;484            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000014  6970              LDR      r0,[r6,#0x14]
000016  d048              BEQ      |L12.170|
000018  2101              MOVS     r1,#1
00001a  4308              ORRS     r0,r0,r1
00001c  6170              STR      r0,[r6,#0x14]
                  |L12.30|
;;;485        }
;;;486    
;;;487        RTC->DWR = sPt->u32DayOfWeek & RTC_DWR_DWR_Msk;
00001e  7b20              LDRB     r0,[r4,#0xc]
000020  0740              LSLS     r0,r0,#29
000022  0f40              LSRS     r0,r0,#29
000024  61b0              STR      r0,[r6,#0x18]
;;;488    
;;;489    
;;;490        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000026  207d              MOVS     r0,#0x7d
000028  6821              LDR      r1,[r4,#0]
00002a  0100              LSLS     r0,r0,#4
00002c  1a08              SUBS     r0,r1,r0
00002e  210a              MOVS     r1,#0xa
000030  f7fffffe          BL       __aeabi_uidivmod
;;;491        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000034  040d              LSLS     r5,r1,#16
000036  0500              LSLS     r0,r0,#20             ;490
000038  4305              ORRS     r5,r5,r0
;;;492        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00003a  210a              MOVS     r1,#0xa
00003c  6860              LDR      r0,[r4,#4]
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0300              LSLS     r0,r0,#12
000044  4328              ORRS     r0,r0,r5
;;;493        u32Reg    |= ((sPt->u32Month  % 10) << 8);
000046  020d              LSLS     r5,r1,#8
000048  4305              ORRS     r5,r5,r0
;;;494        u32Reg    |= ((sPt->u32Day     / 10) << 4);
00004a  210a              MOVS     r1,#0xa
00004c  68a0              LDR      r0,[r4,#8]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0100              LSLS     r0,r0,#4
000054  4328              ORRS     r0,r0,r5
;;;495        u32Reg    |=  (sPt->u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;496        g_u32Reg   = u32Reg;
000058  481b              LDR      r0,|L12.200|
00005a  6001              STR      r1,[r0,#0]  ; g_u32Reg
;;;497    
;;;498        RTC->AER = RTC_WRITE_KEY;
00005c  4918              LDR      r1,|L12.192|
00005e  6071              STR      r1,[r6,#4]
                  |L12.96|
;;;499        while(!(RTC->AER & RTC_AER_ENF_Msk));
000060  6871              LDR      r1,[r6,#4]
000062  03c9              LSLS     r1,r1,#15
000064  d5fc              BPL      |L12.96|
;;;500    
;;;501        RTC->CAR = (uint32_t)g_u32Reg;
000066  4607              MOV      r7,r0
000068  6800              LDR      r0,[r0,#0]  ; g_u32Reg
00006a  6230              STR      r0,[r6,#0x20]
;;;502    
;;;503        u32Reg     = ((sPt->u32Hour   / 10) << 20);
00006c  210a              MOVS     r1,#0xa
00006e  6920              LDR      r0,[r4,#0x10]
000070  f7fffffe          BL       __aeabi_uidivmod
;;;504        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
000074  040d              LSLS     r5,r1,#16
000076  0500              LSLS     r0,r0,#20             ;503
000078  4305              ORRS     r5,r5,r0
;;;505        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00007a  210a              MOVS     r1,#0xa
00007c  6960              LDR      r0,[r4,#0x14]
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  0300              LSLS     r0,r0,#12
000084  4328              ORRS     r0,r0,r5
;;;506        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000086  020d              LSLS     r5,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;507        u32Reg    |= ((sPt->u32Second / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4328              ORRS     r0,r0,r5
;;;508        u32Reg    |=  (sPt->u32Second % 10);
000096  4301              ORRS     r1,r1,r0
;;;509        g_u32Reg = u32Reg;
000098  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;510    
;;;511        RTC->AER = RTC_WRITE_KEY;
00009a  4809              LDR      r0,|L12.192|
00009c  6070              STR      r0,[r6,#4]
                  |L12.158|
;;;512        while(!(RTC->AER & RTC_AER_ENF_Msk));
00009e  6870              LDR      r0,[r6,#4]
0000a0  03c0              LSLS     r0,r0,#15
0000a2  d5fc              BPL      |L12.158|
;;;513    
;;;514        RTC->TAR = (uint32_t)g_u32Reg;
0000a4  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000a6  61f0              STR      r0,[r6,#0x1c]
;;;515    
;;;516    }
0000a8  bdf8              POP      {r3-r7,pc}
                  |L12.170|
0000aa  0840              LSRS     r0,r0,#1              ;474
0000ac  0040              LSLS     r0,r0,#1              ;474
0000ae  6170              STR      r0,[r6,#0x14]         ;474
0000b0  6a20              LDR      r0,[r4,#0x20]         ;479
0000b2  2802              CMP      r0,#2                 ;479
0000b4  d1b3              BNE      |L12.30|
0000b6  6920              LDR      r0,[r4,#0x10]         ;480
0000b8  3014              ADDS     r0,r0,#0x14           ;480
0000ba  6120              STR      r0,[r4,#0x10]         ;480
0000bc  e7af              B        |L12.30|
;;;517    
                          ENDP

0000be  0000              DCW      0x0000
                  |L12.192|
                          DCD      0x0000a965
                  |L12.196|
                          DCD      0x40008000
                  |L12.200|
                          DCD      ||.data||

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;646     */
;;;647    void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;648    {
000002  460e              MOV      r6,r1
;;;649        __IO uint32_t u32Reg;
;;;650    
;;;651        RTC->AER = RTC_WRITE_KEY;
000004  4d20              LDR      r5,|L13.136|
000006  4c21              LDR      r4,|L13.140|
000008  9906              LDR      r1,[sp,#0x18]
00000a  4617              MOV      r7,r2                 ;648
                  |L13.12|
;;;652        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000c  6065              STR      r5,[r4,#4]
00000e  6862              LDR      r2,[r4,#4]
000010  03d2              LSLS     r2,r2,#15
000012  d5fb              BPL      |L13.12|
;;;653    
;;;654        if (u32TimeMode == RTC_CLOCK_12)
000014  2b00              CMP      r3,#0
000016  d002              BEQ      |L13.30|
;;;655        {
;;;656            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;657    
;;;658            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 upto 32 */
;;;659                u32Hour += 20;
;;;660        }
;;;661        else if(u32TimeMode == RTC_CLOCK_24)
000018  2b01              CMP      r3,#1
00001a  d008              BEQ      |L13.46|
00001c  e00b              B        |L13.54|
                  |L13.30|
00001e  6962              LDR      r2,[r4,#0x14]         ;656
000020  0852              LSRS     r2,r2,#1              ;656
000022  0052              LSLS     r2,r2,#1              ;656
000024  6162              STR      r2,[r4,#0x14]         ;656
000026  2902              CMP      r1,#2                 ;658
000028  d105              BNE      |L13.54|
00002a  3014              ADDS     r0,r0,#0x14           ;658
00002c  e003              B        |L13.54|
                  |L13.46|
;;;662        {
;;;663            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
00002e  6961              LDR      r1,[r4,#0x14]
000030  2201              MOVS     r2,#1
000032  4311              ORRS     r1,r1,r2
000034  6161              STR      r1,[r4,#0x14]
                  |L13.54|
;;;664        }
;;;665    
;;;666        u32Reg     = ((u32Hour   / 10) << 20);
000036  210a              MOVS     r1,#0xa
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  0500              LSLS     r0,r0,#20
;;;667        u32Reg    |= ((u32Hour   % 10) << 16);
00003e  9000              STR      r0,[sp,#0]
000040  0408              LSLS     r0,r1,#16
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;668        u32Reg    |= ((u32Minute / 10) << 12);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0300              LSLS     r0,r0,#12
000054  4310              ORRS     r0,r0,r2
;;;669        u32Reg    |= ((u32Minute % 10) <<  8);
000056  9000              STR      r0,[sp,#0]
000058  0208              LSLS     r0,r1,#8
00005a  9900              LDR      r1,[sp,#0]
00005c  4308              ORRS     r0,r0,r1
;;;670        u32Reg    |= ((u32Second / 10) <<  4);
00005e  9000              STR      r0,[sp,#0]
000060  210a              MOVS     r1,#0xa
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       __aeabi_uidivmod
000068  9a00              LDR      r2,[sp,#0]
00006a  0100              LSLS     r0,r0,#4
00006c  4310              ORRS     r0,r0,r2
;;;671        u32Reg    |=  (u32Second % 10);
00006e  4301              ORRS     r1,r1,r0
;;;672    
;;;673        g_u32Reg = u32Reg;
000070  4608              MOV      r0,r1
000072  9100              STR      r1,[sp,#0]
000074  4906              LDR      r1,|L13.144|
000076  6008              STR      r0,[r1,#0]  ; g_u32Reg
                  |L13.120|
;;;674    
;;;675        RTC->AER = RTC_WRITE_KEY;
;;;676        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000078  6065              STR      r5,[r4,#4]
00007a  6860              LDR      r0,[r4,#4]
00007c  03c0              LSLS     r0,r0,#15
00007e  d5fb              BPL      |L13.120|
;;;677    
;;;678        RTC->TAR = (uint32_t)g_u32Reg;
000080  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000082  61e0              STR      r0,[r4,#0x1c]
;;;679    
;;;680    }
000084  bdf8              POP      {r3-r7,pc}
;;;681    
                          ENDP

000086  0000              DCW      0x0000
                  |L13.136|
                          DCD      0x0000a965
                  |L13.140|
                          DCD      0x40008000
                  |L13.144|
                          DCD      ||.data||

                          AREA ||i.RTC_SetDate||, CODE, READONLY, ALIGN=2

                  RTC_SetDate PROC
;;;531     */
;;;532    void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek)
000000  b5f8              PUSH     {r3-r7,lr}
;;;533    {
;;;534        __IO uint32_t u32Reg;
;;;535    
;;;536        RTC->AER = RTC_WRITE_KEY;
000002  4c1b              LDR      r4,|L14.112|
000004  4d1b              LDR      r5,|L14.116|
000006  4616              MOV      r6,r2                 ;533
000008  460f              MOV      r7,r1                 ;533
                  |L14.10|
;;;537        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
00000a  606c              STR      r4,[r5,#4]
00000c  6869              LDR      r1,[r5,#4]
00000e  03c9              LSLS     r1,r1,#15
000010  d5fb              BPL      |L14.10|
;;;538    
;;;539        RTC->DWR = u32DayOfWeek & RTC_DWR_DWR_Msk;
000012  0759              LSLS     r1,r3,#29
000014  0f49              LSRS     r1,r1,#29
000016  61a9              STR      r1,[r5,#0x18]
;;;540    
;;;541        u32Reg     = ((u32Year - RTC_YEAR2000) / 10) << 20;
000018  227d              MOVS     r2,#0x7d
00001a  0112              LSLS     r2,r2,#4
00001c  210a              MOVS     r1,#0xa
00001e  1a80              SUBS     r0,r0,r2
000020  f7fffffe          BL       __aeabi_uidivmod
000024  0500              LSLS     r0,r0,#20
;;;542        u32Reg    |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000026  9000              STR      r0,[sp,#0]
000028  0408              LSLS     r0,r1,#16
00002a  9900              LDR      r1,[sp,#0]
00002c  4308              ORRS     r0,r0,r1
;;;543        u32Reg    |= ((u32Month  / 10) << 12);
00002e  9000              STR      r0,[sp,#0]
000030  210a              MOVS     r1,#0xa
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       __aeabi_uidivmod
000038  9a00              LDR      r2,[sp,#0]
00003a  0300              LSLS     r0,r0,#12
00003c  4310              ORRS     r0,r0,r2
;;;544        u32Reg    |= ((u32Month  % 10) << 8);
00003e  9000              STR      r0,[sp,#0]
000040  0208              LSLS     r0,r1,#8
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;545        u32Reg    |= ((u32Day    / 10) << 4);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0100              LSLS     r0,r0,#4
000054  4310              ORRS     r0,r0,r2
;;;546        u32Reg    |=  (u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;547        g_u32Reg   = u32Reg;
000058  4608              MOV      r0,r1
00005a  9100              STR      r1,[sp,#0]
00005c  4906              LDR      r1,|L14.120|
00005e  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;548    
;;;549        RTC->AER = RTC_WRITE_KEY;
000060  606c              STR      r4,[r5,#4]
                  |L14.98|
;;;550        while(!(RTC->AER & RTC_AER_ENF_Msk));
000062  6868              LDR      r0,[r5,#4]
000064  03c0              LSLS     r0,r0,#15
000066  d5fc              BPL      |L14.98|
;;;551    
;;;552        RTC->CLR = (uint32_t)g_u32Reg;
000068  6808              LDR      r0,[r1,#0]  ; g_u32Reg
00006a  6128              STR      r0,[r5,#0x10]
;;;553    
;;;554    }
00006c  bdf8              POP      {r3-r7,pc}
;;;555    
                          ENDP

00006e  0000              DCW      0x0000
                  |L14.112|
                          DCD      0x0000a965
                  |L14.116|
                          DCD      0x40008000
                  |L14.120|
                          DCD      ||.data||

                          AREA ||i.RTC_SetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetDateAndTime PROC
;;;392     */
;;;393    void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;394    {
;;;395        uint32_t u32Reg;
;;;396    
;;;397        RTC->AER = RTC_WRITE_KEY;
000002  4e30              LDR      r6,|L15.196|
000004  4f2e              LDR      r7,|L15.192|
000006  4604              MOV      r4,r0                 ;394
000008  6077              STR      r7,[r6,#4]
                  |L15.10|
;;;398        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000a  6870              LDR      r0,[r6,#4]
00000c  03c0              LSLS     r0,r0,#15
00000e  d5fc              BPL      |L15.10|
;;;399    
;;;400        if (sPt->u32TimeScale == RTC_CLOCK_12)
000010  69e0              LDR      r0,[r4,#0x1c]
000012  2800              CMP      r0,#0
;;;401        {
;;;402            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;403    
;;;404            /*-----------------------------------------------------------------------------------------*/
;;;405            /* important, range of 12-hour PM mode is 21 upto 32                                       */
;;;406            /*-----------------------------------------------------------------------------------------*/
;;;407            if (sPt->u32AmPm == RTC_PM)
;;;408                sPt->u32Hour += 20;
;;;409        }
;;;410        else
;;;411        {
;;;412            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000014  6970              LDR      r0,[r6,#0x14]
000016  d048              BEQ      |L15.170|
000018  2101              MOVS     r1,#1
00001a  4308              ORRS     r0,r0,r1
00001c  6170              STR      r0,[r6,#0x14]
                  |L15.30|
;;;413        }
;;;414    
;;;415        RTC->DWR = sPt->u32DayOfWeek & RTC_DWR_DWR_Msk;
00001e  7b20              LDRB     r0,[r4,#0xc]
000020  0740              LSLS     r0,r0,#29
000022  0f40              LSRS     r0,r0,#29
000024  61b0              STR      r0,[r6,#0x18]
;;;416    
;;;417        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000026  207d              MOVS     r0,#0x7d
000028  6821              LDR      r1,[r4,#0]
00002a  0100              LSLS     r0,r0,#4
00002c  1a08              SUBS     r0,r1,r0
00002e  210a              MOVS     r1,#0xa
000030  f7fffffe          BL       __aeabi_uidivmod
;;;418        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000034  040d              LSLS     r5,r1,#16
000036  0500              LSLS     r0,r0,#20             ;417
000038  4305              ORRS     r5,r5,r0
;;;419        u32Reg    |= ((sPt->u32Month  / 10) << 12);
00003a  210a              MOVS     r1,#0xa
00003c  6860              LDR      r0,[r4,#4]
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0300              LSLS     r0,r0,#12
000044  4328              ORRS     r0,r0,r5
;;;420        u32Reg    |= ((sPt->u32Month  % 10) << 8);
000046  020d              LSLS     r5,r1,#8
000048  4305              ORRS     r5,r5,r0
;;;421        u32Reg    |= ((sPt->u32Day    / 10) << 4);
00004a  210a              MOVS     r1,#0xa
00004c  68a0              LDR      r0,[r4,#8]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0100              LSLS     r0,r0,#4
000054  4328              ORRS     r0,r0,r5
;;;422        u32Reg    |=  (sPt->u32Day    % 10);
000056  4301              ORRS     r1,r1,r0
;;;423        g_u32Reg = u32Reg;
000058  481b              LDR      r0,|L15.200|
00005a  6001              STR      r1,[r0,#0]  ; g_u32Reg
;;;424    
;;;425        RTC->AER = RTC_WRITE_KEY;
00005c  4918              LDR      r1,|L15.192|
00005e  6071              STR      r1,[r6,#4]
                  |L15.96|
;;;426        while(!(RTC->AER & RTC_AER_ENF_Msk));
000060  6871              LDR      r1,[r6,#4]
000062  03c9              LSLS     r1,r1,#15
000064  d5fc              BPL      |L15.96|
;;;427    
;;;428        RTC->CLR = (uint32_t)g_u32Reg;
000066  4607              MOV      r7,r0
000068  6800              LDR      r0,[r0,#0]  ; g_u32Reg
00006a  6130              STR      r0,[r6,#0x10]
;;;429    
;;;430        u32Reg     = ((sPt->u32Hour   / 10) << 20);
00006c  210a              MOVS     r1,#0xa
00006e  6920              LDR      r0,[r4,#0x10]
000070  f7fffffe          BL       __aeabi_uidivmod
;;;431        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
000074  040d              LSLS     r5,r1,#16
000076  0500              LSLS     r0,r0,#20             ;430
000078  4305              ORRS     r5,r5,r0
;;;432        u32Reg    |= ((sPt->u32Minute / 10) << 12);
00007a  210a              MOVS     r1,#0xa
00007c  6960              LDR      r0,[r4,#0x14]
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  0300              LSLS     r0,r0,#12
000084  4328              ORRS     r0,r0,r5
;;;433        u32Reg    |= ((sPt->u32Minute % 10) << 8);
000086  020d              LSLS     r5,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;434        u32Reg    |= ((sPt->u32Second / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4328              ORRS     r0,r0,r5
;;;435        u32Reg    |=  (sPt->u32Second % 10);
000096  4301              ORRS     r1,r1,r0
;;;436        g_u32Reg = u32Reg;
000098  6039              STR      r1,[r7,#0]  ; g_u32Reg
;;;437    
;;;438        RTC->AER = RTC_WRITE_KEY;
00009a  4809              LDR      r0,|L15.192|
00009c  6070              STR      r0,[r6,#4]
                  |L15.158|
;;;439        while(!(RTC->AER & RTC_AER_ENF_Msk));
00009e  6870              LDR      r0,[r6,#4]
0000a0  03c0              LSLS     r0,r0,#15
0000a2  d5fc              BPL      |L15.158|
;;;440    
;;;441        RTC->TLR = (uint32_t)g_u32Reg;
0000a4  6838              LDR      r0,[r7,#0]  ; g_u32Reg
0000a6  60f0              STR      r0,[r6,#0xc]
;;;442    
;;;443    }
0000a8  bdf8              POP      {r3-r7,pc}
                  |L15.170|
0000aa  0840              LSRS     r0,r0,#1              ;402
0000ac  0040              LSLS     r0,r0,#1              ;402
0000ae  6170              STR      r0,[r6,#0x14]         ;402
0000b0  6a20              LDR      r0,[r4,#0x20]         ;407
0000b2  2802              CMP      r0,#2                 ;407
0000b4  d1b3              BNE      |L15.30|
0000b6  6920              LDR      r0,[r4,#0x10]         ;408
0000b8  3014              ADDS     r0,r0,#0x14           ;408
0000ba  6120              STR      r0,[r4,#0x10]         ;408
0000bc  e7af              B        |L15.30|
;;;444    
                          ENDP

0000be  0000              DCW      0x0000
                  |L15.192|
                          DCD      0x0000a965
                  |L15.196|
                          DCD      0x40008000
                  |L15.200|
                          DCD      ||.data||

                          AREA ||i.RTC_SetTickPeriod||, CODE, READONLY, ALIGN=2

                  RTC_SetTickPeriod PROC
;;;756     */
;;;757    void RTC_SetTickPeriod(uint32_t u32TickSelection)
000000  4a05              LDR      r2,|L16.24|
;;;758    {
;;;759        RTC->AER = RTC_WRITE_KEY;
000002  4906              LDR      r1,|L16.28|
                  |L16.4|
;;;760        while(!(RTC->AER & RTC_AER_ENF_Msk)) RTC->AER = RTC_WRITE_KEY;
000004  604a              STR      r2,[r1,#4]
000006  684b              LDR      r3,[r1,#4]
000008  03db              LSLS     r3,r3,#15
00000a  d5fb              BPL      |L16.4|
;;;761    
;;;762        RTC->TTR = RTC->TTR & ~RTC_TTR_TTR_Msk | u32TickSelection;
00000c  6b0a              LDR      r2,[r1,#0x30]
00000e  08d2              LSRS     r2,r2,#3
000010  00d2              LSLS     r2,r2,#3
000012  4302              ORRS     r2,r2,r0
000014  630a              STR      r2,[r1,#0x30]
;;;763    }
000016  4770              BX       lr
;;;764    
                          ENDP

                  |L16.24|
                          DCD      0x0000a965
                  |L16.28|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;567     */
;;;568    void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;569    {
000002  460f              MOV      r7,r1
;;;570        __IO uint32_t u32Reg;
;;;571    
;;;572        RTC->AER = RTC_WRITE_KEY;
000004  4c21              LDR      r4,|L17.140|
000006  4d20              LDR      r5,|L17.136|
000008  9906              LDR      r1,[sp,#0x18]
00000a  4616              MOV      r6,r2                 ;569
00000c  6065              STR      r5,[r4,#4]
                  |L17.14|
;;;573        while(!(RTC->AER & RTC_AER_ENF_Msk));
00000e  6862              LDR      r2,[r4,#4]
000010  03d2              LSLS     r2,r2,#15
000012  d5fc              BPL      |L17.14|
;;;574    
;;;575        if (u32TimeMode == RTC_CLOCK_12)
000014  2b00              CMP      r3,#0
000016  d002              BEQ      |L17.30|
;;;576        {
;;;577            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
;;;578    
;;;579            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 upto 32 */
;;;580                u32Hour += 20;
;;;581        }
;;;582        else if(u32TimeMode == RTC_CLOCK_24)
000018  2b01              CMP      r3,#1
00001a  d008              BEQ      |L17.46|
00001c  e00b              B        |L17.54|
                  |L17.30|
00001e  6962              LDR      r2,[r4,#0x14]         ;577
000020  0852              LSRS     r2,r2,#1              ;577
000022  0052              LSLS     r2,r2,#1              ;577
000024  6162              STR      r2,[r4,#0x14]         ;577
000026  2902              CMP      r1,#2                 ;579
000028  d105              BNE      |L17.54|
00002a  3014              ADDS     r0,r0,#0x14           ;579
00002c  e003              B        |L17.54|
                  |L17.46|
;;;583        {
;;;584            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
00002e  6961              LDR      r1,[r4,#0x14]
000030  2201              MOVS     r2,#1
000032  4311              ORRS     r1,r1,r2
000034  6161              STR      r1,[r4,#0x14]
                  |L17.54|
;;;585        }
;;;586    
;;;587        u32Reg     = ((u32Hour   / 10) << 20);
000036  210a              MOVS     r1,#0xa
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  0500              LSLS     r0,r0,#20
;;;588        u32Reg    |= ((u32Hour   % 10) << 16);
00003e  9000              STR      r0,[sp,#0]
000040  0408              LSLS     r0,r1,#16
000042  9900              LDR      r1,[sp,#0]
000044  4308              ORRS     r0,r0,r1
;;;589        u32Reg    |= ((u32Minute / 10) << 12);
000046  9000              STR      r0,[sp,#0]
000048  210a              MOVS     r1,#0xa
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  9a00              LDR      r2,[sp,#0]
000052  0300              LSLS     r0,r0,#12
000054  4310              ORRS     r0,r0,r2
;;;590        u32Reg    |= ((u32Minute % 10) << 8);
000056  9000              STR      r0,[sp,#0]
000058  0208              LSLS     r0,r1,#8
00005a  9900              LDR      r1,[sp,#0]
00005c  4308              ORRS     r0,r0,r1
;;;591        u32Reg    |= ((u32Second / 10) << 4);
00005e  9000              STR      r0,[sp,#0]
000060  210a              MOVS     r1,#0xa
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       __aeabi_uidivmod
000068  9a00              LDR      r2,[sp,#0]
00006a  0100              LSLS     r0,r0,#4
00006c  4310              ORRS     r0,r0,r2
;;;592        u32Reg    |=  (u32Second % 10);
00006e  4301              ORRS     r1,r1,r0
;;;593    
;;;594        g_u32Reg = u32Reg;
000070  4608              MOV      r0,r1
000072  9100              STR      r1,[sp,#0]
000074  4906              LDR      r1,|L17.144|
000076  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;595    
;;;596        RTC->AER = RTC_WRITE_KEY;
000078  6065              STR      r5,[r4,#4]
                  |L17.122|
;;;597        while(!(RTC->AER & RTC_AER_ENF_Msk));
00007a  6860              LDR      r0,[r4,#4]
00007c  03c0              LSLS     r0,r0,#15
00007e  d5fc              BPL      |L17.122|
;;;598    
;;;599        RTC->TLR = (uint32_t)g_u32Reg;
000080  6808              LDR      r0,[r1,#0]  ; g_u32Reg
000082  60e0              STR      r0,[r4,#0xc]
;;;600    
;;;601    }
000084  bdf8              POP      {r3-r7,pc}
;;;602    
                          ENDP

000086  0000              DCW      0x0000
                  |L17.136|
                          DCD      0x0000a965
                  |L17.140|
                          DCD      0x40008000
                  |L17.144|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32Reg
                          DCD      0x00000000
                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_f2e3968a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REVSH|
#line 402
|__asm___5_rtc_c_f2e3968a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
