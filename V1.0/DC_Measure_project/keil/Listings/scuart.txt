; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\scuart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\scuart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\scuart.crf ..\..\Library\StdDriver\src\scuart.c]
                          THUMB

                          AREA ||i.SCUART_Close||, CODE, READONLY, ALIGN=1

                  SCUART_Close PROC
;;;31       */
;;;32     void SCUART_Close(SC_T* sc)
000000  2100              MOVS     r1,#0
;;;33     {
;;;34         sc->IER = 0;
000002  6181              STR      r1,[r0,#0x18]
;;;35         sc->UACTL = 0;
000004  6341              STR      r1,[r0,#0x34]
;;;36         sc->CTL = 0;
000006  6041              STR      r1,[r0,#4]
;;;37     
;;;38     }
000008  4770              BX       lr
;;;39     
                          ENDP


                          AREA ||i.SCUART_GetClock||, CODE, READONLY, ALIGN=2

                  SCUART_GetClock PROC
;;;45       */
;;;46     static uint32_t SCUART_GetClock(SC_T *sc)
000000  b570              PUSH     {r4-r6,lr}
;;;47     {
;;;48         uint32_t u32ClkSrc = (CLK->CLKSEL2 & CLK_CLKSEL2_SC_S_Msk) >> CLK_CLKSEL2_SC_S_Pos;
000002  4c0f              LDR      r4,|L2.64|
000004  4605              MOV      r5,r0                 ;47
000006  69a0              LDR      r0,[r4,#0x18]
;;;49         uint32_t u32Clk;
;;;50     
;;;51         // Get smartcard module clock
;;;52         if(u32ClkSrc == 0)
;;;53             u32Clk = __HXT;
;;;54         else if(u32ClkSrc == 1)
;;;55             u32Clk = CLK_GetPLLClockFreq();
;;;56         else
;;;57             u32Clk = __HIRC12M;
;;;58     
;;;59         if(sc == SC0)
;;;60             u32Clk /= ((CLK->CLKDIV0 & CLK_CLKDIV0_SC0_N_Msk) >> CLK_CLKDIV0_SC0_N_Pos) + 1;
;;;61         else if(sc == SC1)
;;;62             u32Clk /= (CLK->CLKDIV1 & CLK_CLKDIV1_SC1_N_Msk) + 1;
;;;63         else // SC2
;;;64             u32Clk /= ((CLK->CLKDIV1 & CLK_CLKDIV1_SC2_N_Msk) >> CLK_CLKDIV1_SC2_N_Pos) + 1;
;;;65     
;;;66         return u32Clk;
;;;67     }
000008  0c80              LSRS     r0,r0,#18
00000a  0781              LSLS     r1,r0,#30
00000c  480d              LDR      r0,|L2.68|
00000e  0f89              LSRS     r1,r1,#30
000010  d003              BEQ      |L2.26|
000012  2901              CMP      r1,#1                 ;54
000014  d101              BNE      |L2.26|
000016  f7fffffe          BL       CLK_GetPLLClockFreq
                  |L2.26|
00001a  490b              LDR      r1,|L2.72|
00001c  428d              CMP      r5,r1                 ;59
00001e  d102              BNE      |L2.38|
000020  69e1              LDR      r1,[r4,#0x1c]         ;60
000022  0f09              LSRS     r1,r1,#28             ;60
000024  e008              B        |L2.56|
                  |L2.38|
000026  4909              LDR      r1,|L2.76|
000028  428d              CMP      r5,r1                 ;61
00002a  6a21              LDR      r1,[r4,#0x20]         ;64
00002c  d102              BNE      |L2.52|
00002e  0709              LSLS     r1,r1,#28             ;62
000030  0f09              LSRS     r1,r1,#28             ;62
000032  e001              B        |L2.56|
                  |L2.52|
000034  0609              LSLS     r1,r1,#24             ;64
000036  0f09              LSRS     r1,r1,#28             ;64
                  |L2.56|
000038  1c49              ADDS     r1,r1,#1              ;64
00003a  f7fffffe          BL       __aeabi_uidivmod
00003e  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP

                  |L2.64|
                          DCD      0x50000200
                  |L2.68|
                          DCD      0x00b71b00
                  |L2.72|
                          DCD      0x40190000
                  |L2.76|
                          DCD      0x401b0000

                          AREA ||i.SCUART_Open||, CODE, READONLY, ALIGN=2

                  SCUART_Open PROC
;;;84       */
;;;85     uint32_t SCUART_Open(SC_T* sc, uint32_t u32baudrate)
000000  b570              PUSH     {r4-r6,lr}
;;;86     {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;87         uint32_t u32Clk = SCUART_GetClock(sc), u32Div;
000006  f7fffffe          BL       SCUART_GetClock
00000a  4605              MOV      r5,r0
;;;88     
;;;89         // Calculate divider for target baudrate
;;;90         u32Div = (u32Clk + (u32baudrate >> 1) - 1) / u32baudrate - 1;
00000c  0870              LSRS     r0,r6,#1
00000e  1940              ADDS     r0,r0,r5
000010  4631              MOV      r1,r6
000012  1e40              SUBS     r0,r0,#1
000014  f7fffffe          BL       __aeabi_uidivmod
;;;91     
;;;92         sc->CTL = SC_CTL_SC_CEN_Msk | SC_CTL_SLEN_Msk;  // Enable smartcard interface and stop bit = 1
000018  4905              LDR      r1,|L3.48|
00001a  6061              STR      r1,[r4,#4]
;;;93         sc->UACTL = SCUART_CHAR_LEN_8 | SCUART_PARITY_NONE | SC_UACTL_UA_MODE_EN_Msk; // Enable UART mode, disable parity and 8 bit per character
00001c  2141              MOVS     r1,#0x41
00001e  6361              STR      r1,[r4,#0x34]
000020  1e40              SUBS     r0,r0,#1
;;;94         sc->ETUCR = u32Div;
000022  6160              STR      r0,[r4,#0x14]
;;;95     
;;;96         return(u32Clk / (u32Div + 1));
000024  1c41              ADDS     r1,r0,#1
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       __aeabi_uidivmod
;;;97     }
00002c  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x00008001

                          AREA ||i.SCUART_Read||, CODE, READONLY, ALIGN=1

                  SCUART_Read PROC
;;;106      */
;;;107    uint32_t SCUART_Read(SC_T* sc, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b510              PUSH     {r4,lr}
;;;108    {
000002  4603              MOV      r3,r0
;;;109        uint32_t u32Count;
;;;110    
;;;111        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
000006  e005              B        |L4.20|
                  |L4.8|
;;;112        {
;;;113            if(SCUART_GET_RX_EMPTY(sc))   // no data available
000008  6a1c              LDR      r4,[r3,#0x20]
00000a  07a4              LSLS     r4,r4,#30
00000c  d404              BMI      |L4.24|
;;;114            {
;;;115                break;
;;;116            }
;;;117            pu8RxBuf[u32Count] = SCUART_READ(sc);    // get data from FIFO
00000e  681c              LDR      r4,[r3,#0]
000010  540c              STRB     r4,[r1,r0]
000012  1c40              ADDS     r0,r0,#1
                  |L4.20|
000014  4290              CMP      r0,r2                 ;111
000016  d3f7              BCC      |L4.8|
                  |L4.24|
;;;118        }
;;;119    
;;;120        return u32Count;
;;;121    }
000018  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.SCUART_SetLineConfig||, CODE, READONLY, ALIGN=1

                  SCUART_SetLineConfig PROC
;;;146      */
;;;147    uint32_t SCUART_SetLineConfig(SC_T* sc, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t  u32StopBits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;148    {
000002  b081              SUB      sp,sp,#4
000004  461e              MOV      r6,r3
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;149    
;;;150        uint32_t u32Clk = SCUART_GetClock(sc), u32Div;
00000a  f7fffffe          BL       SCUART_GetClock
00000e  4605              MOV      r5,r0
;;;151    
;;;152        if(u32Baudrate == 0)    // keep original baudrate setting
000010  2f00              CMP      r7,#0
000012  d015              BEQ      |L5.64|
;;;153        {
;;;154            u32Div = sc->ETUCR & SC_ETUCR_ETU_RDIV_Msk;
;;;155        }
;;;156        else
;;;157        {
;;;158            // Calculate divider for target baudrate
;;;159            u32Div = (u32Clk + (u32Baudrate >> 1) - 1)/ u32Baudrate - 1;
000014  0878              LSRS     r0,r7,#1
000016  1940              ADDS     r0,r0,r5
000018  4639              MOV      r1,r7
00001a  1e40              SUBS     r0,r0,#1
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  1e40              SUBS     r0,r0,#1
;;;160            sc->ETUCR = u32Div;
000022  6160              STR      r0,[r4,#0x14]
                  |L5.36|
;;;161        }
;;;162    
;;;163        sc->CTL = u32StopBits | SC_CTL_SC_CEN_Msk;  // Set stop bit
000024  990a              LDR      r1,[sp,#0x28]
000026  2201              MOVS     r2,#1
000028  4311              ORRS     r1,r1,r2
00002a  6061              STR      r1,[r4,#4]
;;;164        sc->UACTL = u32Parity | u32DataWidth | SC_UACTL_UA_MODE_EN_Msk;  // Set character width and parity
00002c  9903              LDR      r1,[sp,#0xc]
00002e  430e              ORRS     r6,r6,r1
000030  4316              ORRS     r6,r6,r2
000032  6366              STR      r6,[r4,#0x34]
;;;165    
;;;166        return(u32Clk / (u32Div + 1));
000034  1c41              ADDS     r1,r0,#1
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       __aeabi_uidivmod
;;;167    }
00003c  b005              ADD      sp,sp,#0x14
00003e  bdf0              POP      {r4-r7,pc}
                  |L5.64|
000040  6960              LDR      r0,[r4,#0x14]         ;154
000042  0500              LSLS     r0,r0,#20             ;154
000044  0d00              LSRS     r0,r0,#20             ;154
000046  e7ed              B        |L5.36|
;;;168    
                          ENDP


                          AREA ||i.SCUART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  SCUART_SetTimeoutCnt PROC
;;;178      */
;;;179    void SCUART_SetTimeoutCnt(SC_T* sc, uint32_t u32TOC)
000000  6101              STR      r1,[r0,#0x10]
;;;180    {
;;;181        sc->RFTMR = u32TOC;
;;;182    }
000002  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.SCUART_Write||, CODE, READONLY, ALIGN=1

                  SCUART_Write PROC
;;;192      */
;;;193    void SCUART_Write(SC_T* sc,uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b510              PUSH     {r4,lr}
;;;194    {
;;;195        uint32_t u32Count;
;;;196    
;;;197        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000002  2300              MOVS     r3,#0
000004  e005              B        |L7.18|
                  |L7.6|
;;;198        {
;;;199            while(SCUART_GET_TX_FULL(sc));  // Wait 'til FIFO not full
000006  6a04              LDR      r4,[r0,#0x20]
000008  0564              LSLS     r4,r4,#21
00000a  d4fc              BMI      |L7.6|
;;;200            sc->THR = pu8TxBuf[u32Count];    // Write 1 byte to FIFO
00000c  5ccc              LDRB     r4,[r1,r3]
00000e  6004              STR      r4,[r0,#0]
000010  1c5b              ADDS     r3,r3,#1
                  |L7.18|
000012  4293              CMP      r3,r2                 ;197
000014  d1f7              BNE      |L7.6|
;;;201        }
;;;202    }
000016  bd10              POP      {r4,pc}
;;;203    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\scuart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_scuart_c_c0edb1d5____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_scuart_c_c0edb1d5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_scuart_c_c0edb1d5____REVSH|
#line 402
|__asm___8_scuart_c_c0edb1d5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
