; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\i2c.crf ..\..\Library\StdDriver\src\i2c.c]
                          THUMB

                          AREA ||i.I2C_ClearIntFlag||, CODE, READONLY, ALIGN=1

                  I2C_ClearIntFlag PROC
;;;170      */
;;;171    void I2C_ClearIntFlag(I2C_T *i2c)
000000  6841              LDR      r1,[r0,#4]
;;;172    {
;;;173        i2c->INTSTS |= I2C_INTSTS_INTSTS_Msk;
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2
000006  6041              STR      r1,[r0,#4]
;;;174    }
000008  4770              BX       lr
;;;175    
                          ENDP


                          AREA ||i.I2C_ClearTimeoutFlag||, CODE, READONLY, ALIGN=1

                  I2C_ClearTimeoutFlag PROC
;;;74       */
;;;75     void I2C_ClearTimeoutFlag(I2C_T *i2c)
000000  6841              LDR      r1,[r0,#4]
;;;76     {
;;;77         i2c->INTSTS |= I2C_INTSTS_TIF_Msk;
000002  2202              MOVS     r2,#2
000004  4311              ORRS     r1,r1,r2
000006  6041              STR      r1,[r0,#4]
;;;78     }
000008  4770              BX       lr
;;;79     
                          ENDP


                          AREA ||i.I2C_Close||, CODE, READONLY, ALIGN=2

                  I2C_Close PROC
;;;51       */
;;;52     void I2C_Close(I2C_T *i2c)
000000  2105              MOVS     r1,#5
;;;53     {
;;;54         /* Reset I2C */
;;;55         if((uint32_t)i2c == I2C0_BASE)
000002  4a09              LDR      r2,|L3.40|
;;;56         {
;;;57             SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_I2C0_RST_Msk;
000004  0709              LSLS     r1,r1,#28
;;;58             SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_I2C0_RST_Msk;
;;;59         }
;;;60         else
;;;61         {
;;;62             SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_I2C1_RST_Msk;
000006  68cb              LDR      r3,[r1,#0xc]
000008  4290              CMP      r0,r2                 ;55
00000a  d101              BNE      |L3.16|
00000c  1582              ASRS     r2,r0,#22             ;57
00000e  e001              B        |L3.20|
                  |L3.16|
000010  2201              MOVS     r2,#1
000012  0252              LSLS     r2,r2,#9
                  |L3.20|
000014  4313              ORRS     r3,r3,r2
000016  60cb              STR      r3,[r1,#0xc]
;;;63             SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_I2C1_RST_Msk;
000018  68cb              LDR      r3,[r1,#0xc]
00001a  4393              BICS     r3,r3,r2
00001c  60cb              STR      r3,[r1,#0xc]
;;;64         }
;;;65     
;;;66         /* Disable I2C */
;;;67         i2c->CON &= ~I2C_CON_IPEN_Msk;
00001e  6801              LDR      r1,[r0,#0]
000020  0849              LSRS     r1,r1,#1
000022  0049              LSLS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
;;;68     }
000026  4770              BX       lr
;;;69     
                          ENDP

                  |L3.40|
                          DCD      0x40020000

                          AREA ||i.I2C_DisableInt||, CODE, READONLY, ALIGN=1

                  I2C_DisableInt PROC
;;;110      */
;;;111    void I2C_DisableInt(I2C_T *i2c)
000000  6801              LDR      r1,[r0,#0]
;;;112    {
;;;113        i2c->CON &= ~I2C_CON_INTEN_Msk;
000002  2280              MOVS     r2,#0x80
000004  4391              BICS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
;;;114    }
000008  4770              BX       lr
;;;115    
                          ENDP


                          AREA ||i.I2C_DisableTimeout||, CODE, READONLY, ALIGN=1

                  I2C_DisableTimeout PROC
;;;270      */
;;;271    void I2C_DisableTimeout(I2C_T *i2c)
000000  6901              LDR      r1,[r0,#0x10]
;;;272    {
;;;273        i2c->TOUT &= ~I2C_TOUT_TOUTEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6101              STR      r1,[r0,#0x10]
;;;274    }
000008  4770              BX       lr
;;;275    
                          ENDP


                          AREA ||i.I2C_DisableWakeup||, CODE, READONLY, ALIGN=1

                  I2C_DisableWakeup PROC
;;;290      */
;;;291    void I2C_DisableWakeup(I2C_T *i2c)
000000  6c01              LDR      r1,[r0,#0x40]
;;;292    {
;;;293        i2c->WKUPCON &= ~I2C_WKUPCON_WKUPEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6401              STR      r1,[r0,#0x40]
;;;294    }
000008  4770              BX       lr
;;;295    
                          ENDP


                          AREA ||i.I2C_EnableInt||, CODE, READONLY, ALIGN=1

                  I2C_EnableInt PROC
;;;120      */
;;;121    void I2C_EnableInt(I2C_T *i2c)
000000  6801              LDR      r1,[r0,#0]
;;;122    {
;;;123        i2c->CON |= I2C_CON_INTEN_Msk;
000002  2280              MOVS     r2,#0x80
000004  4311              ORRS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
;;;124    }
000008  4770              BX       lr
;;;125    
                          ENDP


                          AREA ||i.I2C_EnableTimeout||, CODE, READONLY, ALIGN=1

                  I2C_EnableTimeout PROC
;;;255      */
;;;256    void I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout)
000000  2202              MOVS     r2,#2
;;;257    {
;;;258        if(u8LongTimeout)
000002  2900              CMP      r1,#0
;;;259            i2c->TOUT |= I2C_TOUT_DIV4_Msk;
;;;260        else
;;;261            i2c->TOUT &= ~I2C_TOUT_DIV4_Msk;
000004  6901              LDR      r1,[r0,#0x10]
000006  d001              BEQ      |L8.12|
000008  4311              ORRS     r1,r1,r2              ;259
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  4391              BICS     r1,r1,r2
                  |L8.14|
00000e  6101              STR      r1,[r0,#0x10]
;;;262    
;;;263        i2c->TOUT |= I2C_TOUT_TOUTEN_Msk;
000010  6901              LDR      r1,[r0,#0x10]
000012  2201              MOVS     r2,#1
000014  4311              ORRS     r1,r1,r2
000016  6101              STR      r1,[r0,#0x10]
;;;264    }
000018  4770              BX       lr
;;;265    
                          ENDP


                          AREA ||i.I2C_EnableWakeup||, CODE, READONLY, ALIGN=1

                  I2C_EnableWakeup PROC
;;;280      */
;;;281    void I2C_EnableWakeup(I2C_T *i2c)
000000  6c01              LDR      r1,[r0,#0x40]
;;;282    {
;;;283        i2c->WKUPCON |= I2C_WKUPCON_WKUPEN_Msk;
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2
000006  6401              STR      r1,[r0,#0x40]
;;;284    }
000008  4770              BX       lr
;;;285    
                          ENDP


                          AREA ||i.I2C_GetBusClockFreq||, CODE, READONLY, ALIGN=2

                  I2C_GetBusClockFreq PROC
;;;130      */
;;;131    uint32_t I2C_GetBusClockFreq(I2C_T *i2c)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        uint32_t u32Divider = i2c->DIV;
000002  68c0              LDR      r0,[r0,#0xc]
;;;134    
;;;135        return ( SystemCoreClock / ((u32Divider+1)<<2) );
000004  0081              LSLS     r1,r0,#2
000006  4803              LDR      r0,|L10.20|
000008  1d09              ADDS     r1,r1,#4
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
;;;136    }
000010  bd10              POP      {r4,pc}
;;;137    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      SystemCoreClock

                          AREA ||i.I2C_GetData||, CODE, READONLY, ALIGN=1

                  I2C_GetData PROC
;;;190      */
;;;191    uint32_t I2C_GetData(I2C_T *i2c)
000000  6940              LDR      r0,[r0,#0x14]
;;;192    {
;;;193        return ( i2c->DATA );
;;;194    }
000002  4770              BX       lr
;;;195    
                          ENDP


                          AREA ||i.I2C_GetIntFlag||, CODE, READONLY, ALIGN=1

                  I2C_GetIntFlag PROC
;;;160      */
;;;161    uint32_t I2C_GetIntFlag(I2C_T *i2c)
000000  6840              LDR      r0,[r0,#4]
;;;162    {
;;;163        return ( (i2c->INTSTS & I2C_INTSTS_INTSTS_Msk) == I2C_INTSTS_INTSTS_Msk ? 1:0 );
000002  07c0              LSLS     r0,r0,#31
000004  0fc0              LSRS     r0,r0,#31
;;;164    }
000006  4770              BX       lr
;;;165    
                          ENDP


                          AREA ||i.I2C_GetStatus||, CODE, READONLY, ALIGN=1

                  I2C_GetStatus PROC
;;;180      */
;;;181    uint32_t I2C_GetStatus(I2C_T *i2c)
000000  6880              LDR      r0,[r0,#8]
;;;182    {
;;;183        return ( i2c->STATUS );
;;;184    }
000002  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.I2C_Open||, CODE, READONLY, ALIGN=2

                  I2C_Open PROC
;;;33       */
;;;34     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
;;;36         uint32_t u32Div;
;;;37     
;;;38         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4d0c              LDR      r5,|L14.52|
000004  4604              MOV      r4,r0                 ;35
000006  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
000008  220a              MOVS     r2,#0xa
00000a  0089              LSLS     r1,r1,#2
00000c  4350              MULS     r0,r2,r0
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  210a              MOVS     r1,#0xa
000014  1d40              ADDS     r0,r0,#5
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  1e40              SUBS     r0,r0,#1
;;;39         i2c->DIV = u32Div;
00001c  60e0              STR      r0,[r4,#0xc]
;;;40     
;;;41         /* Enable I2C */
;;;42         i2c->CON |= I2C_CON_IPEN_Msk;
00001e  6821              LDR      r1,[r4,#0]
000020  2201              MOVS     r2,#1
000022  4311              ORRS     r1,r1,r2
000024  6021              STR      r1,[r4,#0]
;;;43     
;;;44         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  0081              LSLS     r1,r0,#2
000028  1d09              ADDS     r1,r1,#4
00002a  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
00002c  f7fffffe          BL       __aeabi_uidivmod
;;;45     }
000030  bd70              POP      {r4-r6,pc}
;;;46     
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
                          DCD      SystemCoreClock

                          AREA ||i.I2C_SetBusClockFreq||, CODE, READONLY, ALIGN=2

                  I2C_SetBusClockFreq PROC
;;;143      */
;;;144    uint32_t I2C_SetBusClockFreq(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
000002  4604              MOV      r4,r0
;;;146        uint32_t u32Div;
;;;147    
;;;148        u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000004  4809              LDR      r0,|L15.44|
000006  220a              MOVS     r2,#0xa
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  0089              LSLS     r1,r1,#2
00000c  4605              MOV      r5,r0
00000e  4350              MULS     r0,r2,r0
000010  f7fffffe          BL       __aeabi_uidivmod
000014  210a              MOVS     r1,#0xa
000016  1d40              ADDS     r0,r0,#5
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  1e40              SUBS     r0,r0,#1
;;;149        i2c->DIV = u32Div;
00001e  60e0              STR      r0,[r4,#0xc]
;;;150    
;;;151        return ( SystemCoreClock / ((u32Div+1)<<2) );
000020  0081              LSLS     r1,r0,#2
000022  4628              MOV      r0,r5
000024  1d09              ADDS     r1,r1,#4
000026  f7fffffe          BL       __aeabi_uidivmod
;;;152    }
00002a  bd70              POP      {r4-r6,pc}
;;;153    
                          ENDP

                  |L15.44|
                          DCD      SystemCoreClock

                          AREA ||i.I2C_SetData||, CODE, READONLY, ALIGN=1

                  I2C_SetData PROC
;;;201      */
;;;202    void I2C_SetData(I2C_T *i2c, uint8_t u8Data)
000000  6141              STR      r1,[r0,#0x14]
;;;203    {
;;;204        i2c->DATA = u8Data;
;;;205    }
000002  4770              BX       lr
;;;206    
                          ENDP


                          AREA ||i.I2C_SetSlaveAddr||, CODE, READONLY, ALIGN=1

                  I2C_SetSlaveAddr PROC
;;;216      */
;;;217    void I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode)
000000  0052              LSLS     r2,r2,#1
;;;218    {
;;;219        switch (u8SlaveNo)
;;;220        {
;;;221        case 0:
;;;222            i2c->SADDR0  = (u8SlaveAddr << 1) | u8GCMode;
000002  431a              ORRS     r2,r2,r3
000004  2900              CMP      r1,#0                 ;219
000006  d003              BEQ      |L17.16|
000008  2901              CMP      r1,#1                 ;219
00000a  d100              BNE      |L17.14|
;;;223            break;
;;;224        case 1:
;;;225            i2c->SADDR1  = (u8SlaveAddr << 1) | u8GCMode;
00000c  61c2              STR      r2,[r0,#0x1c]
                  |L17.14|
;;;226            break;
;;;227        }
;;;228    }
00000e  4770              BX       lr
                  |L17.16|
000010  6182              STR      r2,[r0,#0x18]         ;222
000012  4770              BX       lr
;;;229    
                          ENDP


                          AREA ||i.I2C_SetSlaveAddrMask||, CODE, READONLY, ALIGN=1

                  I2C_SetSlaveAddrMask PROC
;;;236      */
;;;237    void I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask)
000000  0052              LSLS     r2,r2,#1
;;;238    {
;;;239        switch (u8SlaveNo)
000002  2900              CMP      r1,#0
000004  d003              BEQ      |L18.14|
000006  2901              CMP      r1,#1
000008  d100              BNE      |L18.12|
;;;240        {
;;;241        case 0:
;;;242            i2c->SAMASK0  = u8SlaveAddrMask << 1;
;;;243            break;
;;;244        case 1:
;;;245            i2c->SAMASK1  = u8SlaveAddrMask << 1;
00000a  62c2              STR      r2,[r0,#0x2c]
                  |L18.12|
;;;246            break;
;;;247        }
;;;248    }
00000c  4770              BX       lr
                  |L18.14|
00000e  6282              STR      r2,[r0,#0x28]         ;242
000010  4770              BX       lr
;;;249    
                          ENDP


                          AREA ||i.I2C_Trigger||, CODE, READONLY, ALIGN=1

                  I2C_Trigger PROC
;;;88       */
;;;89     void I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack)
000000  b5f0              PUSH     {r4-r7,lr}
;;;90     {
;;;91         uint32_t u32Reg = 0;
;;;92         uint32_t u32Val = i2c->CON & ~(I2C_STA | I2C_STO | I2C_AA);
000002  9e05              LDR      r6,[sp,#0x14]
000004  6805              LDR      r5,[r0,#0]
000006  2400              MOVS     r4,#0                 ;91
000008  270e              MOVS     r7,#0xe
00000a  43bd              BICS     r5,r5,r7
;;;93     
;;;94         if (u8Start)
00000c  2900              CMP      r1,#0
00000e  d000              BEQ      |L19.18|
;;;95             u32Reg |= I2C_STA;
000010  2408              MOVS     r4,#8
                  |L19.18|
;;;96         if (u8Stop)
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L19.26|
;;;97             u32Reg |= I2C_STO;
000016  2104              MOVS     r1,#4
000018  430c              ORRS     r4,r4,r1
                  |L19.26|
;;;98         if (u8Si)
00001a  2b00              CMP      r3,#0
00001c  d001              BEQ      |L19.34|
;;;99             u32Reg |= I2C_SI;
00001e  2110              MOVS     r1,#0x10
000020  430c              ORRS     r4,r4,r1
                  |L19.34|
;;;100        if (u8Ack)
000022  2e00              CMP      r6,#0
000024  d001              BEQ      |L19.42|
;;;101            u32Reg |= I2C_AA;
000026  2102              MOVS     r1,#2
000028  430c              ORRS     r4,r4,r1
                  |L19.42|
;;;102    
;;;103        i2c->CON = u32Val | u32Reg;
00002a  4325              ORRS     r5,r5,r4
00002c  6005              STR      r5,[r0,#0]
;;;104    }
00002e  bdf0              POP      {r4-r7,pc}
;;;105    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_i2c_c_I2C_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REVSH|
#line 402
|__asm___5_i2c_c_I2C_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
