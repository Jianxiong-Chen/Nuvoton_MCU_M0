; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\adc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\adc.crf ..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;58       */
;;;59     void ADC_Close(ADC_T *adc)
000000  2005              MOVS     r0,#5
;;;60     {
;;;61         SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_ADC_RST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0709              LSLS     r1,r1,#28
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;62         SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_ADC_RST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;63         return;
;;;64     
;;;65     }
000014  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_DisableHWTrigger PROC
;;;93       */
;;;94     void ADC_DisableHWTrigger(ADC_T *adc)
000000  4803              LDR      r0,|L2.16|
;;;95     {
;;;96         ADC->CR &= ~(ADC_CR_TRGS_Msk | ADC_CR_TRGCOND_Msk | ADC_CR_TRGE_Msk);
000002  6881              LDR      r1,[r0,#8]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;97         return;
;;;98     }
00000c  4770              BX       lr
;;;99     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x400e0040

                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=2

                  ADC_DisableInt PROC
;;;182      */
;;;183    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;184    {
;;;185        if(u32Mask & ADC_ADF_INT)
;;;186            ADC->CR &= ~ADC_CR_ADIE_Msk;
000002  4809              LDR      r0,|L3.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;185
000008  d002              BEQ      |L3.16|
00000a  6883              LDR      r3,[r0,#8]
00000c  4393              BICS     r3,r3,r2
00000e  6083              STR      r3,[r0,#8]
                  |L3.16|
;;;187        if(u32Mask & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;188            ADC->CMPR0 &= ~ADC_CMPR_CMPIE_Msk;
000014  6903              LDR      r3,[r0,#0x10]
000016  4393              BICS     r3,r3,r2
000018  6103              STR      r3,[r0,#0x10]
                  |L3.26|
;;;189        if(u32Mask & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;190            ADC->CMPR1 &= ~ADC_CMPR_CMPIE_Msk;
00001e  6941              LDR      r1,[r0,#0x14]
000020  4391              BICS     r1,r1,r2
000022  6141              STR      r1,[r0,#0x14]
                  |L3.36|
;;;191    
;;;192        return;
;;;193    }
000024  4770              BX       lr
;;;194    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x400e0040

                          AREA ||i.ADC_DisableTimerTrigger||, CODE, READONLY, ALIGN=2

                  ADC_DisableTimerTrigger PROC
;;;121      */
;;;122    void ADC_DisableTimerTrigger(ADC_T *adc)
000000  4803              LDR      r0,|L4.16|
;;;123    {
;;;124        ADC->CR &= ~ADC_CR_TMTRGMOD_Msk;
000002  6881              LDR      r1,[r0,#8]
000004  2201              MOVS     r2,#1
000006  03d2              LSLS     r2,r2,#15
000008  4391              BICS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;125    
;;;126        return;
;;;127    }
00000c  4770              BX       lr
;;;128    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x400e0040

                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_EnableHWTrigger PROC
;;;79       */
;;;80     void ADC_EnableHWTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;81                              uint32_t u32Source,
;;;82                              uint32_t u32Param)
;;;83     {
;;;84         ADC->CR &= ~(ADC_CR_TRGE_Msk | ADC_CR_TRGCOND_Msk | ADC_CR_TRGS_Msk);
000002  4806              LDR      r0,|L5.28|
000004  6883              LDR      r3,[r0,#8]
000006  24ff              MOVS     r4,#0xff
000008  34f1              ADDS     r4,r4,#0xf1
00000a  43a3              BICS     r3,r3,r4
00000c  6083              STR      r3,[r0,#8]
;;;85         ADC->CR |= u32Source | u32Param | ADC_CR_TRGE_Msk;
00000e  6883              LDR      r3,[r0,#8]
000010  430b              ORRS     r3,r3,r1
000012  1581              ASRS     r1,r0,#22
000014  430a              ORRS     r2,r2,r1
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
;;;86         return;
;;;87     }
00001a  bd10              POP      {r4,pc}
;;;88     
                          ENDP

                  |L5.28|
                          DCD      0x400e0040

                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=2

                  ADC_EnableInt PROC
;;;159      */
;;;160    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;161    {
;;;162        if(u32Mask & ADC_ADF_INT)
;;;163            ADC->CR |= ADC_CR_ADIE_Msk;
000002  4809              LDR      r0,|L6.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;162
000008  d002              BEQ      |L6.16|
00000a  6883              LDR      r3,[r0,#8]
00000c  4313              ORRS     r3,r3,r2
00000e  6083              STR      r3,[r0,#8]
                  |L6.16|
;;;164        if(u32Mask & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L6.26|
;;;165            ADC->CMPR0 |= ADC_CMPR_CMPIE_Msk;
000014  6903              LDR      r3,[r0,#0x10]
000016  4313              ORRS     r3,r3,r2
000018  6103              STR      r3,[r0,#0x10]
                  |L6.26|
;;;166        if(u32Mask & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L6.36|
;;;167            ADC->CMPR1 |= ADC_CMPR_CMPIE_Msk;
00001e  6941              LDR      r1,[r0,#0x14]
000020  4311              ORRS     r1,r1,r2
000022  6141              STR      r1,[r0,#0x14]
                  |L6.36|
;;;168    
;;;169        return;
;;;170    }
000024  4770              BX       lr
;;;171    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x400e0040

                          AREA ||i.ADC_EnableTimerTrigger||, CODE, READONLY, ALIGN=2

                  ADC_EnableTimerTrigger PROC
;;;106      */
;;;107    void ADC_EnableTimerTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;108                                uint32_t u32Source,
;;;109                                uint32_t u32PDMACnt)
;;;110    {
;;;111        ADC->CR &= ~(ADC_CR_TMPDMACNT_Msk | ADC_CR_TMSEL_Msk);
000002  4807              LDR      r0,|L7.32|
000004  6883              LDR      r3,[r0,#8]
000006  4c07              LDR      r4,|L7.36|
000008  4023              ANDS     r3,r3,r4
00000a  6083              STR      r3,[r0,#8]
;;;112        ADC->CR |= (u32PDMACnt << ADC_CR_TMPDMACNT_Pos) | (u32Source << ADC_CR_TMSEL_Pos) | ADC_CR_TMTRGMOD_Msk;
00000c  6883              LDR      r3,[r0,#8]
00000e  0612              LSLS     r2,r2,#24
000010  4313              ORRS     r3,r3,r2
000012  0309              LSLS     r1,r1,#12
000014  2201              MOVS     r2,#1
000016  03d2              LSLS     r2,r2,#15
000018  4311              ORRS     r1,r1,r2
00001a  430b              ORRS     r3,r3,r1
00001c  6083              STR      r3,[r0,#8]
;;;113    
;;;114        return;
;;;115    }
00001e  bd10              POP      {r4,pc}
;;;116    
                          ENDP

                  |L7.32|
                          DCD      0x400e0040
                  |L7.36|
                          DCD      0x00ffcfff

                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;40       */
;;;41     void ADC_Open(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;42                   uint32_t u32InputMode,
;;;43                   uint32_t u32OpMode,
;;;44                   uint32_t u32ChMask)
;;;45     {
;;;46     
;;;47         ADC->CR = (ADC->CR & ~ADC_CR_DIFF_Msk) | u32InputMode;
000002  4808              LDR      r0,|L8.36|
000004  6884              LDR      r4,[r0,#8]
000006  1505              ASRS     r5,r0,#20
000008  43ac              BICS     r4,r4,r5
00000a  430c              ORRS     r4,r4,r1
00000c  6084              STR      r4,[r0,#8]
;;;48         ADC->CR = (ADC->CR & ~ADC_CR_ADMD_Msk) | u32OpMode;
00000e  6881              LDR      r1,[r0,#8]
000010  240c              MOVS     r4,#0xc
000012  43a1              BICS     r1,r1,r4
000014  4311              ORRS     r1,r1,r2
000016  6081              STR      r1,[r0,#8]
;;;49         ADC->CR = (ADC->CR & ~ADC_CR_REFSEL_Msk);
000018  6881              LDR      r1,[r0,#8]
00001a  03a2              LSLS     r2,r4,#14
00001c  4391              BICS     r1,r1,r2
00001e  6081              STR      r1,[r0,#8]
;;;50         ADC->CHEN  = u32ChMask;
000020  60c3              STR      r3,[r0,#0xc]
;;;51         return;
;;;52     }
000022  bd30              POP      {r4,r5,pc}
;;;53     
                          ENDP

                  |L8.36|
                          DCD      0x400e0040

                          AREA ||i.ADC_SetExtraSampleTime||, CODE, READONLY, ALIGN=2

                  ADC_SetExtraSampleTime PROC
;;;135      */
;;;136    void ADC_SetExtraSampleTime(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;137                                uint32_t u32ChNum,
;;;138                                uint32_t u32SampleTime)
;;;139    {
;;;140    
;;;141        if (u32ChNum < 8)
;;;142            ADC->SMPLCNT0 = (ADC->SMPLCNT0 & ~(ADC_SMPLCNT0_CH0SAMPCNT_Msk << (u32ChNum * 4))) | (u32SampleTime << (u32ChNum * 4));
000002  240f              MOVS     r4,#0xf
000004  4b0e              LDR      r3,|L9.64|
000006  0088              LSLS     r0,r1,#2
000008  2908              CMP      r1,#8                 ;141
00000a  d206              BCS      |L9.26|
00000c  6b19              LDR      r1,[r3,#0x30]
00000e  4084              LSLS     r4,r4,r0
000010  43a1              BICS     r1,r1,r4
000012  4082              LSLS     r2,r2,r0
000014  4311              ORRS     r1,r1,r2
000016  6319              STR      r1,[r3,#0x30]
;;;143        else if (u32ChNum < 12)
;;;144            ADC->SMPLCNT1 = (ADC->SMPLCNT1 & ~(ADC_SMPLCNT1_CH8SAMPCNT_Msk << ((u32ChNum - 8) * 4))) | (u32SampleTime << ((u32ChNum - 8 ) * 4));
;;;145        else
;;;146            ADC->SMPLCNT1 = (ADC->SMPLCNT1 & ~ADC_SMPLCNT1_INTCHSAMPCNT_Msk) | (u32SampleTime << ADC_SMPLCNT1_INTCHSAMPCNT_Pos);
;;;147    }
000018  bd10              POP      {r4,pc}
                  |L9.26|
00001a  290c              CMP      r1,#0xc               ;143
00001c  d207              BCS      |L9.46|
00001e  3820              SUBS     r0,r0,#0x20           ;143
000020  6b59              LDR      r1,[r3,#0x34]         ;144
000022  4084              LSLS     r4,r4,r0              ;144
000024  43a1              BICS     r1,r1,r4              ;144
000026  4082              LSLS     r2,r2,r0              ;144
000028  4311              ORRS     r1,r1,r2              ;144
00002a  6359              STR      r1,[r3,#0x34]         ;144
00002c  bd10              POP      {r4,pc}
                  |L9.46|
00002e  6b58              LDR      r0,[r3,#0x34]         ;146
000030  210f              MOVS     r1,#0xf               ;146
000032  0409              LSLS     r1,r1,#16             ;146
000034  4388              BICS     r0,r0,r1              ;146
000036  0411              LSLS     r1,r2,#16             ;146
000038  4308              ORRS     r0,r0,r1              ;146
00003a  6358              STR      r0,[r3,#0x34]         ;146
00003c  bd10              POP      {r4,pc}
;;;148    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0x400e0040

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 402
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
