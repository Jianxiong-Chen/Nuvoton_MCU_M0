; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\main_1.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main_1.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\main_1.crf ..\User\main.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;17     
;;;18     void ADC_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
;;;20         uint32_t u32Flag;
;;;21     
;;;22         // Get ADC comparator interrupt flag
;;;23         u32Flag = ADC_GET_INT_FLAG(ADC, ADC_CMP0_INT | ADC_CMP1_INT);
000002  4d0a              LDR      r5,|L1.44|
000004  69ac              LDR      r4,[r5,#0x18]
000006  2006              MOVS     r0,#6
000008  4004              ANDS     r4,r4,r0
;;;24     
;;;25         if(u32Flag & ADC_CMP0_INT)
00000a  07a0              LSLS     r0,r4,#30
00000c  d502              BPL      |L1.20|
;;;26             printf("Channel 0 input < 0x200\n");
00000e  a008              ADR      r0,|L1.48|
000010  f7fffffe          BL       __2printf
                  |L1.20|
;;;27         if(u32Flag & ADC_CMP1_INT)
000014  0760              LSLS     r0,r4,#29
000016  d502              BPL      |L1.30|
;;;28             printf("Channel 0 input >= 0x200\n");
000018  a00c              ADR      r0,|L1.76|
00001a  f7fffffe          BL       __2printf
                  |L1.30|
;;;29     
;;;30         ADC_CLR_INT_FLAG(ADC, u32Flag);
00001e  69a8              LDR      r0,[r5,#0x18]
000020  08c0              LSRS     r0,r0,#3
000022  00c0              LSLS     r0,r0,#3
000024  4320              ORRS     r0,r0,r4
000026  61a8              STR      r0,[r5,#0x18]
;;;31     }
000028  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x400e0040
                  |L1.48|
000030  4368616e          DCB      "Channel 0 input < 0x200\n",0
000034  6e656c20
000038  3020696e
00003c  70757420
000040  3c203078
000044  3230300a
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L1.76|
00004c  4368616e          DCB      "Channel 0 input >= 0x200\n",0
000050  6e656c20
000054  3020696e
000058  70757420
00005c  3e3d2030
000060  78323030
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;36     /*---------------------------------------------------------------------------------------------------------*/
;;;37     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  2216              MOVS     r2,#0x16
000006  4c20              LDR      r4,|L2.136|
000008  2188              MOVS     r1,#0x88
00000a  e002              B        |L2.18|
                  |L2.12|
00000c  6020              STR      r0,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6021              STR      r1,[r4,#0]
                  |L2.18|
000012  6823              LDR      r3,[r4,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L2.12|
;;;38     {
;;;39         /* Unlock protected registers */
;;;40         SYS_UnlockReg();
;;;41     
;;;42         /* Set HCLK source form HXT and HCLK source divide 1  */
;;;43         CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HXT,CLK_HCLK_CLK_DIVIDER(1));
000018  2100              MOVS     r1,#0
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       CLK_SetHCLK
;;;44     
;;;45         /* Enable external 12MHz HXT, 32KHz LXT and HIRC */
;;;46         CLK_EnableXtalRC(CLK_PWRCTL_HXT_EN_Msk | CLK_PWRCTL_LXT_EN_Msk | CLK_PWRCTL_HIRC_EN_Msk);
000020  2007              MOVS     r0,#7
000022  f7fffffe          BL       CLK_EnableXtalRC
;;;47     
;;;48         /* Waiting for clock ready */
;;;49         CLK_WaitClockReady(CLK_CLKSTATUS_HXT_STB_Msk | CLK_CLKSTATUS_LXT_STB_Msk | CLK_CLKSTATUS_HIRC_STB_Msk);
000026  2013              MOVS     r0,#0x13
000028  f7fffffe          BL       CLK_WaitClockReady
;;;50     
;;;51         /*  Set HCLK frequency 42MHz */
;;;52         CLK_SetCoreClock(42000000);
00002c  4817              LDR      r0,|L2.140|
00002e  f7fffffe          BL       CLK_SetCoreClock
;;;53     
;;;54         /* Enable IP clock */
;;;55         CLK_EnableModuleClock(UART0_MODULE);
000032  4d17              LDR      r5,|L2.144|
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       CLK_EnableModuleClock
;;;56     
;;;57         /* Enable ADC clock */
;;;58         CLK_EnableModuleClock(ADC_MODULE);
00003a  4816              LDR      r0,|L2.148|
00003c  f7fffffe          BL       CLK_EnableModuleClock
;;;59     
;;;60         /* Select IP clock source */
;;;61         CLK_SetModuleClock(UART0_MODULE,CLK_CLKSEL1_UART_S_HXT,CLK_UART_CLK_DIVIDER(1));
000040  2200              MOVS     r2,#0
000042  4611              MOV      r1,r2
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       CLK_SetModuleClock
;;;62     
;;;63         /*---------------------------------------------------------------------------------------------------------*/
;;;64         /* Init I/O Multi-function                                                                                 */
;;;65         /*---------------------------------------------------------------------------------------------------------*/
;;;66         /* Set PA multi-function pins for UART0 RXD and TXD */
;;;67         SYS->PB_L_MFP &= ~( SYS_PB_L_MFP_PB0_MFP_Msk | SYS_PB_L_MFP_PB1_MFP_Msk);
00004a  2005              MOVS     r0,#5
00004c  0700              LSLS     r0,r0,#28
00004e  6b81              LDR      r1,[r0,#0x38]
000050  2277              MOVS     r2,#0x77
000052  4391              BICS     r1,r1,r2
000054  6381              STR      r1,[r0,#0x38]
;;;68         SYS->PB_L_MFP |= (SYS_PB_L_MFP_PB0_MFP_UART0_RX | SYS_PB_L_MFP_PB1_MFP_UART0_TX );
000056  6b81              LDR      r1,[r0,#0x38]
000058  2211              MOVS     r2,#0x11
00005a  4311              ORRS     r1,r1,r2
00005c  6381              STR      r1,[r0,#0x38]
;;;69     
;;;70         /* Set PB multi-function pins for Clock Output */
;;;71         SYS->PB_H_MFP = ( SYS->PB_H_MFP & ~SYS_PB_H_MFP_PB12_MFP_Msk ) |  SYS_PB_H_MFP_PB12_MFP_CKO;
00005e  6bc1              LDR      r1,[r0,#0x3c]
000060  2207              MOVS     r2,#7
000062  0412              LSLS     r2,r2,#16
000064  4391              BICS     r1,r1,r2
000066  2201              MOVS     r2,#1
000068  0492              LSLS     r2,r2,#18
00006a  1889              ADDS     r1,r1,r2
00006c  63c1              STR      r1,[r0,#0x3c]
;;;72     
;;;73         /* Set PA.0 multi-function pin for ADC channel 0 */
;;;74         SYS->PA_L_MFP = (SYS->PA_L_MFP & ~SYS_PA_L_MFP_PA0_MFP_Msk) | SYS_PA_L_MFP_PA0_MFP_ADC_CH0;
00006e  6b01              LDR      r1,[r0,#0x30]
000070  08c9              LSRS     r1,r1,#3
000072  00c9              LSLS     r1,r1,#3
000074  1c49              ADDS     r1,r1,#1
000076  6301              STR      r1,[r0,#0x30]
;;;75     
;;;76         /* Disable PA.0 digital input path */
;;;77         PA->OFFD |= ((1 << 0) << GP_OFFD_OFFD_Pos);
000078  4807              LDR      r0,|L2.152|
00007a  6841              LDR      r1,[r0,#4]
00007c  1092              ASRS     r2,r2,#2
00007e  4311              ORRS     r1,r1,r2
000080  6041              STR      r1,[r0,#4]
000082  2000              MOVS     r0,#0
000084  6020              STR      r0,[r4,#0]
;;;78     
;;;79         /* Lock protected registers */
;;;80         SYS_LockReg();
;;;81     }
000086  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP

                  |L2.136|
                          DCD      0x50000100
                  |L2.140|
                          DCD      0x0280de80
                  |L2.144|
                          DCD      0xa6003d10
                  |L2.148|
                          DCD      0xa623fe1c
                  |L2.152|
                          DCD      0x50004000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;82     
;;;83     void UART0_Init()
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         /*---------------------------------------------------------------------------------------------------------*/
;;;86         /* Init UART                                                                                               */
;;;87         /*---------------------------------------------------------------------------------------------------------*/
;;;88         UART_Open(UART0, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L3.16|
000008  f7fffffe          BL       UART_Open
;;;89     }
00000c  bd10              POP      {r4,pc}
;;;90     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40050000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;90     
;;;91     int32_t main (void)
000000  f7fffffe          BL       SYS_Init
;;;92     {
;;;93         /* Init System, IP clock and multi-function I/O
;;;94            In the end of SYS_Init() will issue SYS_LockReg()
;;;95            to lock protected register. If user want to write
;;;96            protected register, please issue SYS_UnlockReg()
;;;97            to unlock protected register if necessary */
;;;98         SYS_Init();
;;;99     
;;;100        /* Init UART0 for printf */
;;;101        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;102    
;;;103        printf("\n\nCPU @ %dHz\n", SystemCoreClock);
000008  481d              LDR      r0,|L4.128|
00000a  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
00000c  a01d              ADR      r0,|L4.132|
00000e  f7fffffe          BL       __2printf
;;;104    
;;;105        printf("\nThis sample code demonstrate ADC conversion and comparison function\n");
000012  4820              LDR      r0,|L4.148|
000014  f7fffffe          BL       __2printf
;;;106        printf("by monitoring the conversion result of channel 0\n");
000018  a01f              ADR      r0,|L4.152|
00001a  f7fffffe          BL       __2printf
;;;107    
;;;108        // Enable channel 0
;;;109        ADC_Open(ADC, ADC_INPUT_MODE_SINGLE_END, ADC_OPERATION_MODE_SINGLE, ADC_CH_0_MASK);
00001e  4d2b              LDR      r5,|L4.204|
000020  2200              MOVS     r2,#0
000022  2301              MOVS     r3,#1
000024  4611              MOV      r1,r2
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       ADC_Open
;;;110    
;;;111        // Set reference voltage to AVDD
;;;112        ADC_SET_REF_VOLTAGE(ADC, ADC_REFSEL_POWER);
00002c  4c27              LDR      r4,|L4.204|
00002e  3440              ADDS     r4,r4,#0x40
000030  68a0              LDR      r0,[r4,#8]
000032  2103              MOVS     r1,#3
000034  0409              LSLS     r1,r1,#16
000036  4388              BICS     r0,r0,r1
000038  60a0              STR      r0,[r4,#8]
;;;113    
;;;114        // Power on ADC
;;;115        ADC_POWER_ON(ADC);
00003a  68a0              LDR      r0,[r4,#8]
00003c  2101              MOVS     r1,#1
00003e  4308              ORRS     r0,r0,r1
000040  60a0              STR      r0,[r4,#8]
                  |L4.66|
000042  69a0              LDR      r0,[r4,#0x18]
000044  03c0              LSLS     r0,r0,#15
000046  d5fc              BPL      |L4.66|
000048  6a60              LDR      r0,[r4,#0x24]
00004a  07c0              LSLS     r0,r0,#31
00004c  d0f9              BEQ      |L4.66|
;;;116    
;;;117        // Configure and enable Comparator 0 to monitor channel 0 input less than 0x200
;;;118        ADC_ENABLE_CMP0(ADC, 0, ADC_CMP_LESS_THAN, 0x200, 16);
00004e  4820              LDR      r0,|L4.208|
000050  6120              STR      r0,[r4,#0x10]
;;;119        // Configure and enable Comparator 1 to monitor channel 0 input greater or equal to 0x200
;;;120        ADC_ENABLE_CMP1(ADC, 0, ADC_CMP_GREATER_OR_EQUAL_TO, 0x200, 16);
000052  1d00              ADDS     r0,r0,#4
000054  6160              STR      r0,[r4,#0x14]
;;;121    
;;;122        // Enable ADC comparator 0 and 1 interrupt
;;;123        ADC_EnableInt(ADC, ADC_CMP0_INT);
000056  2102              MOVS     r1,#2
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       ADC_EnableInt
;;;124        ADC_EnableInt(ADC, ADC_CMP1_INT);
00005e  2104              MOVS     r1,#4
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       ADC_EnableInt
000066  2001              MOVS     r0,#1
000068  491a              LDR      r1,|L4.212|
00006a  0740              LSLS     r0,r0,#29
00006c  6008              STR      r0,[r1,#0]
;;;125        NVIC_EnableIRQ(ADC_IRQn);
;;;126    
;;;127        while(1)
;;;128        {
;;;129            // Trigger ADC conversion if it is idle
;;;130            if(!ADC_IS_BUSY(ADC))
;;;131            {
;;;132                ADC_START_CONV(ADC);
00006e  1480              ASRS     r0,r0,#18
                  |L4.112|
000070  69a1              LDR      r1,[r4,#0x18]         ;130
000072  0709              LSLS     r1,r1,#28             ;130
000074  d4fc              BMI      |L4.112|
000076  68a1              LDR      r1,[r4,#8]
000078  4301              ORRS     r1,r1,r0
00007a  60a1              STR      r1,[r4,#8]
00007c  e7f8              B        |L4.112|
;;;133            }
;;;134        }
;;;135    
;;;136    }
;;;137    
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      SystemCoreClock
                  |L4.132|
000084  0a0a4350          DCB      "\n\nCPU @ %dHz\n",0
000088  55204020
00008c  2564487a
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L4.148|
                          DCD      ||.conststring||
                  |L4.152|
000098  6279206d          DCB      "by monitoring the conversion result of channel 0\n",0
00009c  6f6e6974
0000a0  6f72696e
0000a4  67207468
0000a8  6520636f
0000ac  6e766572
0000b0  73696f6e
0000b4  20726573
0000b8  756c7420
0000bc  6f662063
0000c0  68616e6e
0000c4  656c2030
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L4.204|
                          DCD      0x400e0000
                  |L4.208|
                          DCD      0x02000f01
                  |L4.212|
                          DCD      0xe000e100

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a546869          DCB      "\nThis sample code demonstrate ADC conversion and compa"
000004  73207361
000008  6d706c65
00000c  20636f64
000010  65206465
000014  6d6f6e73
000018  74726174
00001c  65204144
000020  4320636f
000024  6e766572
000028  73696f6e
00002c  20616e64
000030  20636f6d
000034  7061    
000036  7269736f          DCB      "rison function\n",0
00003a  6e206675
00003e  6e637469
000042  6f6e0a00

                          AREA ||.data||, DATA, ALIGN=0

                  u8ADF
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_ba439d72____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_ba439d72____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_ba439d72____REVSH|
#line 402
|__asm___6_main_c_ba439d72____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
