; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\i2s.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2s.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\i2s.crf ..\..\Library\StdDriver\src\i2s.c]
                          THUMB

                          AREA ||i.I2S_Close||, CODE, READONLY, ALIGN=1

                  I2S_Close PROC
;;;117      */
;;;118    void I2S_Close(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;119    {
;;;120        i2s->CTRL &= ~I2S_CTRL_I2SEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;121    }
000008  4770              BX       lr
;;;122    
                          ENDP


                          AREA ||i.I2S_DisableInt||, CODE, READONLY, ALIGN=1

                  I2S_DisableInt PROC
;;;141      */
;;;142    void I2S_DisableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;143    {
;;;144        i2s->INTEN &= ~u32Mask;
000002  438a              BICS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;145    }
000006  4770              BX       lr
;;;146    
                          ENDP


                          AREA ||i.I2S_DisableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_DisableMCLK PROC
;;;180      */
;;;181    void I2S_DisableMCLK(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;182    {
;;;183        i2s->CTRL &= ~I2S_CTRL_MCLKEN_Msk;
000002  2201              MOVS     r2,#1
000004  03d2              LSLS     r2,r2,#15
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;184    }
00000a  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.I2S_EnableInt||, CODE, READONLY, ALIGN=1

                  I2S_EnableInt PROC
;;;129      */
;;;130    void I2S_EnableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;131    {
;;;132        i2s->INTEN |= u32Mask;
000002  430a              ORRS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;133    }
000006  4770              BX       lr
;;;134    
                          ENDP


                          AREA ||i.I2S_EnableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_EnableMCLK PROC
;;;152      */
;;;153    uint32_t I2S_EnableMCLK(I2S_T *i2s, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;155        uint8_t u8Divider;
;;;156        uint32_t u32SrcClk, u32Reg;
;;;157    
;;;158        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000006  f7fffffe          BL       I2S_GetSourceClockFreq
00000a  4605              MOV      r5,r0
;;;159        if (u32BusClock == u32SrcClk)
00000c  42ae              CMP      r6,r5
00000e  d101              BNE      |L5.20|
;;;160            u8Divider = 0;
000010  2000              MOVS     r0,#0
000012  e004              B        |L5.30|
                  |L5.20|
;;;161        else
;;;162            u8Divider = (u32SrcClk/u32BusClock) >> 1;
000014  4631              MOV      r1,r6
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  05c0              LSLS     r0,r0,#23
00001c  0e00              LSRS     r0,r0,#24
                  |L5.30|
;;;163    
;;;164        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_MCLK_DIV_Msk) | u8Divider;
00001e  6861              LDR      r1,[r4,#4]
000020  08c9              LSRS     r1,r1,#3
000022  00c9              LSLS     r1,r1,#3
000024  4301              ORRS     r1,r1,r0
000026  6061              STR      r1,[r4,#4]
;;;165    
;;;166        i2s->CTRL |= I2S_CTRL_MCLKEN_Msk;
000028  6820              LDR      r0,[r4,#0]
00002a  2101              MOVS     r1,#1
00002c  03c9              LSLS     r1,r1,#15
00002e  4308              ORRS     r0,r0,r1
000030  6020              STR      r0,[r4,#0]
;;;167    
;;;168        u32Reg = i2s->CLKDIV & I2S_CLKDIV_MCLK_DIV_Msk;
000032  6860              LDR      r0,[r4,#4]
000034  0741              LSLS     r1,r0,#29
000036  0f49              LSRS     r1,r1,#29
;;;169    
;;;170        if (u32Reg == 0)
000038  d003              BEQ      |L5.66|
;;;171            return u32SrcClk;
;;;172        else
;;;173            return ((u32SrcClk >> 1) / u32Reg);
00003a  0868              LSRS     r0,r5,#1
00003c  f7fffffe          BL       __aeabi_uidivmod
;;;174    }
000040  bd70              POP      {r4-r6,pc}
                  |L5.66|
000042  4628              MOV      r0,r5                 ;171
000044  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP


                          AREA ||i.I2S_GetSourceClockFreq||, CODE, READONLY, ALIGN=2

                  I2S_GetSourceClockFreq PROC
;;;33       */
;;;34     static uint32_t I2S_GetSourceClockFreq(I2S_T *i2s)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36         uint32_t u32Freq, u32ClkSrcSel;
;;;37     
;;;38         // get I2S selection clock source
;;;39         u32ClkSrcSel = CLK->CLKSEL2 & CLK_CLKSEL2_I2S_S_Msk;
000002  4807              LDR      r0,|L6.32|
000004  6981              LDR      r1,[r0,#0x18]
000006  2003              MOVS     r0,#3
000008  0400              LSLS     r0,r0,#16
00000a  4001              ANDS     r1,r1,r0
;;;40     
;;;41         switch (u32ClkSrcSel)
;;;42         {
;;;43         case CLK_CLKSEL2_I2S_S_HXT:
;;;44             u32Freq = __HXT;
00000c  4805              LDR      r0,|L6.36|
00000e  d005              BEQ      |L6.28|
000010  2201              MOVS     r2,#1                 ;41
000012  0412              LSLS     r2,r2,#16             ;41
000014  4291              CMP      r1,r2                 ;41
000016  d101              BNE      |L6.28|
;;;45             break;
;;;46     
;;;47         case CLK_CLKSEL2_I2S_S_PLL:
;;;48             u32Freq = CLK_GetPLLClockFreq();
000018  f7fffffe          BL       CLK_GetPLLClockFreq
                  |L6.28|
;;;49             break;
;;;50     
;;;51         case CLK_CLKSEL2_I2S_S_HIRC:
;;;52             u32Freq = __HIRC;
;;;53             break;
;;;54     
;;;55         default:
;;;56             u32Freq = __HIRC;
;;;57             break;
;;;58         }
;;;59     
;;;60         return u32Freq;
;;;61     }
00001c  bd10              POP      {r4,pc}
;;;62     /// @endcond /* HIDDEN_SYMBOLS */
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x50000200
                  |L6.36|
                          DCD      0x00b71b00

                          AREA ||i.I2S_Open||, CODE, READONLY, ALIGN=1

                  I2S_Open PROC
;;;87       */
;;;88     uint32_t I2S_Open(I2S_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat, uint32_t u32AudioInterface)
000000  b5f8              PUSH     {r3-r7,lr}
;;;89     {
000002  4604              MOV      r4,r0
;;;90         uint8_t u8Divider;
;;;91         uint32_t u32BitRate, u32SrcClk;
;;;92     
;;;93         SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_I2S_RST_Msk;
000004  2005              MOVS     r0,#5
000006  4617              MOV      r7,r2                 ;89
000008  0700              LSLS     r0,r0,#28
00000a  9a06              LDR      r2,[sp,#0x18]
00000c  68c6              LDR      r6,[r0,#0xc]
00000e  461d              MOV      r5,r3                 ;89
000010  2301              MOVS     r3,#1
000012  075b              LSLS     r3,r3,#29
000014  431e              ORRS     r6,r6,r3
000016  60c6              STR      r6,[r0,#0xc]
;;;94         SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_I2S_RST_Msk;
000018  68c6              LDR      r6,[r0,#0xc]
00001a  439e              BICS     r6,r6,r3
00001c  60c6              STR      r6,[r0,#0xc]
;;;95     
;;;96         i2s->CTRL = u32MasterSlave | u32WordWidth | u32Channels | u32DataFormat | u32AudioInterface | I2S_FIFO_TX_LEVEL_WORD_4 | I2S_FIFO_RX_LEVEL_WORD_4;
00001e  4329              ORRS     r1,r1,r5
000020  9807              LDR      r0,[sp,#0x1c]
000022  4311              ORRS     r1,r1,r2
000024  4301              ORRS     r1,r1,r0
000026  9808              LDR      r0,[sp,#0x20]
000028  4301              ORRS     r1,r1,r0
00002a  2007              MOVS     r0,#7
00002c  02c0              LSLS     r0,r0,#11
00002e  4301              ORRS     r1,r1,r0
000030  6021              STR      r1,[r4,#0]
;;;97     
;;;98         u32SrcClk = I2S_GetSourceClockFreq(i2s);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       I2S_GetSourceClockFreq
000038  4606              MOV      r6,r0
;;;99     
;;;100        u32BitRate = u32SampleRate * (((u32WordWidth>>4) & 0x3) + 1) * 16;
00003a  06a8              LSLS     r0,r5,#26
00003c  0f85              LSRS     r5,r0,#30
00003e  1c68              ADDS     r0,r5,#1
000040  4378              MULS     r0,r7,r0
000042  0101              LSLS     r1,r0,#4
;;;101        u8Divider = ((u32SrcClk/u32BitRate) >> 1) - 1;
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0840              LSRS     r0,r0,#1
00004c  1e40              SUBS     r0,r0,#1
;;;102        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_BCLK_DIV_Msk) | (u8Divider << 8);
00004e  6861              LDR      r1,[r4,#4]
000050  b2c0              UXTB     r0,r0                 ;101
000052  22ff              MOVS     r2,#0xff
000054  0212              LSLS     r2,r2,#8
000056  4391              BICS     r1,r1,r2
000058  0202              LSLS     r2,r0,#8
00005a  4311              ORRS     r1,r1,r2
00005c  6061              STR      r1,[r4,#4]
;;;103    
;;;104        //calculate real sample rate
;;;105        u32BitRate = u32SrcClk / (2*(u8Divider+1));
00005e  0041              LSLS     r1,r0,#1
000060  2701              MOVS     r7,#1
000062  4630              MOV      r0,r6
000064  1c89              ADDS     r1,r1,#2
000066  f7fffffe          BL       __aeabi_uidivmod
;;;106        u32SampleRate = u32BitRate / ((((u32WordWidth>>4) & 0x3) + 1) * 16);
00006a  0129              LSLS     r1,r5,#4
00006c  3110              ADDS     r1,r1,#0x10
00006e  f7fffffe          BL       __aeabi_uidivmod
;;;107    
;;;108        i2s->CTRL |= I2S_CTRL_I2SEN_Msk;
000072  6821              LDR      r1,[r4,#0]
000074  4339              ORRS     r1,r1,r7
000076  6021              STR      r1,[r4,#0]
;;;109    
;;;110        return u32SampleRate;
;;;111    }
000078  bdf8              POP      {r3-r7,pc}
;;;112    
                          ENDP


                          AREA ||i.I2S_SetFIFO||, CODE, READONLY, ALIGN=1

                  I2S_SetFIFO PROC
;;;193      */
;;;194    void I2S_SetFIFO(I2S_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold)
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196        i2s->CTRL = (i2s->CTRL & ~(I2S_CTRL_TXTH_Msk | I2S_CTRL_RXTH_Msk) |
000002  6803              LDR      r3,[r0,#0]
000004  243f              MOVS     r4,#0x3f
000006  0264              LSLS     r4,r4,#9
000008  43a3              BICS     r3,r3,r4
00000a  0249              LSLS     r1,r1,#9
00000c  430b              ORRS     r3,r3,r1
00000e  0311              LSLS     r1,r2,#12
000010  430b              ORRS     r3,r3,r1
000012  6003              STR      r3,[r0,#0]
;;;197                     (u32TxThreshold << I2S_CTRL_TXTH_Pos) |
;;;198                     (u32RxThreshold << I2S_CTRL_RXTH_Pos));
;;;199    }
000014  bd10              POP      {r4,pc}
;;;200    /*@}*/ /* end of group NANO100_I2S_EXPORTED_FUNCTIONS */
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\i2s.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_i2s_c_I2S_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REVSH|
#line 402
|__asm___5_i2s_c_I2S_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
