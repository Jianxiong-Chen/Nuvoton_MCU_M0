; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcd.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\lcd.crf ..\..\Library\StdDriver\src\lcd.c]
                          THUMB

                          AREA ||i.LCD_Close||, CODE, READONLY, ALIGN=2

                  LCD_Close PROC
;;;368     */
;;;369    void LCD_Close(void)
000000  4802              LDR      r0,|L1.12|
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;370    {
;;;371        LCD_DisableDisplay();
;;;372    }
00000a  4770              BX       lr
;;;373    
                          ENDP

                  |L1.12|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableBlink||, CODE, READONLY, ALIGN=2

                  LCD_DisableBlink PROC
;;;429     */
;;;430    void LCD_DisableBlink(void)
000000  4806              LDR      r0,|L2.28|
;;;431    {
;;;432        /* Disable Blink LCD */
;;;433        LCD->CTL &= ~LCD_CTL_BLINK_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;434    
;;;435        /* Disable frame count */
;;;436        LCD->FCR = 0x00;        // disable LCD frame count
00000a  2100              MOVS     r1,#0
00000c  6301              STR      r1,[r0,#0x30]
;;;437    
;;;438        if( LCD->FCSTS & LCD_FCSTS_FCSTS_Msk)   // clear status flag
00000e  6b41              LDR      r1,[r0,#0x34]
000010  07c9              LSLS     r1,r1,#31
000012  d001              BEQ      |L2.24|
;;;439            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
000014  2101              MOVS     r1,#1
000016  6341              STR      r1,[r0,#0x34]
                  |L2.24|
;;;440    
;;;441    }
000018  4770              BX       lr
;;;442    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableFrameCounter||, CODE, READONLY, ALIGN=2

                  LCD_DisableFrameCounter PROC
;;;274     */
;;;275    void LCD_DisableFrameCounter(void)
000000  4804              LDR      r0,|L3.20|
;;;276    {
;;;277        LCD->FCR = 0x00;        // disable LCD frame count
000002  2100              MOVS     r1,#0
000004  6301              STR      r1,[r0,#0x30]
;;;278    
;;;279        if( LCD->FCSTS & LCD_FCSTS_FCSTS_Msk)   // clear status flag
000006  6b41              LDR      r1,[r0,#0x34]
000008  07c9              LSLS     r1,r1,#31
00000a  d001              BEQ      |L3.16|
;;;280            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
00000c  2101              MOVS     r1,#1
00000e  6341              STR      r1,[r0,#0x34]
                  |L3.16|
;;;281    }
000010  4770              BX       lr
;;;282    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x400b0000

                          AREA ||i.LCD_DisableInt||, CODE, READONLY, ALIGN=2

                  LCD_DisableInt PROC
;;;472     */
;;;473    void LCD_DisableInt(uint32_t IntSrc)
000000  4909              LDR      r1,|L4.40|
;;;474    {
;;;475        if((IntSrc & LCD_FRAMECOUNT_INT) == LCD_FRAMECOUNT_INT )
000002  07c2              LSLS     r2,r0,#31
000004  d005              BEQ      |L4.18|
;;;476        {
;;;477            LCD->FCR &= ~LCD_FCR_FCEN_Msk;
000006  6b0a              LDR      r2,[r1,#0x30]
000008  0852              LSRS     r2,r2,#1
00000a  0052              LSLS     r2,r2,#1
00000c  630a              STR      r2,[r1,#0x30]
;;;478            LCD->FCSTS = LCD_FCSTS_FCSTS_Msk;
00000e  2201              MOVS     r2,#1
000010  634a              STR      r2,[r1,#0x34]
                  |L4.18|
;;;479        }
;;;480    
;;;481        if((IntSrc & LCD_POWERDOWN_INT) == LCD_POWERDOWN_INT )
000012  0780              LSLS     r0,r0,#30
000014  d506              BPL      |L4.36|
;;;482        {
;;;483            LCD->CTL &= ~LCD_CTL_PDINT_EN_Msk;
000016  6808              LDR      r0,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  0252              LSLS     r2,r2,#9
00001c  4390              BICS     r0,r0,r2
00001e  6008              STR      r0,[r1,#0]
;;;484            LCD->FCSTS = LCD_FCSTS_PDSTS_Msk;
000020  2002              MOVS     r0,#2
000022  6348              STR      r0,[r1,#0x34]
                  |L4.36|
;;;485        }
;;;486    }
000024  4770              BX       lr
;;;487    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableBlink||, CODE, READONLY, ALIGN=2

                  LCD_EnableBlink PROC
;;;382     */
;;;383    uint32_t LCD_EnableBlink(uint32_t u32ms)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;384    {
;;;385        uint32_t prescale=LCD_FCPRESC_DIV1, div=1;
;;;386        uint32_t framecount;
;;;387    
;;;388        if((1000/u32ms) > g_LCDFrameRate) u32ms = (1000/g_LCDFrameRate);
000002  207d              MOVS     r0,#0x7d
000004  2600              MOVS     r6,#0                 ;385
000006  2401              MOVS     r4,#1                 ;385
000008  00c0              LSLS     r0,r0,#3
00000a  9900              LDR      r1,[sp,#0]
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  4605              MOV      r5,r0
000012  482c              LDR      r0,|L5.196|
000014  6807              LDR      r7,[r0,#0]  ; g_LCDFrameRate
000016  207d              MOVS     r0,#0x7d
000018  00c0              LSLS     r0,r0,#3
00001a  4639              MOV      r1,r7
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  42bd              CMP      r5,r7
000022  d900              BLS      |L5.38|
000024  9000              STR      r0,[sp,#0]
                  |L5.38|
;;;389    
;;;390        framecount = (uint32_t) (u32ms / (1000/g_LCDFrameRate)) ;
000026  4601              MOV      r1,r0
000028  9800              LDR      r0,[sp,#0]
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  4605              MOV      r5,r0
;;;391    
;;;392        if(framecount > 0x3F)
000030  283f              CMP      r0,#0x3f
000032  d922              BLS      |L5.122|
;;;393        {
;;;394            for(div=2; div<=8; div*=2)
000034  2402              MOVS     r4,#2
000036  267d              MOVS     r6,#0x7d              ;388
000038  00f6              LSLS     r6,r6,#3              ;388
                  |L5.58|
;;;395            {
;;;396                framecount = (uint32_t) (u32ms / (1000/(g_LCDFrameRate/div)) );
00003a  4621              MOV      r1,r4
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  4601              MOV      r1,r0
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  4601              MOV      r1,r0
00004c  9800              LDR      r0,[sp,#0]
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  4605              MOV      r5,r0
;;;397    
;;;398                if( framecount <= 0x40 )
000054  2840              CMP      r0,#0x40
000056  d902              BLS      |L5.94|
000058  0064              LSLS     r4,r4,#1              ;394
00005a  2c08              CMP      r4,#8                 ;394
00005c  d9ed              BLS      |L5.58|
                  |L5.94|
;;;399                    break;
;;;400            }
;;;401            if(div==2) prescale = LCD_FCPRESC_DIV2;
00005e  2c02              CMP      r4,#2
000060  d005              BEQ      |L5.110|
;;;402            else if(div==4) prescale = LCD_FCPRESC_DIV4;
000062  2c04              CMP      r4,#4
000064  d005              BEQ      |L5.114|
;;;403            else if(div==8) prescale = LCD_FCPRESC_DIV8;
000066  2c08              CMP      r4,#8
000068  d005              BEQ      |L5.118|
;;;404            else return 0;
00006a  2000              MOVS     r0,#0
;;;405        }
;;;406        else if(framecount == 0)
;;;407        {
;;;408            framecount = 1;
;;;409        }
;;;410    
;;;411        LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | prescale;
;;;412        LCD->FCR = LCD->FCR & ~LCD_FCR_FCV_Msk | ((framecount - 1) << LCD_FCR_FCV_Pos);
;;;413        LCD->FCR |= LCD_FCR_FCEN_Msk;
;;;414    
;;;415        /* Enable Blink LCD */
;;;416        LCD->CTL |= LCD_CTL_BLINK_Msk;
;;;417    
;;;418        return ( (framecount*1000)/(g_LCDFrameRate/div) );
;;;419    }
00006c  bdf8              POP      {r3-r7,pc}
                  |L5.110|
00006e  2604              MOVS     r6,#4                 ;401
000070  e006              B        |L5.128|
                  |L5.114|
000072  2608              MOVS     r6,#8                 ;402
000074  e004              B        |L5.128|
                  |L5.118|
000076  260c              MOVS     r6,#0xc               ;403
000078  e002              B        |L5.128|
                  |L5.122|
00007a  2d00              CMP      r5,#0                 ;406
00007c  d100              BNE      |L5.128|
00007e  2501              MOVS     r5,#1                 ;408
                  |L5.128|
000080  4811              LDR      r0,|L5.200|
000082  6b01              LDR      r1,[r0,#0x30]         ;411
000084  220c              MOVS     r2,#0xc               ;411
000086  4391              BICS     r1,r1,r2              ;411
000088  4331              ORRS     r1,r1,r6              ;411
00008a  6301              STR      r1,[r0,#0x30]         ;411
00008c  6b01              LDR      r1,[r0,#0x30]         ;412
00008e  223f              MOVS     r2,#0x3f              ;412
000090  0112              LSLS     r2,r2,#4              ;412
000092  4391              BICS     r1,r1,r2              ;412
000094  012a              LSLS     r2,r5,#4              ;412
000096  3a10              SUBS     r2,r2,#0x10           ;412
000098  4311              ORRS     r1,r1,r2              ;412
00009a  6301              STR      r1,[r0,#0x30]         ;412
00009c  6b01              LDR      r1,[r0,#0x30]         ;413
00009e  2201              MOVS     r2,#1                 ;413
0000a0  4311              ORRS     r1,r1,r2              ;413
0000a2  6301              STR      r1,[r0,#0x30]         ;413
0000a4  6801              LDR      r1,[r0,#0]            ;416
0000a6  2280              MOVS     r2,#0x80              ;416
0000a8  4311              ORRS     r1,r1,r2              ;416
0000aa  6001              STR      r1,[r0,#0]            ;416
0000ac  4621              MOV      r1,r4                 ;418
0000ae  4638              MOV      r0,r7                 ;418
0000b0  f7fffffe          BL       __aeabi_uidivmod
0000b4  4601              MOV      r1,r0                 ;418
0000b6  207d              MOVS     r0,#0x7d              ;418
0000b8  00c0              LSLS     r0,r0,#3              ;418
0000ba  4368              MULS     r0,r5,r0              ;418
0000bc  f7fffffe          BL       __aeabi_uidivmod
0000c0  bdf8              POP      {r3-r7,pc}
;;;420    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      ||.data||
                  |L5.200|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableFrameCounter||, CODE, READONLY, ALIGN=2

                  LCD_EnableFrameCounter PROC
;;;220     */
;;;221    uint32_t LCD_EnableFrameCounter(uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;222    {
;;;223        uint32_t div = 1;   // default prediv == LCD_FCPRESC_DIV1
000002  2401              MOVS     r4,#1
;;;224    
;;;225        LCD->FCR = 0x00;
000004  4d19              LDR      r5,|L6.108|
000006  2100              MOVS     r1,#0
000008  6329              STR      r1,[r5,#0x30]
;;;226        LCD->FCSTS |= LCD_FCSTS_FCSTS_Msk;  // clear fcsts flag
00000a  6b69              LDR      r1,[r5,#0x34]
00000c  4626              MOV      r6,r4
00000e  4331              ORRS     r1,r1,r6
000010  6369              STR      r1,[r5,#0x34]
;;;227    
;;;228        if(u32Count == 0) return 0;
000012  2800              CMP      r0,#0
000014  d029              BEQ      |L6.106|
;;;229    
;;;230        if(u32Count > 0x3F)   // top value max. 63 = 0x3F
;;;231        {
;;;232            div = u32Count/64;
;;;233    
;;;234            if(div > 3)
;;;235            {
;;;236                div = 8;
;;;237                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV8;
000016  220c              MOVS     r2,#0xc
000018  283f              CMP      r0,#0x3f              ;230
00001a  d918              BLS      |L6.78|
00001c  0981              LSRS     r1,r0,#6              ;232
00001e  2903              CMP      r1,#3                 ;234
000020  d903              BLS      |L6.42|
000022  6b29              LDR      r1,[r5,#0x30]
000024  2408              MOVS     r4,#8                 ;236
000026  4311              ORRS     r1,r1,r2
000028  e00a              B        |L6.64|
                  |L6.42|
;;;238            }
;;;239            else if(div > 1)
00002a  2901              CMP      r1,#1
00002c  d904              BLS      |L6.56|
;;;240            {
;;;241                div = 4;
;;;242                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV4;
00002e  6b29              LDR      r1,[r5,#0x30]
000030  2404              MOVS     r4,#4                 ;241
000032  4391              BICS     r1,r1,r2
000034  3108              ADDS     r1,r1,#8
000036  e003              B        |L6.64|
                  |L6.56|
;;;243            }
;;;244            else
;;;245            {
;;;246                div = 2;
;;;247                LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV2;
000038  6b29              LDR      r1,[r5,#0x30]
00003a  2402              MOVS     r4,#2                 ;246
00003c  4391              BICS     r1,r1,r2
00003e  1d09              ADDS     r1,r1,#4
                  |L6.64|
000040  6329              STR      r1,[r5,#0x30]         ;242
;;;248            }
;;;249    
;;;250            u32Count = (u32Count+(div/2))/div;
000042  0861              LSRS     r1,r4,#1
000044  1808              ADDS     r0,r1,r0
000046  4621              MOV      r1,r4
000048  f7fffffe          BL       __aeabi_uidivmod
00004c  e002              B        |L6.84|
                  |L6.78|
;;;251        }
;;;252        else
;;;253        {
;;;254            div = 1;
;;;255            LCD->FCR = LCD->FCR & ~LCD_FCR_PRESCL_Msk | LCD_FCPRESC_DIV1;
00004e  6b29              LDR      r1,[r5,#0x30]
000050  4391              BICS     r1,r1,r2
000052  6329              STR      r1,[r5,#0x30]
                  |L6.84|
;;;256        }
;;;257    
;;;258        LCD->FCR = LCD->FCR & ~LCD_FCR_FCV_Msk | (u32Count << LCD_FCR_FCV_Pos);
000054  6b29              LDR      r1,[r5,#0x30]
000056  223f              MOVS     r2,#0x3f
000058  0112              LSLS     r2,r2,#4
00005a  4391              BICS     r1,r1,r2
00005c  0102              LSLS     r2,r0,#4
00005e  4311              ORRS     r1,r1,r2
000060  6329              STR      r1,[r5,#0x30]
;;;259    
;;;260        u32Count = u32Count*div;
;;;261    
;;;262        LCD->FCR |= LCD_FCR_FCEN_Msk;       // enable LCD frame count
000062  6b29              LDR      r1,[r5,#0x30]
000064  4360              MULS     r0,r4,r0              ;260
000066  4331              ORRS     r1,r1,r6
000068  6329              STR      r1,[r5,#0x30]
                  |L6.106|
;;;263    
;;;264        return u32Count;
;;;265    }
00006a  bd70              POP      {r4-r6,pc}
;;;266    
                          ENDP

                  |L6.108|
                          DCD      0x400b0000

                          AREA ||i.LCD_EnableInt||, CODE, READONLY, ALIGN=2

                  LCD_EnableInt PROC
;;;450     */
;;;451    void LCD_EnableInt(uint32_t IntSrc)
000000  4907              LDR      r1,|L7.32|
;;;452    {
;;;453        if((IntSrc & LCD_FRAMECOUNT_INT) == LCD_FRAMECOUNT_INT )
000002  07c2              LSLS     r2,r0,#31
000004  d003              BEQ      |L7.14|
;;;454        {
;;;455            LCD->FCR |= LCD_FCR_FCEN_Msk;
000006  6b0a              LDR      r2,[r1,#0x30]
000008  2301              MOVS     r3,#1
00000a  431a              ORRS     r2,r2,r3
00000c  630a              STR      r2,[r1,#0x30]
                  |L7.14|
;;;456        }
;;;457    
;;;458        if((IntSrc & LCD_POWERDOWN_INT) == LCD_POWERDOWN_INT )
00000e  0780              LSLS     r0,r0,#30
000010  d504              BPL      |L7.28|
;;;459        {
;;;460            LCD->CTL |= LCD_CTL_PDINT_EN_Msk;
000012  6808              LDR      r0,[r1,#0]
000014  2201              MOVS     r2,#1
000016  0252              LSLS     r2,r2,#9
000018  4310              ORRS     r0,r0,r2
00001a  6008              STR      r0,[r1,#0]
                  |L7.28|
;;;461        }
;;;462    
;;;463    }
00001c  4770              BX       lr
;;;464    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x400b0000

                          AREA ||i.LCD_Open||, CODE, READONLY, ALIGN=2

                  LCD_Open PROC
;;;297     */
;;;298    uint32_t LCD_Open(uint32_t u32DrivingType, uint32_t u32ComNum, uint32_t u32BiasLevel, uint32_t u32FramerateDiv, uint32_t u32DrivingVol)
000000  b5f0              PUSH     {r4-r7,lr}
;;;299    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4617              MOV      r7,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
00000a  461d              MOV      r5,r3
;;;300        uint32_t clkdiv, muldiv;
;;;301        uint32_t lcd_freq_div[] = {32, 64, 96, 128, 192, 256, 384, 512};
00000c  2220              MOVS     r2,#0x20
00000e  4945              LDR      r1,|L8.292|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memcpy4
;;;302        uint32_t multiplex_freq_div[] = {2, 4, 6, 8, 10, 12};
000016  4943              LDR      r1,|L8.292|
000018  2218              MOVS     r2,#0x18
00001a  3120              ADDS     r1,r1,#0x20
00001c  a808              ADD      r0,sp,#0x20
00001e  f7fffffe          BL       __aeabi_memcpy4
;;;303        uint32_t u32clk_src;
;;;304    
;;;305        /* IP reset */
;;;306        SYS->IPRST_CTL2 |= SYS_IPRST_CTL2_LCD_RST_Msk;
000022  2005              MOVS     r0,#5
000024  0700              LSLS     r0,r0,#28
000026  68c1              LDR      r1,[r0,#0xc]
000028  2201              MOVS     r2,#1
00002a  0692              LSLS     r2,r2,#26
00002c  4311              ORRS     r1,r1,r2
00002e  60c1              STR      r1,[r0,#0xc]
;;;307        SYS->IPRST_CTL2 &= ~SYS_IPRST_CTL2_LCD_RST_Msk;
000030  68c1              LDR      r1,[r0,#0xc]
000032  4391              BICS     r1,r1,r2
000034  60c1              STR      r1,[r0,#0xc]
000036  4b3c              LDR      r3,|L8.296|
000038  6818              LDR      r0,[r3,#0]
00003a  0840              LSRS     r0,r0,#1
00003c  0040              LSLS     r0,r0,#1
00003e  6018              STR      r0,[r3,#0]
;;;308    
;;;309        LCD_DisableDisplay();
;;;310    
;;;311        /* Turn all segments off */
;;;312        LCD_SetAllPixels(0);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       LCD_SetAllPixels
;;;313    
;;;314    
;;;315        switch(u32DrivingType)
;;;316        {
;;;317        case LCD_C_TYPE:
;;;318        case LCD_EXTERNAL_C_TYPE:
;;;319    
;;;320            LCD->DISPCTL &= ~LCD_DISPCTL_BV_SEL_Msk;        // internal source for charge pump
000046  2040              MOVS     r0,#0x40
;;;321            LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_CPUMP_FREQ_Msk | (LCD_CPUMP_DIV1);
;;;322            LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_CPUMP_VOL_SET_Msk | (u32DrivingVol);
;;;323            LCD->DISPCTL &= ~LCD_DISPCTL_IBRL_EN_Msk;
000048  2210              MOVS     r2,#0x10
00004a  2c00              CMP      r4,#0                 ;315
00004c  d005              BEQ      |L8.90|
00004e  2c01              CMP      r4,#1                 ;315
000050  d019              BEQ      |L8.134|
000052  2c02              CMP      r4,#2                 ;315
000054  d017              BEQ      |L8.134|
000056  2c03              CMP      r4,#3                 ;315
000058  d125              BNE      |L8.166|
                  |L8.90|
00005a  6859              LDR      r1,[r3,#4]            ;320
00005c  4381              BICS     r1,r1,r0              ;320
00005e  6059              STR      r1,[r3,#4]            ;320
000060  6858              LDR      r0,[r3,#4]            ;321
000062  2107              MOVS     r1,#7                 ;321
000064  02c9              LSLS     r1,r1,#11             ;321
000066  4388              BICS     r0,r0,r1              ;321
000068  6058              STR      r0,[r3,#4]            ;321
00006a  6858              LDR      r0,[r3,#4]            ;322
00006c  10c9              ASRS     r1,r1,#3              ;322
00006e  4388              BICS     r0,r0,r1              ;322
000070  9914              LDR      r1,[sp,#0x50]         ;322
000072  4308              ORRS     r0,r0,r1              ;322
000074  6058              STR      r0,[r3,#4]            ;322
000076  6858              LDR      r0,[r3,#4]
000078  4390              BICS     r0,r0,r2
00007a  6058              STR      r0,[r3,#4]
;;;324            LCD->DISPCTL |= LCD_DISPCTL_CPUMP_EN_Msk;       // enable charge pump
00007c  6858              LDR      r0,[r3,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6058              STR      r0,[r3,#4]
;;;325    
;;;326            break;
000084  e00f              B        |L8.166|
                  |L8.134|
;;;327    
;;;328        case LCD_EXTERNAL_R_TYPE:
;;;329        case LCD_INTERNAL_R_TYPE:
;;;330    
;;;331            LCD->DISPCTL &= ~LCD_DISPCTL_CPUMP_EN_Msk;
000086  6859              LDR      r1,[r3,#4]
000088  0849              LSRS     r1,r1,#1
00008a  0049              LSLS     r1,r1,#1
00008c  6059              STR      r1,[r3,#4]
;;;332            LCD->DISPCTL |= LCD_DISPCTL_BV_SEL_Msk;
00008e  6859              LDR      r1,[r3,#4]
000090  4301              ORRS     r1,r1,r0
000092  6059              STR      r1,[r3,#4]
;;;333            LCD->DISPCTL &= ~LCD_DISPCTL_IBRL_EN_Msk;
000094  6858              LDR      r0,[r3,#4]
000096  4390              BICS     r0,r0,r2
000098  6058              STR      r0,[r3,#4]
;;;334            LCD->DISPCTL |= (u32DrivingType == LCD_INTERNAL_R_TYPE)?LCD_DISPCTL_IBRL_EN_Msk:0;
00009a  6859              LDR      r1,[r3,#4]
00009c  2c02              CMP      r4,#2
00009e  d01c              BEQ      |L8.218|
0000a0  2000              MOVS     r0,#0
                  |L8.162|
0000a2  4301              ORRS     r1,r1,r0
0000a4  6059              STR      r1,[r3,#4]
                  |L8.166|
;;;335            break;
;;;336    
;;;337        };
;;;338    
;;;339        LCD->CTL &= ~LCD_CTL_FREQ_Msk;
0000a6  6818              LDR      r0,[r3,#0]
0000a8  2170              MOVS     r1,#0x70
0000aa  4388              BICS     r0,r0,r1
0000ac  6018              STR      r0,[r3,#0]
;;;340        LCD->CTL |= u32FramerateDiv;
0000ae  6818              LDR      r0,[r3,#0]
0000b0  4328              ORRS     r0,r0,r5
0000b2  6018              STR      r0,[r3,#0]
;;;341    
;;;342        LCD->CTL = (LCD->CTL & ~LCD_CTL_MUX_Msk) | ((u32ComNum - 1) << LCD_CTL_MUX_Pos);
0000b4  6818              LDR      r0,[r3,#0]
0000b6  210e              MOVS     r1,#0xe
0000b8  4388              BICS     r0,r0,r1
0000ba  0071              LSLS     r1,r6,#1
0000bc  1e89              SUBS     r1,r1,#2
0000be  4308              ORRS     r0,r0,r1
0000c0  6018              STR      r0,[r3,#0]
;;;343        LCD->DISPCTL = LCD->DISPCTL & ~LCD_DISPCTL_BIAS_SEL_Msk | u32BiasLevel;
0000c2  6858              LDR      r0,[r3,#4]
0000c4  2106              MOVS     r1,#6
0000c6  4388              BICS     r0,r0,r1
0000c8  4338              ORRS     r0,r0,r7
0000ca  6058              STR      r0,[r3,#4]
;;;344    
;;;345        if((CLK->CLKSEL1 & CLK_CLKSEL1_LCD_S_Msk) == 0)
0000cc  4817              LDR      r0,|L8.300|
0000ce  6940              LDR      r0,[r0,#0x14]
0000d0  0340              LSLS     r0,r0,#13
0000d2  d404              BMI      |L8.222|
;;;346            u32clk_src = 32 * 1024;
0000d4  2401              MOVS     r4,#1
0000d6  03e4              LSLS     r4,r4,#15
0000d8  e003              B        |L8.226|
                  |L8.218|
0000da  2010              MOVS     r0,#0x10              ;334
0000dc  e7e1              B        |L8.162|
                  |L8.222|
;;;347        else
;;;348            u32clk_src = 10 * 1024;
0000de  2405              MOVS     r4,#5
0000e0  02e4              LSLS     r4,r4,#11
                  |L8.226|
;;;349    
;;;350        clkdiv = (LCD->CTL & LCD_CTL_FREQ_Msk) >> LCD_CTL_FREQ_Pos;
0000e2  6818              LDR      r0,[r3,#0]
;;;351        muldiv = (LCD->CTL & LCD_CTL_MUX_Msk) >> LCD_CTL_MUX_Pos;
0000e4  6819              LDR      r1,[r3,#0]
;;;352    
;;;353        g_LCDFreq = (double)u32clk_src / lcd_freq_div[clkdiv];
;;;354        g_LCDFrameRate = (uint32_t)g_LCDFreq / multiplex_freq_div[muldiv];
;;;355    
;;;356        return g_LCDFrameRate;
;;;357    }
0000e6  0640              LSLS     r0,r0,#25
0000e8  0f40              LSRS     r0,r0,#29
0000ea  0709              LSLS     r1,r1,#28
0000ec  0f4f              LSRS     r7,r1,#29
0000ee  0080              LSLS     r0,r0,#2              ;353
0000f0  4669              MOV      r1,sp                 ;353
0000f2  5808              LDR      r0,[r1,r0]            ;353
0000f4  f7fffffe          BL       __aeabi_ui2d
0000f8  4605              MOV      r5,r0                 ;353
0000fa  460e              MOV      r6,r1                 ;353
0000fc  4620              MOV      r0,r4                 ;353
0000fe  f7fffffe          BL       __aeabi_ui2d
000102  4633              MOV      r3,r6                 ;353
000104  462a              MOV      r2,r5                 ;353
000106  f7fffffe          BL       __aeabi_ddiv
00010a  4c09              LDR      r4,|L8.304|
00010c  60e1              STR      r1,[r4,#0xc]          ;354  ; g_LCDFreq
00010e  60a0              STR      r0,[r4,#8]            ;354  ; g_LCDFreq
000110  f7fffffe          BL       __aeabi_d2uiz
000114  00b9              LSLS     r1,r7,#2              ;354
000116  aa08              ADD      r2,sp,#0x20           ;354
000118  5851              LDR      r1,[r2,r1]            ;354
00011a  f7fffffe          BL       __aeabi_uidivmod
00011e  6020              STR      r0,[r4,#0]            ;354  ; g_LCDFrameRate
000120  b00f              ADD      sp,sp,#0x3c
000122  bdf0              POP      {r4-r7,pc}
;;;358    
                          ENDP

                  |L8.292|
                          DCD      ||.constdata||
                  |L8.296|
                          DCD      0x400b0000
                  |L8.300|
                          DCD      0x50000200
                  |L8.304|
                          DCD      ||.data||

                          AREA ||i.LCD_SetAllPixels||, CODE, READONLY, ALIGN=2

                  LCD_SetAllPixels PROC
;;;176     */
;;;177    void LCD_SetAllPixels(uint32_t u32OnOff)
000000  2800              CMP      r0,#0
;;;178    {
000002  d001              BEQ      |L9.8|
;;;179        uint32_t u32SetValue;
;;;180    
;;;181        if(u32OnOff)
;;;182        {
;;;183            u32SetValue = 0xFFFFFFFF;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
                  |L9.8|
;;;184        }
;;;185        else
;;;186        {
;;;187            u32SetValue = 0x00000000;
;;;188        }
;;;189    
;;;190        LCD->MEM_0 = u32SetValue;
000008  490e              LDR      r1,|L9.68|
00000a  6088              STR      r0,[r1,#8]
;;;191        LCD->MEM_1 = u32SetValue;
00000c  60c8              STR      r0,[r1,#0xc]
;;;192        LCD->MEM_2 = u32SetValue;
00000e  6108              STR      r0,[r1,#0x10]
;;;193        LCD->MEM_3 = u32SetValue;
000010  6148              STR      r0,[r1,#0x14]
;;;194        LCD->MEM_4 = u32SetValue;
000012  6188              STR      r0,[r1,#0x18]
;;;195        LCD->MEM_5 = u32SetValue;
000014  61c8              STR      r0,[r1,#0x1c]
;;;196        LCD->MEM_6 = u32SetValue;
000016  6208              STR      r0,[r1,#0x20]
;;;197        LCD->MEM_7 = u32SetValue;
000018  6248              STR      r0,[r1,#0x24]
;;;198        LCD->MEM_8 = u32SetValue;
00001a  6288              STR      r0,[r1,#0x28]
;;;199    
;;;200        if(CyclesPerUs > 0)
00001c  480a              LDR      r0,|L9.72|
;;;201            SysTick->LOAD = 300 * CyclesPerUs;
00001e  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
000020  480a              LDR      r0,|L9.76|
000022  2900              CMP      r1,#0                 ;200
000024  d003              BEQ      |L9.46|
000026  22ff              MOVS     r2,#0xff
000028  322d              ADDS     r2,r2,#0x2d
00002a  4351              MULS     r1,r2,r1
00002c  e000              B        |L9.48|
                  |L9.46|
;;;202        else
;;;203            SysTick->LOAD = 15;
00002e  210f              MOVS     r1,#0xf
                  |L9.48|
000030  6141              STR      r1,[r0,#0x14]
;;;204        SysTick->VAL  =  (0x00);
000032  2100              MOVS     r1,#0
000034  6181              STR      r1,[r0,#0x18]
;;;205        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000036  2105              MOVS     r1,#5
000038  6101              STR      r1,[r0,#0x10]
                  |L9.58|
;;;206    
;;;207        /* Waiting for down-count to zero */
;;;208        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
00003a  6901              LDR      r1,[r0,#0x10]
00003c  03c9              LSLS     r1,r1,#15
00003e  d5fc              BPL      |L9.58|
;;;209    }
000040  4770              BX       lr
;;;210    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x400b0000
                  |L9.72|
                          DCD      CyclesPerUs
                  |L9.76|
                          DCD      0xe000e000

                          AREA ||i.LCD_SetPixel||, CODE, READONLY, ALIGN=2

                  LCD_SetPixel PROC
;;;63      */
;;;64     void LCD_SetPixel(uint32_t u32Com, uint32_t u32Seg, uint32_t u32OnFlag)
000000  b530              PUSH     {r4,r5,lr}
;;;65     {
;;;66         int32_t memnum = u32Seg / 4;
000002  088c              LSRS     r4,r1,#2
;;;67         int32_t seg_shift = 8*(u32Seg-(4*memnum));
;;;68     
;;;69         if(u32OnFlag)
;;;70         {
;;;71             if(memnum==0)
;;;72             {
;;;73                 LCD->MEM_0 |= (1<<u32Com)<<seg_shift;
000004  2301              MOVS     r3,#1
000006  4083              LSLS     r3,r3,r0
000008  0888              LSRS     r0,r1,#2              ;66
00000a  0080              LSLS     r0,r0,#2              ;67
00000c  1a08              SUBS     r0,r1,r0              ;67
00000e  00c0              LSLS     r0,r0,#3              ;67
000010  4d42              LDR      r5,|L10.284|
000012  4083              LSLS     r3,r3,r0
000014  2a00              CMP      r2,#0                 ;69
000016  d032              BEQ      |L10.126|
000018  2c00              CMP      r4,#0                 ;71
00001a  d012              BEQ      |L10.66|
;;;74             }
;;;75             else if(memnum==1)
00001c  2c01              CMP      r4,#1
00001e  d013              BEQ      |L10.72|
;;;76             {
;;;77                 LCD->MEM_1 |= (1<<u32Com)<<seg_shift;
;;;78             }
;;;79             else if(memnum==2)
000020  2c02              CMP      r4,#2
000022  d014              BEQ      |L10.78|
;;;80             {
;;;81                 LCD->MEM_2 |= (1<<u32Com)<<seg_shift;
;;;82             }
;;;83             else if(memnum==3)
000024  2c03              CMP      r4,#3
000026  d015              BEQ      |L10.84|
;;;84             {
;;;85                 LCD->MEM_3 |= (1<<u32Com)<<seg_shift;
;;;86             }
;;;87             else if(memnum==4)
000028  2c04              CMP      r4,#4
00002a  d016              BEQ      |L10.90|
;;;88             {
;;;89                 LCD->MEM_4 |= (1<<u32Com)<<seg_shift;
;;;90             }
;;;91             else if(memnum==5)
00002c  2c05              CMP      r4,#5
00002e  d017              BEQ      |L10.96|
;;;92             {
;;;93                 LCD->MEM_5 |= (1<<u32Com)<<seg_shift;
;;;94             }
;;;95             else if(memnum==6)
000030  2c06              CMP      r4,#6
000032  d018              BEQ      |L10.102|
;;;96             {
;;;97                 LCD->MEM_6 |= (1<<u32Com)<<seg_shift;
;;;98             }
;;;99             else if(memnum==7)
000034  2c07              CMP      r4,#7
000036  d019              BEQ      |L10.108|
;;;100            {
;;;101                LCD->MEM_7 |= (1<<u32Com)<<seg_shift;
;;;102            }
;;;103            else if(memnum==8)
000038  2c08              CMP      r4,#8
00003a  d01a              BEQ      |L10.114|
;;;104            {
;;;105                LCD->MEM_8 |= (1<<u32Com)<<seg_shift;
;;;106            }
;;;107            else if(memnum==9)
00003c  2c09              CMP      r4,#9
00003e  d01b              BEQ      |L10.120|
000040  e059              B        |L10.246|
                  |L10.66|
000042  68a8              LDR      r0,[r5,#8]            ;73
000044  4318              ORRS     r0,r0,r3              ;73
000046  e031              B        |L10.172|
                  |L10.72|
000048  68e8              LDR      r0,[r5,#0xc]          ;77
00004a  4318              ORRS     r0,r0,r3              ;77
00004c  e032              B        |L10.180|
                  |L10.78|
00004e  6928              LDR      r0,[r5,#0x10]         ;81
000050  4318              ORRS     r0,r0,r3              ;81
000052  e033              B        |L10.188|
                  |L10.84|
000054  6968              LDR      r0,[r5,#0x14]         ;85
000056  4318              ORRS     r0,r0,r3              ;85
000058  e034              B        |L10.196|
                  |L10.90|
00005a  69a8              LDR      r0,[r5,#0x18]         ;89
00005c  4318              ORRS     r0,r0,r3              ;89
00005e  e035              B        |L10.204|
                  |L10.96|
000060  69e8              LDR      r0,[r5,#0x1c]         ;93
000062  4318              ORRS     r0,r0,r3              ;93
000064  e036              B        |L10.212|
                  |L10.102|
000066  6a28              LDR      r0,[r5,#0x20]         ;97
000068  4318              ORRS     r0,r0,r3              ;97
00006a  e037              B        |L10.220|
                  |L10.108|
00006c  6a68              LDR      r0,[r5,#0x24]         ;101
00006e  4318              ORRS     r0,r0,r3              ;101
000070  e038              B        |L10.228|
                  |L10.114|
000072  6aa8              LDR      r0,[r5,#0x28]         ;105
000074  4318              ORRS     r0,r0,r3              ;105
000076  e039              B        |L10.236|
                  |L10.120|
;;;108            {
;;;109                LCD->MEM_9 |= (1<<u32Com)<<seg_shift;
000078  6ae8              LDR      r0,[r5,#0x2c]
00007a  4318              ORRS     r0,r0,r3
00007c  e03a              B        |L10.244|
                  |L10.126|
;;;110            }
;;;111        }
;;;112        else
;;;113        {
;;;114            if(memnum==0)
00007e  2c00              CMP      r4,#0
000080  d012              BEQ      |L10.168|
;;;115            {
;;;116                LCD->MEM_0 &= ~((1<<u32Com)<<seg_shift);
;;;117            }
;;;118            else if(memnum==1)
000082  2c01              CMP      r4,#1
000084  d014              BEQ      |L10.176|
;;;119            {
;;;120                LCD->MEM_1 &= ~((1<<u32Com)<<seg_shift);
;;;121            }
;;;122            else if(memnum==2)
000086  2c02              CMP      r4,#2
000088  d016              BEQ      |L10.184|
;;;123            {
;;;124                LCD->MEM_2 &= ~((1<<u32Com)<<seg_shift);
;;;125            }
;;;126            else if(memnum==3)
00008a  2c03              CMP      r4,#3
00008c  d018              BEQ      |L10.192|
;;;127            {
;;;128                LCD->MEM_3 &= ~((1<<u32Com)<<seg_shift);
;;;129            }
;;;130            else if(memnum==4)
00008e  2c04              CMP      r4,#4
000090  d01a              BEQ      |L10.200|
;;;131            {
;;;132                LCD->MEM_4 &= ~((1<<u32Com)<<seg_shift);
;;;133            }
;;;134            else if(memnum==5)
000092  2c05              CMP      r4,#5
000094  d01c              BEQ      |L10.208|
;;;135            {
;;;136                LCD->MEM_5 &= ~((1<<u32Com)<<seg_shift);
;;;137            }
;;;138            else if(memnum==6)
000096  2c06              CMP      r4,#6
000098  d01e              BEQ      |L10.216|
;;;139            {
;;;140                LCD->MEM_6 &= ~((1<<u32Com)<<seg_shift);
;;;141            }
;;;142            else if(memnum==7)
00009a  2c07              CMP      r4,#7
00009c  d020              BEQ      |L10.224|
;;;143            {
;;;144                LCD->MEM_7 &= ~((1<<u32Com)<<seg_shift);
;;;145            }
;;;146            else if(memnum==8)
00009e  2c08              CMP      r4,#8
0000a0  d022              BEQ      |L10.232|
;;;147            {
;;;148                LCD->MEM_8 &= ~((1<<u32Com)<<seg_shift);
;;;149            }
;;;150            else if(memnum==9)
0000a2  2c09              CMP      r4,#9
0000a4  d024              BEQ      |L10.240|
0000a6  e026              B        |L10.246|
                  |L10.168|
0000a8  68a8              LDR      r0,[r5,#8]            ;116
0000aa  4398              BICS     r0,r0,r3              ;116
                  |L10.172|
0000ac  60a8              STR      r0,[r5,#8]            ;116
0000ae  e022              B        |L10.246|
                  |L10.176|
0000b0  68e8              LDR      r0,[r5,#0xc]          ;120
0000b2  4398              BICS     r0,r0,r3              ;120
                  |L10.180|
0000b4  60e8              STR      r0,[r5,#0xc]          ;120
0000b6  e01e              B        |L10.246|
                  |L10.184|
0000b8  6928              LDR      r0,[r5,#0x10]         ;124
0000ba  4398              BICS     r0,r0,r3              ;124
                  |L10.188|
0000bc  6128              STR      r0,[r5,#0x10]         ;124
0000be  e01a              B        |L10.246|
                  |L10.192|
0000c0  6968              LDR      r0,[r5,#0x14]         ;128
0000c2  4398              BICS     r0,r0,r3              ;128
                  |L10.196|
0000c4  6168              STR      r0,[r5,#0x14]         ;128
0000c6  e016              B        |L10.246|
                  |L10.200|
0000c8  69a8              LDR      r0,[r5,#0x18]         ;132
0000ca  4398              BICS     r0,r0,r3              ;132
                  |L10.204|
0000cc  61a8              STR      r0,[r5,#0x18]         ;132
0000ce  e012              B        |L10.246|
                  |L10.208|
0000d0  69e8              LDR      r0,[r5,#0x1c]         ;136
0000d2  4398              BICS     r0,r0,r3              ;136
                  |L10.212|
0000d4  61e8              STR      r0,[r5,#0x1c]         ;136
0000d6  e00e              B        |L10.246|
                  |L10.216|
0000d8  6a28              LDR      r0,[r5,#0x20]         ;140
0000da  4398              BICS     r0,r0,r3              ;140
                  |L10.220|
0000dc  6228              STR      r0,[r5,#0x20]         ;140
0000de  e00a              B        |L10.246|
                  |L10.224|
0000e0  6a68              LDR      r0,[r5,#0x24]         ;144
0000e2  4398              BICS     r0,r0,r3              ;144
                  |L10.228|
0000e4  6268              STR      r0,[r5,#0x24]         ;144
0000e6  e006              B        |L10.246|
                  |L10.232|
0000e8  6aa8              LDR      r0,[r5,#0x28]         ;148
0000ea  4398              BICS     r0,r0,r3              ;148
                  |L10.236|
0000ec  62a8              STR      r0,[r5,#0x28]         ;148
0000ee  e002              B        |L10.246|
                  |L10.240|
;;;151            {
;;;152                LCD->MEM_9 &= ~((1<<u32Com)<<seg_shift);
0000f0  6ae8              LDR      r0,[r5,#0x2c]
0000f2  4398              BICS     r0,r0,r3
                  |L10.244|
0000f4  62e8              STR      r0,[r5,#0x2c]
                  |L10.246|
;;;153            }
;;;154    
;;;155        }
;;;156    
;;;157        if(CyclesPerUs > 0)
0000f6  480a              LDR      r0,|L10.288|
;;;158            SysTick->LOAD = 300 * CyclesPerUs;
0000f8  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
0000fa  480a              LDR      r0,|L10.292|
0000fc  2900              CMP      r1,#0                 ;157
0000fe  d003              BEQ      |L10.264|
000100  22ff              MOVS     r2,#0xff
000102  322d              ADDS     r2,r2,#0x2d
000104  4351              MULS     r1,r2,r1
000106  e000              B        |L10.266|
                  |L10.264|
;;;159        else
;;;160            SysTick->LOAD = 15;
000108  210f              MOVS     r1,#0xf
                  |L10.266|
00010a  6141              STR      r1,[r0,#0x14]
;;;161        SysTick->VAL  =  (0x00);
00010c  2100              MOVS     r1,#0
00010e  6181              STR      r1,[r0,#0x18]
;;;162        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000110  2105              MOVS     r1,#5
000112  6101              STR      r1,[r0,#0x10]
                  |L10.276|
;;;163    
;;;164        /* Waiting for down-count to zero */
;;;165        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000114  6901              LDR      r1,[r0,#0x10]
000116  03c9              LSLS     r1,r1,#15
000118  d5fc              BPL      |L10.276|
;;;166    }
00011a  bd30              POP      {r4,r5,pc}
;;;167    
                          ENDP

                  |L10.284|
                          DCD      0x400b0000
                  |L10.288|
                          DCD      CyclesPerUs
                  |L10.292|
                          DCD      0xe000e000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000060
                          DCD      0x00000080
                          DCD      0x000000c0
                          DCD      0x00000100
                          DCD      0x00000180
                          DCD      0x00000200
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000006
                          DCD      0x00000008
                          DCD      0x0000000a
                          DCD      0x0000000c

                          AREA ||.data||, DATA, ALIGN=3

                  g_LCDFrameRate
                          DCD      0x00000000
                          DCD      0x00000000
                  g_LCDFreq
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_d1694e06____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_lcd_c_d1694e06____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_d1694e06____REVSH|
#line 402
|__asm___5_lcd_c_d1694e06____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
