; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\pdma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\pdma.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\Library\StdDriver\inc -I..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\Library\CMSIS\Include -I..\bsp\bus\inc -I..\bsp\devices\inc -I..\User\inc -I.\RTE\_DC_Measure -ID:\software\tools\Keil_v5\Nuvoton\NuMicro_DFP\1.3.12\Device\NANO100BN\Include -ID:\software\tools\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=530 -D_RTE_ --omf_browse=.\objects\pdma.crf ..\..\Library\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=2

                  PDMA_Close PROC
;;;51      */
;;;52     void PDMA_Close(void)
000000  4901              LDR      r1,|L1.8|
;;;53     {
;;;54         PDMAGCR->GCRCSR = 0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;55     }
000006  4770              BX       lr
;;;56     
                          ENDP

                  |L1.8|
                          DCD      0x50008f00

                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  PDMA_DisableInt PROC
;;;228     */
;;;229    void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  4a03              LDR      r2,|L2.16|
;;;230    {
;;;231        PDMA_T *pdma;
;;;232        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  0200              LSLS     r0,r0,#8
000004  1880              ADDS     r0,r0,r2
;;;233    
;;;234        pdma->IER &= ~u32Mask;
000006  6a02              LDR      r2,[r0,#0x20]
000008  438a              BICS     r2,r2,r1
00000a  6202              STR      r2,[r0,#0x20]
;;;235    }
00000c  4770              BX       lr
;;;236    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  PDMA_EnableInt PROC
;;;210     */
;;;211    void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  4a03              LDR      r2,|L3.16|
;;;212    {
;;;213        PDMA_T *pdma;
;;;214        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  0200              LSLS     r0,r0,#8
000004  1880              ADDS     r0,r0,r2
;;;215    
;;;216        pdma->IER |= u32Mask;
000006  6a02              LDR      r2,[r0,#0x20]
000008  430a              ORRS     r2,r2,r1
00000a  6202              STR      r2,[r0,#0x20]
;;;217    }
00000c  4770              BX       lr
;;;218    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;37      */
;;;38     void PDMA_Open(uint32_t u32Mask)
000000  4902              LDR      r1,|L4.12|
;;;39     {
;;;40         PDMAGCR->GCRCSR |= (u32Mask << 8);
000002  680a              LDR      r2,[r1,#0]
000004  0200              LSLS     r0,r0,#8
000006  4302              ORRS     r2,r2,r0
000008  600a              STR      r2,[r1,#0]
;;;41     }
00000a  4770              BX       lr
;;;42     
                          ENDP

                  |L4.12|
                          DCD      0x50008f00

                          AREA ||i.PDMA_SetTimeOut||, CODE, READONLY, ALIGN=2

                  PDMA_SetTimeOut PROC
;;;173     */
;;;174    void PDMA_SetTimeOut(uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt)
000000  4b07              LDR      r3,|L5.32|
;;;175    {
;;;176        PDMA_T *pdma;
;;;177        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  0200              LSLS     r0,r0,#8
000004  18c0              ADDS     r0,r0,r3
;;;178    
;;;179        pdma->TCR = (pdma->TCR & ~PDMA_TCR_PDMA_TCR_Msk) | u32TimeOutCnt;
000006  6a83              LDR      r3,[r0,#0x28]
000008  0c1b              LSRS     r3,r3,#16
00000a  041b              LSLS     r3,r3,#16
00000c  4313              ORRS     r3,r3,r2
00000e  6283              STR      r3,[r0,#0x28]
;;;180        pdma->CSR = (pdma->CSR & ~PDMA_CSR_TO_EN_Msk) | (u32OnOff << PDMA_CSR_TO_EN_Pos);
000010  6802              LDR      r2,[r0,#0]
000012  2301              MOVS     r3,#1
000014  031b              LSLS     r3,r3,#12
000016  439a              BICS     r2,r2,r3
000018  0309              LSLS     r1,r1,#12
00001a  430a              ORRS     r2,r2,r1
00001c  6002              STR      r2,[r0,#0]
;;;181    
;;;182    }
00001e  4770              BX       lr
;;;183    
                          ENDP

                  |L5.32|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferAddr PROC
;;;104     */
;;;105    void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b530              PUSH     {r4,r5,lr}
;;;106    {
;;;107        PDMA_T *pdma;
;;;108        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  4d06              LDR      r5,|L6.28|
000004  0200              LSLS     r0,r0,#8
000006  1940              ADDS     r0,r0,r5
;;;109    
;;;110        pdma->SAR = u32SrcAddr;
000008  9c03              LDR      r4,[sp,#0xc]
00000a  6041              STR      r1,[r0,#4]
;;;111        pdma->DAR = u32DstAddr;
00000c  6083              STR      r3,[r0,#8]
;;;112        pdma->CSR = (pdma->CSR & ~(PDMA_CSR_SAD_SEL_Msk|PDMA_CSR_DAD_SEL_Msk)) | (u32SrcCtrl | u32DstCtrl);
00000e  6801              LDR      r1,[r0,#0]
000010  23f0              MOVS     r3,#0xf0
000012  4399              BICS     r1,r1,r3
000014  4322              ORRS     r2,r2,r4
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;113    }
00001a  bd30              POP      {r4,r5,pc}
;;;114    
                          ENDP

                  |L6.28|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;67      */
;;;68     void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  4b0c              LDR      r3,|L7.52|
;;;69     {
000002  b510              PUSH     {r4,lr}
;;;70         PDMA_T *pdma;
;;;71         pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000004  0200              LSLS     r0,r0,#8
000006  18c0              ADDS     r0,r0,r3
;;;72         pdma->CSR = (pdma->CSR & ~PDMA_CSR_APB_TWS_Msk) | u32Width;
000008  6803              LDR      r3,[r0,#0]
00000a  2403              MOVS     r4,#3
00000c  04e4              LSLS     r4,r4,#19
00000e  43a3              BICS     r3,r3,r4
000010  430b              ORRS     r3,r3,r1
000012  6003              STR      r3,[r0,#0]
;;;73         switch (u32Width)
000014  2900              CMP      r1,#0
000016  d008              BEQ      |L7.42|
000018  2301              MOVS     r3,#1
00001a  04db              LSLS     r3,r3,#19
00001c  1ac9              SUBS     r1,r1,r3
00001e  d006              BEQ      |L7.46|
000020  4299              CMP      r1,r3
000022  d101              BNE      |L7.40|
;;;74         {
;;;75         case PDMA_WIDTH_32:
;;;76             pdma->BCR = (u32TransCount << 2);
;;;77             break;
;;;78     
;;;79         case PDMA_WIDTH_8:
;;;80             pdma->BCR = u32TransCount;
;;;81             break;
;;;82     
;;;83         case PDMA_WIDTH_16:
;;;84             pdma->BCR = (u32TransCount << 1);
000024  0051              LSLS     r1,r2,#1
                  |L7.38|
000026  60c1              STR      r1,[r0,#0xc]
                  |L7.40|
;;;85             break;
;;;86     
;;;87         default:
;;;88             ;
;;;89         }
;;;90     }
000028  bd10              POP      {r4,pc}
                  |L7.42|
00002a  0091              LSLS     r1,r2,#2              ;76
00002c  e7fb              B        |L7.38|
                  |L7.46|
00002e  60c2              STR      r2,[r0,#0xc]          ;80
000030  bd10              POP      {r4,pc}
;;;91     
                          ENDP

000032  0000              DCW      0x0000
                  |L7.52|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;132     */
;;;133    void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  4b1b              LDR      r3,|L8.112|
;;;134    {
;;;135        PDMA_T *pdma;
;;;136        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  0202              LSLS     r2,r0,#8
000004  18d2              ADDS     r2,r2,r3
000006  b510              PUSH     {r4,lr}               ;134
;;;137    
;;;138        switch (u32Ch)
;;;139        {
;;;140        case 1:
;;;141            PDMAGCR->DSSR0 = (PDMAGCR->DSSR0 & ~DMA_GCR_DSSR0_CH1_SEL_Msk) | (u32Peripheral << DMA_GCR_DSSR0_CH1_SEL_Pos);
000008  4b1a              LDR      r3,|L8.116|
00000a  2801              CMP      r0,#1                 ;138
00000c  d006              BEQ      |L8.28|
00000e  2802              CMP      r0,#2                 ;138
000010  d00a              BEQ      |L8.40|
000012  2803              CMP      r0,#3                 ;138
000014  d010              BEQ      |L8.56|
000016  2804              CMP      r0,#4                 ;138
000018  d119              BNE      |L8.78|
00001a  e013              B        |L8.68|
                  |L8.28|
00001c  6858              LDR      r0,[r3,#4]
00001e  241f              MOVS     r4,#0x1f
000020  0224              LSLS     r4,r4,#8
000022  43a0              BICS     r0,r0,r4
000024  020c              LSLS     r4,r1,#8
;;;142            break;
000026  e004              B        |L8.50|
                  |L8.40|
;;;143        case 2:
;;;144            PDMAGCR->DSSR0 = (PDMAGCR->DSSR0 & ~DMA_GCR_DSSR0_CH2_SEL_Msk) | (u32Peripheral << DMA_GCR_DSSR0_CH2_SEL_Pos);
000028  6858              LDR      r0,[r3,#4]
00002a  241f              MOVS     r4,#0x1f
00002c  0424              LSLS     r4,r4,#16
00002e  43a0              BICS     r0,r0,r4
000030  040c              LSLS     r4,r1,#16
                  |L8.50|
000032  4320              ORRS     r0,r0,r4              ;141
000034  6058              STR      r0,[r3,#4]            ;141
000036  e00a              B        |L8.78|
                  |L8.56|
;;;145            break;
;;;146        case 3:
;;;147            PDMAGCR->DSSR0 = (PDMAGCR->DSSR0 & ~DMA_GCR_DSSR0_CH3_SEL_Msk) | (u32Peripheral << DMA_GCR_DSSR0_CH3_SEL_Pos);
000038  6858              LDR      r0,[r3,#4]
00003a  241f              MOVS     r4,#0x1f
00003c  0624              LSLS     r4,r4,#24
00003e  43a0              BICS     r0,r0,r4
000040  060c              LSLS     r4,r1,#24
;;;148            break;
000042  e7f6              B        |L8.50|
                  |L8.68|
;;;149        case 4:
;;;150            PDMAGCR->DSSR1 = (PDMAGCR->DSSR1 & ~DMA_GCR_DSSR1_CH4_SEL_Msk) | u32Peripheral;
000044  6898              LDR      r0,[r3,#8]
000046  0940              LSRS     r0,r0,#5
000048  0140              LSLS     r0,r0,#5
00004a  4308              ORRS     r0,r0,r1
00004c  6098              STR      r0,[r3,#8]
                  |L8.78|
;;;151            break;
;;;152        default:
;;;153            ;
;;;154        }
;;;155        if (u32Peripheral == PDMA_MEM)
;;;156            pdma->CSR &= ~PDMA_CSR_MODE_SEL_Msk;
00004e  200c              MOVS     r0,#0xc
000050  291f              CMP      r1,#0x1f              ;155
000052  d005              BEQ      |L8.96|
;;;157        else if (u32Peripheral & 0x10)
000054  06c9              LSLS     r1,r1,#27
;;;158            pdma->CSR = (pdma->CSR & ~PDMA_CSR_MODE_SEL_Msk) | 0x4; /* IP to memory */
;;;159        else
;;;160            pdma->CSR = (pdma->CSR & ~PDMA_CSR_MODE_SEL_Msk) | 0x8; /* memory to IP */
000056  6811              LDR      r1,[r2,#0]
000058  d505              BPL      |L8.102|
00005a  4381              BICS     r1,r1,r0              ;158
00005c  1d09              ADDS     r1,r1,#4              ;158
00005e  e004              B        |L8.106|
                  |L8.96|
000060  6811              LDR      r1,[r2,#0]            ;156
000062  4381              BICS     r1,r1,r0              ;156
000064  e001              B        |L8.106|
                  |L8.102|
000066  4381              BICS     r1,r1,r0
000068  3108              ADDS     r1,r1,#8
                  |L8.106|
00006a  6011              STR      r1,[r2,#0]            ;156
;;;161    }
00006c  bd10              POP      {r4,pc}
;;;162    
                          ENDP

00006e  0000              DCW      0x0000
                  |L8.112|
                          DCD      0x50008000
                  |L8.116|
                          DCD      0x50008f00

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;192     */
;;;193    void PDMA_Trigger(uint32_t u32Ch)
000000  4903              LDR      r1,|L9.16|
;;;194    {
;;;195        PDMA_T *pdma;
;;;196        pdma = (PDMA_T *)((uint32_t) PDMA1_BASE + (0x100 * (u32Ch-1)));
000002  0200              LSLS     r0,r0,#8
000004  1840              ADDS     r0,r0,r1
;;;197    
;;;198        pdma->CSR |= (PDMA_CSR_TRIG_EN_Msk | PDMA_CSR_PDMACEN_Msk);
000006  6801              LDR      r1,[r0,#0]
000008  4a02              LDR      r2,|L9.20|
00000a  4311              ORRS     r1,r1,r2
00000c  6001              STR      r1,[r0,#0]
;;;199    }
00000e  4770              BX       lr
;;;200    
                          ENDP

                  |L9.16|
                          DCD      0x50008000
                  |L9.20|
                          DCD      0x00800001

;*** Start embedded assembler ***

#line 1 "..\\..\\Library\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 388 "..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 402
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
